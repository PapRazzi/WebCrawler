<!DOCTYPE html>
<!--[if IE 6]>
<html id="ie6" lang="en">
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en">
<![endif]-->
<!--[if !(IE 6) | !(IE 7) | !(IE 8)  ]><!-->
<html lang="en">
<!--<![endif]-->
<!--
	generated 137 seconds ago
	generated in 0.386 seconds
	served from batcache in 0.003 seconds
	expires in 163 seconds
-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>code.flickr.com</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://s2.wp.com/wp-content/themes/vip/flickr-code/style.css?m=1345671377g" />
<link rel="pingback" href="http://code.flickr.net/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="http://s2.wp.com/wp-content/themes/pub/twentyeleven/js/html5.js?m=1354160568g" type="text/javascript"></script>
<![endif]-->
		<script src='http://r-login.wordpress.com/remote-login.php?action=js&amp;host=code.flickr.net&amp;id=39034126&amp;t=1360947003&amp;back=code.flickr.net%2F' type="text/javascript"></script>
		<script type="text/javascript">
		/* <![CDATA[ */
			if ( 'function' === typeof WPRemoteLogin ) {
				document.cookie = "wordpress_test_cookie=test; path=/";
				if ( document.cookie.match( /(;|^)\s*wordpress_test_cookie\=/ ) ) {
					WPRemoteLogin();
				}
			}
		/* ]]> */
		</script>
		<link rel="alternate" type="application/rss+xml" title="code.flickr.com &raquo; Feed" href="http://code.flickr.net/feed/" />
<link rel="alternate" type="application/rss+xml" title="code.flickr.com &raquo; Comments Feed" href="http://code.flickr.net/comments/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel='stylesheet' id='demosites-open-sans-css'  href='http://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic,700,700italic&#038;subset=latin,latin-ext' type='text/css' media='all' />
<link rel='stylesheet' id='all-css-2' href='http://s0.wp.com/_static/??-eJydjs0OAiEMhF9IrK6Y6MH4LCx2AS0/gbJk3148mJiY9eBpkplv2oGWhI6BMTD4KhJV40KBFAuLiZTLUHgh3OpSNvDBskWPnasjcOvGgoQzht/07BJM5PQj9+SG/5wWLenovzor063KLpi3rn2yEgzFUdELuPrL/nA8nXfDIOX9CYWwayo=' type='text/css' media='all' />
<script type='text/javascript' src='http://s2.wp.com/wp-includes/js/jquery/jquery.js?m=1354137473g'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://flickrcode.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://flickrcode.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress.com" />
<link rel='shortlink' href='http://wp.me/2DMyG' />
<link rel="shortcut icon" type="image/x-icon" href="http://1.gravatar.com/blavatar/341946154e8a7e5497473810e7ef560c?s=16" sizes="16x16" />
<link rel="icon" type="image/x-icon" href="http://1.gravatar.com/blavatar/341946154e8a7e5497473810e7ef560c?s=16" sizes="16x16" />
<link rel="apple-touch-icon-precomposed" href="http://0.gravatar.com/blavatar/8b1d73fba9c0d02a3e78929d8cecfd82?s=114" />
<link rel='openid.server' href='http://flickrcode.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://flickrcode.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://code.flickr.net/osd.xml" title="code.flickr.com" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
		<style>
		/* <![CDATA[ */
		/* Block: reblog */
		
		.reblog-from img                   { margin: 0 10px 0 0; vertical-align: middle; padding: 0; border: 0; }
		.reblogger-note img.avatar         { float: left; padding: 0; border: 0; }
		.reblogger-note-content            { margin: 0 0 20px; }
		.reblog-post .wpcom-enhanced-excerpt-content { border-left: 3px solid #eee; padding-left: 15px; }
		.reblog-post ul.thumb-list         { display: block; list-style: none; margin: 2px 0; padding: 0; clear: both; }
		.reblog-post ul.thumb-list li      { display: inline; margin: 0; padding: 0 1px; border: 0; }
		.reblog-post ul.thumb-list li a    { margin: 0; padding: 0; border: 0; }
		.reblog-post ul.thumb-list li img  { margin: 0; padding: 0; border: 0; }
		
		.reblog-post .wpcom-enhanced-excerpt { clear: both; }
		
		.reblog-post .wpcom-enhanced-excerpt address,
		.reblog-post .wpcom-enhanced-excerpt li,
		.reblog-post .wpcom-enhanced-excerpt h1,
		.reblog-post .wpcom-enhanced-excerpt h2,
		.reblog-post .wpcom-enhanced-excerpt h3,
		.reblog-post .wpcom-enhanced-excerpt h4,
		.reblog-post .wpcom-enhanced-excerpt h5,
		.reblog-post .wpcom-enhanced-excerpt h6,
		.reblog-post .wpcom-enhanced-excerpt p { font-size: 100% !important; }
		
		.reblog-post .wpcom-enhanced-excerpt blockquote,
		.reblog-post .wpcom-enhanced-excerpt pre,
		.reblog-post .wpcom-enhanced-excerpt code,
		.reblog-post .wpcom-enhanced-excerpt q { font-size: 98% !important; }
		

		/* ]]> */
		</style>
		<meta name="application-name" content="code.flickr.com" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://code.flickr.net/feed/;icon-uri=http://1.gravatar.com/blavatar/341946154e8a7e5497473810e7ef560c?s=16" />	<style type="text/css">
			#site-title,
		#site-description {
			position: absolute !important;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
		</style>
			<link rel="stylesheet" id="custom-css-css" type="text/css" href="http://s1.wp.com/?custom-css=1&#038;csblog=2DMyG&#038;cscache=6&#038;csrev=103" />
		</head>

<body class="home blog typekit-enabled two-column right-sidebar highlander-enabled highlander-light">
<div id="page" class="hfeed">
	<header id="branding" role="banner">
			<hgroup>
				<h1 id="site-title"><span><a href="http://code.flickr.net/" title="code.flickr.com" rel="home">code.flickr.com</a></span></h1>
				<h2 id="site-description"></h2>
			</hgroup>

						<a href="http://code.flickr.net/">
									<img src="http://flickrcode.files.wordpress.com/2012/09/code-flickr-com-drawn-header-grey-large.png" width="1000" height="157" alt="" />
							</a>
			
							<div class="only-search with-image">
					<form method="get" id="searchform" action="http://code.flickr.net/">
		<label for="s" class="assistive-text">Search</label>
		<input type="text" class="field" name="s" id="s" placeholder="Search" />
		<input type="submit" class="submit" name="submit" id="searchsubmit" value="Search" />
	</form>
				</div>
			
			<nav id="access" role="navigation">
				<h3 class="assistive-text">Main menu</h3>
								<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
				<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
								<div class="menu-menu-container"><ul id="menu-menu" class="menu"><li id="menu-item-2084" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2084"><a href="http://www.flickr.com/">Flickr</a></li>
<li id="menu-item-2085" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2085"><a href="http://blog.flickr.net/">Flickr Blog</a></li>
<li id="menu-item-2250" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2250"><a href="http://twitter.com/flickr">@flickr</a></li>
<li id="menu-item-2086" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2086"><a href="http://twitter.com/flickrapi">@flickrapi</a></li>
<li id="menu-item-2087" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2087"><a href="http://developer.flickr.com/">Developer Guidelines</a></li>
<li id="menu-item-2088" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2088"><a href="http://www.flickr.com/services/api/">API</a></li>
<li id="menu-item-2089" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2089"><a href="http://www.flickr.com/jobs/">Jobs</a></li>
</ul></div>			</nav><!-- #access -->
	</header><!-- #branding -->


	<div id="main">

		<div id="primary">
			<div id="content" role="main">

			
						<nav id="nav-above">
			<h3 class="assistive-text">Post navigation</h3>
			<div class="nav-previous"><a href="http://code.flickr.net/page/2/" ><span class="meta-nav">&larr;</span> Older posts</a></div>
			<div class="nav-next"></div>
		</nav><!-- #nav-above -->
	
								
					
	<article id="post-2350" class="post-2350 post type-post status-publish format-standard hentry category-uncategorized tag-javascript tag-node-js tag-redis">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/12/21/redis-global-locks-redux/" title="Permalink to Redis Global Locks&nbsp;Redux" rel="bookmark">Redis Global Locks&nbsp;Redux</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/12/21/redis-global-locks-redux/" title="7:15 am" rel="bookmark"><time class="entry-date" datetime="2012-12-21T07:15:52+00:00">December 21, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/joshuaflickr/" title="View all posts by Joshua Cohen" rel="author">Joshua Cohen</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>In my <a href="http://code.flickr.net/2012/12/12/highly-available-real-time-notifications/">last post</a> I described how we use Redis to manage a global lock that allows us to automatically failover to a backup process if there was a problem in the primary process. The method described allegedly allowed for any number of backup processes to work in conjunction to pick up on primary failures and take over processing.</p>
<p class="flickr-photo"><a title="Locks #1 from Christoph Kummer, on Flickr" href="http://www.flickr.com/photos/kuemmi/3460993750/"><img alt="Locks #1" src="http://farm4.staticflickr.com/3653/3460993750_7b81638f6d_b.jpg" width="1024" height="681" /></a><br />
<span class="caption"><a href="http://www.flickr.com/photos/kuemmi/3460993750/">Locks #1</a> by <a href="http://www.flickr.com/photos/kuemmi/">Christoph Kummer</a></span></p>
<p>Thanks to an astute reader, it was pointed out that the code in the blog wouldn’t actually work as advertised:</p>
<blockquote class='twitter-tweet'><p>@<a href="https://twitter.com/heyjoshua">heyjoshua</a> I might be missing something but the code looks like it&#039;ll keep trying to acquire the lock, which it&#039;ll can&#039;t, due to the SETNX.&mdash; <br />Nolan Caudill (@nolancaudill) <a href='http://twitter.com/#!/nolancaudill/status/279814860227870720' data-datetime='2012-12-15T05:07:16+00:00'>December 15, 2012</a></p></blockquote>
<p>&nbsp;</p>
<h2>The Problem</h2>
<p><a href="https://twitter.com/nolancaudill/">Nolan</a> correctly noticed that when the backup processes attempts to acquire the lock via SETNX, that lock key will already exist from when it was acquired by the primary, and thus all subsequent attempts to acquire locks will simply end up constantly trying to acquire a lock that can never be acquired. As a reminder, here’s what we do when we check back on the status of a lock:</p>
<p><pre class="brush: jscript; gutter: false;">
function checkLock(payload, lockIdentifier) {
    client.get(lockIdentifier, function(error, data) {
        // Error handling elided for brevity
        if (data !== DONE_VALUE) {
            acquireLock(payload, data + 1, lockCallback);
        } else {
            client.del(lockIdentifier);
        }
    });
}
</pre></p>
<p>And here’s the relevant bit from acquireLock that calls SETNX:</p>
<p><pre class="brush: jscript; gutter: false;">
    client.setnx(lockIdentifier, attempt, function(error, data) {
        if (error) {
            logger.error(&quot;Error trying to acquire redis lock for: %s&quot;, lockIdentifier);
            return callback(error, dataForCallback(false));
        }

        return callback(null, dataForCallback(data === 1));
    });
</pre></p>
<p>So, you’re thinking, how could this vaunted failover process ever actually work? The answer is simple: the code from that post isn’t what we actually run. The actual production code has a single backup process, so it doesn’t try to re-acquire the lock in the event of failure, it just skips right to trying to send the message itself. In the previous post, I described a more general solution that would work for any number of backup processes, but I missed this one important detail.</p>
<p>That being said, with some relatively minor changes, it’s absolutely possible to support an arbitrary number of backup processes and still maintain the use of the global lock. The trivial solution is to simply have the backup process delete the key before trying to re-acquire the lock (or, technically acquire it anew). However, the problem with that becomes apparent pretty quickly. If there are multiple backup processes all deleting the lock and trying to SETNX a new lock again, there’s a good chance that a race condition could arise wherein one of backups deletes a lock that was acquired by another backup process, rather than the failed lock from the primary.</p>
<h2>The Solution</h2>
<p>Thankfully, Redis has a solution to help us out here: <a href="http://redis.io/topics/transactions">transactions</a>. By using a combination of <a href="http://redis.io/commands/watch">WATCH</a>, <a href="http://redis.io/commands/multi">MULTI</a>, and <a href="http://redis.io/commands/exec">EXEC</a>, we can perform actions on the lock key and be confident that no one has modified it before our actions can complete. The process to acquire a lock remains the same: many processes will issue a SETNX and only one will win. The changes come into play when the processes that didn’t acquire the lock check back on its status. Whereas before, we simply checked the current value of the lock key, now we must go through the above described Redis transaction process. First we watch the key, then we do what amounts to a check and set (albeit with a few different actions to perform based on the outcome of the check):</p>
<p><pre class="brush: jscript; gutter: false;">
function checkLock(payload, lockIdentifier, lastCount) {
    client.watch(lockIdentifier);
    client.multi()
        .get(lockIdentifier)
        .exec(function(error, replies) {
            if (!replies) {
                // Lock value changed while we were checking it, someone else got the lock
                client.get(lockIdentifier, function(error, newCount) {
                    setTimeout(checkLock, LOCK_EXPIRY, payload, lockIdentifier, newCount);
                });

                return;
            }

            var currentCount = replies[0];
            if (currentCount === null) {
                // No lock means someone else completed the work while we were checking on its status and the key has already been deleted
                return;
            } else if (currentCount === DONE_VALUE) {
                // Another process completed the work, let’s delete the lock key
                client.del(lockIdentifier);
            } else if (currentCount == lastCount) {
                // Key still exists, and no one has incremented the lock count, let’s try to reacquire the lock
                reacquireLock(payload, lockIdentifier, currentCount, doWork);
            } else {
                // Key still exists, but the value does not match what we expected, someone else has reacquired the lock, check back later to see how they fared
                setTimeout(checkLock, LOCK_EXPIRY, payload, lockIdentifier, currentCount);
            }
        });
}
</pre></p>
<p>As you can see, there are five basic cases we need to deal with after we get the value of the lock key:</p>
<ol>
<li>If we got a null reply back from Redis, that means that something else changed the value of our key, and our exec was aborted; i.e. someone else got the lock and changed its value before we could do anything. We just treat it as a failure to acquire the lock and check back again later.</li>
<li>If we get back a reply from Redis, but the value for the key is null, that means that the work was actually completed <strong>and</strong> the key was deleted before we could do anything. In this case there’s nothing for us to do at all, so we can stop right away.</li>
<li>If we get back a value for the lock key that is equal to our sentinel value, then someone else completed the work, but it’s up to us to clean up the lock key, so we issue a Redis DEL and call our job done.</li>
<li>Here’s where things get interesting: if the key still exists, and its value (the number of attempts that have been made) is equal to our last attempt count, then we should try and reacquire the lock.</li>
<li>The last scenario is where the key exists but its value (again, the number of attempts that have been made) does not equal our last attempt count. In this case, someone else has already tried to reacquire the lock and failed. We treat this as a failure to acquire the lock and schedule a timeout to check back later to see how whoever did acquire the lock got on. The appropriate action here is debatable. Depending on how long your underlying work takes, it may be better to actually try and reacquire the lock here as well, since whoever acquired the lock may have already failed. This can, however, lead to premature exhaustion of your attempt allotment, so to be safe, we just wait.</li>
</ol>
<p>So, we’ve checked on our lock, and, since the previous process with the lock failed to complete its work, it’s time to actually try and reacquire the lock. The process in this case is similar to the above inasmuch as we must use Redis transactions to manage the reacquisition process, thankfully however, the steps are (somewhat) simpler:</p>
<p><pre class="brush: jscript; gutter: false;">
function reacquireLock(payload, lockIdentifier, attemptCount, callback) {
    client.watch(lockIdentifier);
    client.get(lockIdentifier, function(error, data) {
        if (!data) {
            // Lock is gone, someone else completed the work and deleted the lock, nothing to do here, stop watching and carry on
            client.unwatch();
            return;
        }

        var attempts = parseInt(data, 10) + 1;

        if (attempts &gt; MAX_ATTEMPTS) {
            // Our allotment has been exceeded by another process, unwatch and expire the key
            client.unwatch();
            client.expire(lockIdentifier, ((LOCK_EXPIRY / 1000) * 2));
            return;
        }

        client.multi()
            .set(lockIdentifier, attempts)
            .exec(function(error, replies) {
                if (!replies) {
                    // The value changed out from under us, we didn't get the lock!
                    client.get(lockIdentifier, function(error, currentAttemptCount) {
                        setTimeout(checkLock, LOCK_TIMEOUT, payload, lockIdentifier, currentAttemptCount);
                    });
                } else {
                    // Hooray, we acquired the lock!
                    callback(null, {
                        &quot;acquired&quot; : true,
                        &quot;lockIdentifier&quot; : lockIdentifier,
                        &quot;payload&quot; : payload
                    });
                }
            });
    });
}
</pre></p>
<p>As with checkLock we start out by watching the lock key, and proceed do a (comparitively) simplified check and set. In this case, we’ve &#8220;only&#8221; got three scenarios to deal with:</p>
<ol>
<li>If we’ve already exceeded our allotment of attempts, it’s time to give up. In this case, the allotment was actually exceeded in another worker, so we can just stop right away. We make sure to unwatch the key, and set it expire at some point far enough in the future that any remaining processes attempting to acquire locks will also see that it’s time to give up.</li>
</ol>
<p>Assuming we’re still good to keep working, we try and update the lock key within a MULTI/EXEC block, where we have our remaining two scenarios:</p>
<ol start="2">
<li>If we get no replies back, that again means that something changed the value of the lock key during our transaction and the EXEC was aborted. Since we failed to acquire the lock we just check back later to see what happened to whoever did acquire the lock.</li>
<li>The last scenario is the one in which we managed to acquire the lock. In this case we just go ahead and do our work and hopefully complete it!</li>
</ol>
<h2>Bonus!</h2>
<p>To make managing global locks even easier, I’ve gone ahead and generalized all the code mentioned in both this and the previous post on the subject into a tidy little event based npm package: <a href="https://github.com/yahoo/redis-locking-worker">https://github.com/yahoo/redis-locking-worker</a>. Here’s a quick snippet of how to implement global locks using this new package:</p>
<p><pre class="brush: jscript; gutter: false;">
var RedisLockingWorker = require(&quot;redis-locking-worker”);

var SUCCESS_CHANCE = 0.15;

var lock = new RedisLockingWorker({
    &quot;lockKey&quot; : &quot;mylock&quot;,
    &quot;statusLevel&quot; : RedisLockingWorker.StatusLevels.Verbose,
    &quot;lockTimeout&quot; : 5000,
    &quot;maxAttempts&quot; : 5
});

lock.on(&quot;acquired&quot;, function(lastAttempt) {
    if (Math.random() &lt;= SUCCESS_CHANCE) {
        console.log(&quot;Completed work successfully!&quot;, lastAttempt);
        lock.done(lastAttempt);
    } else {
        // oh no, we failed to do work!
        console.log(&quot;Failed to do work&quot;);
    }
});
lock.acquire();
</pre></p>
<p>There’s also a few other events you can use to track the lock status:</p>
<p><pre class="brush: jscript; gutter: false;">
lock.on(&quot;locked&quot;, function() {
    console.log(&quot;Did not acquire lock, someone beat us to it&quot;);
});

lock.on(&quot;error&quot;, function(error) {
    console.error(&quot;Error from lock: %j&quot;, error);
});

lock.on(&quot;status&quot;, function(message) {
    console.log(&quot;Status message from lock: %s&quot;, message);
});
</pre></p>
<h2>More Bonus!</h2>
<p>If you don&#8217;t need the added complexity if multiple backup processes, I also want to give credit to npm user <a href="https://npmjs.org/~pokehanai">pokehanai</a> who took the methodology described in the original post and created a generalized version of the two-worker solution: <a href="https://npmjs.org/package/redis-paired-worker">https://npmjs.org/package/redis-paired-worker</a>.</p>
<h2>Wrapping Up</h2>
<p>So there you have it! Coordinating work on any number of processes across any number of hosts couldn’t be easier! If you have any questions or comments on this, please feel free to follow up on <a href="http://twitter.com/heyjoshua">Twitter</a>.</p>
<div class="hiring-banner">
<p class="group-photo"><a title="Flickr flamily floto by morozgrafix, on Flickr" href="http://www.flickr.com/photos/morozgrafix/7803402076/"><img alt="Flickr flamily floto" src="http://farm9.staticflickr.com/8436/7803402076_c06f87bf1f_m.jpg" width="120" height="80" /></a></p>
<p>Like this post? Have a love of online photography? Want to work with us? Flickr is hiring <strong>engineers</strong>, <strong>designers</strong> and <strong>product managers</strong> in our San Francisco office. <strong>Find out more at <a href="http://www.flickr.com/jobs/">flickr.com/jobs</a></strong>.</p>
</div>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a>			</span>
															<span class="sep"> | </span>
							<span class="tag-links">
				<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="http://code.flickr.net/tag/javascript/" rel="tag">javascript</a>, <a href="http://code.flickr.net/tag/node-js/" rel="tag">node.js</a>, <a href="http://code.flickr.net/tag/redis/" rel="tag">redis</a>			</span>
						
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2350 -->

				
					
	<article id="post-2339" class="post-2339 post type-post status-publish format-standard hentry category-uncategorized">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/12/12/highly-available-real-time-notifications/" title="Permalink to Highly Available Real Time Push Notifications and&nbsp;You" rel="bookmark">Highly Available Real Time Push Notifications and&nbsp;You</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/12/12/highly-available-real-time-notifications/" title="6:00 am" rel="bookmark"><time class="entry-date" datetime="2012-12-12T06:00:24+00:00">December 12, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/joshuaflickr/" title="View all posts by Joshua Cohen" rel="author">Joshua Cohen</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>One of the goals of our recently launched (and awesome!) <a href="http://flickr.com/iphone">new Flickr iPhone app</a> was to further increase user engagement on Flickr. One of the best ways to drive engagement is to make sure Flickr users know what’s happening on Flickr in as near-real time as possible. We already have email notifications, but email is no longer a good mechanism for real-time updates. Users may have many email accounts and may not check in frequently causing timeliness to go right out the window. Clearly this called for&#8230; PUSH NOTIFICATIONS!</p>
<p class="flickr-photo"><a title="Motor bike racer getting a push start at the track, Brisbane from State Library of Queensland, Australia, on Flickr" href="http://www.flickr.com/photos/statelibraryqueensland/8219930340/"><img alt="Motor bike racer getting a push start at the track, Brisbane" src="http://farm9.staticflickr.com/8062/8219930340_2fce43a926_c.jpg" width="800" height="630" /></a><br />
<span class="caption"><a href="http://www.flickr.com/photos/statelibraryqueensland/8219930340/">Motor bike racer getting a push start at the track, Brisbane</a> by <a href="http://www.flickr.com/photos/statelibraryqueensland/">State Library of Queensland, Australia</a></span></p>
<p>I know, you’re thinking, &#8220;anyone can build push notifications, we’ve been doing it since 2009!&#8221; Which is, of course, absolutely true. The <a href="http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ApplePushService/ApplePushService.html">process for delivering push notifications</a> is well trod territory by this point. So&#8230; let’s just skip all that boring stuff and focus on how we decided on the underlying architecture for our implementation. Our decisions focused on four major factors:</p>
<ol>
<li>Impact to normal page serving times should be minimal</li>
<li>Delivery should be in near-real time</li>
<li>Handle thousands of notifications per second</li>
<li>The underlying services should be highly available</li>
</ol>
<h2>Baby Steps</h2>
<p>Given these goals, we started by looking at systems we already have in place. Everyone loves not writing new code, right? Our thoughts immediately went to Flickr’s existing <a href="http://code.flickr.net/2011/06/30/dont-be-so-pushy/">PuSH infrastructure</a>. Our PuSH implementation is a great way to get an overview of relevant activity on Flickr, but it has limitations that made it unsuitable for powering mobile push notifications. The primary concern is that it’s less-near-real time than we’d like it to be. On average, activities occurring on Flickr will be delivered to a subscribed PuSH endpoint within one minute. That’s certainly better than waiting for an email to arrive or waiting until the next time you log in to the site and see your activity feed, but it’s not good enough for mobile notifications! This delay is due to some design decisions at the core of the PuSH system. PuSH is designed to aggregate activity and deliver a periodic digest and, because of this, it has a built in window to allow multiple changes to the same photo to be accumulated. PuSH is also focused on ensured delivery, so it maintains an up to date list of all subscribers. These features, which make PuSH great for the purpose it was designed, make it not-so-great for real time notifications. So, repurposing the PuSH code for reuse in a more real time fashion proved to be untenable.</p>
<h2>Tentative Plans</h2>
<p>So, what to do? In the end we wound up building a new lightweight event system that is broken up into three phases:</p>
<ol>
<li>Event Generation</li>
<li>Event Targeting</li>
<li>Message Delivery</li>
</ol>
<h3>Event Generation</h3>
<p>The event generation phase happens while processing the response to a user request. As such, we wanted to ensure that there was little to no impact on the response times as a result. To ensure this was the case, all we do here is a lightweight write into a global <a href="http://redis.io/">Redis</a> queue. We store the minimum amount of data possible, just a few identifiers, so we don’t have to make any extra DB calls and slow down the response just to (potentially) kick off a push notification. Everything after this initial Redis action is processed out of band by our deferred task system and has no impact on site performance.</p>
<h3>Event Targeting</h3>
<p>Next in the process is the event targeting phase. Here we have many workers reading from the global Redis queue. When a worker receives an event from the queue it rehydrates the data and loads up any additional information necessary to act on the notification. This includes checking to see what users should be notified, whether those users have devices that are registered to receive notifications, if they’ve opted out of notifications of this type, and finally if they’ve muted activity for the object in question.</p>
<h3>Message Delivery</h3>
<p>Flickr’s web-serving stack is PHP, and, up until now, everything described has been processed by PHP. Unfortunately, one area where PHP does not excel is long-lived processes or network connections, both of which make delivering push notifications in real time much easier. Because of this we decided to build the final phase, message delivery, as a separate endpoint in <a href="http://nodejs.org./">Node.js</a>.</p>
<p>So, the question arose: how do we get messages pending delivery from these PHP workers over to the Node.js endpoints that will actually deliver them? For this, we again turned to Redis, this time using its built in <a href="http://redis.io/topics/pubsub">pub/sub</a> functionality. The PHP workers simply publish a message to a Redis channel with the assumption that there’s a Node.js process subscribed to that channel eagerly awaiting some data on which it can act.</p>
<p>After that the Node process delivers the notification to Apple’s APNS push notification system. Communicating with APNS is a well-documented topic, and not one that’s particularly interesting. In fact, I can sum it up with a single link: <a href="https://github.com/argon/node-apn">https://github.com/argon/node-apn</a>, a great npm package for talking to APNS.</p>
<h2>The Real Challenge</h2>
<p>There is, however, a much more interesting problem to discuss at this point: how do we ensure that delivery to APNS is both scalable and highly available? At first blush, this seems like it could be problematic. What if the Node.js worker has crashed? The message will just be lost to the ether! Solving this problem turned out to be the majority of the work involved in implementing push notifications.</p>
<h3>Scalability</h3>
<p>The first step to ensuring a service is scalable is to divide the workload. Since Node.js is single threaded, we would already be dividing the workload across individual Node.js processes anyway, so this works out well! When we publish messages to the Redis pub/sub channel, we simply publish to a sharded channel. Each Node.js process subscribes to some subset of those sharded channels, and so will only act on that subset of messages.</p>
<p class="flickr-photo"><img class="aligncenter" alt="APNS, Redis Pub/Sub" src="http://farm9.staticflickr.com/8224/8260965187_c5596e5b69_o.png" width="518" height="328" /></p>
<p>Configuring our Node.js processes in this way makes it easy to scale horizontally. Whenever we need to add more processing power to the cluster, we can just add more servers and more shards. This also makes it easy to pull hosts out of rotation for maintenance without impacting message delivery: we simply reconfigure the remaining processes to subscribe to additional channels to pick up the slack.</p>
<h3>Availability</h3>
<p>Designing for high availability proved to be somewhat more challenging. We needed to ensure that we could lose individual Node processes, a whole server or even an entire data center without degrading our ability to deliver messages. And we wanted to avoid the need for a human in the loop &#8212; automatic failover.</p>
<p>We already knew that we’d have multiple hosts running in multiple data centers, so the main question was how to get them coordinating with each other so that we would not lose messages in the event of an outage while also ensuring we would not deliver the same message multiple times. Our first thought experiment along these lines was to implement a relatively complex message passing scheme, where two hosts would subscribe to a given channel, one as the primary and one as the backup. The primary would pass a message to the backup saying that it was starting to process a message, and another when it completed. The backup would wait a certain amount of time to receive the first and then the second message from the primary. If a message failed to arrive, it would assume something had gone wrong with the primary and attempt to complete delivery to Apple’s push notification gateway.</p>
<p class="flickr-photo"><img class="aligncenter" alt="Initial Failover Plan" src="http://farm9.staticflickr.com/8083/8262034314_e1f5b85592_o.png" width="328" height="394" /></p>
<p>This plan had two major problems: hosts had to be aware of each other and increasing the number of hosts working in conjunction raised the complexity of ensuring reliable delivery.</p>
<p>We liked the idea of having one host serve as a backup for another, but we didn’t like having to coordinate the interaction between so many moving pieces. To solve this issue we went with a convention based approach. Instead of each host having to maintain a list of its partners, we just use Redis to maintain a global lock. Easy enough, right? Perhaps some code is in order!</p>
<h2>Finally, some code!</h2>
<p>First we create our Redis clients. We need one client for regular Redis commands we use to maintain the lock, and a separate client for Redis pub/sub commands.</p>
<p><pre class="brush: jscript; gutter: false;">
var redis = require(&quot;redis&quot;);
var client = redis.createClient(config.port, config.host);
var pubsubClient = redis.createClient(config.port, config.host);
</pre></p>
<p>Next, subscribe to the sharded channel and set up a message handler:</p>
<p><pre class="brush: jscript; gutter: false;">
// We could be subscribing to multiple shards, but for the sake of simplicity we’ll just subscribe to one here
pubsubClient.subscribe(&quot;notification_&quot; + shard);
pubsubClient.on(&quot;message&quot;, handleMessage);
</pre></p>
<p>Now, the interesting part. We have multiple Node.js processes subscribed to the same Redis pub/sub channel, and each process is in a different data center. Whenever any of them receive a message, they attempt to acquire a lock for that message:</p>
<p><pre class="brush: jscript; gutter: false;">
function handleMessage(channel, message) {
    // Error handling elided for brevity
    var payload = JSON.parse(message);

    acquireLock(payload, 1, lockCallback);
}
</pre></p>
<p>Managing locks with Redis is made easy using the <a href="http://redis.io/commands/setnx">SETNX</a> command. SETNX is a “set if not exists” primitive. From the Redis docs:</p>
<blockquote cite="http://en.wikisource.org/wiki/I_have_just_been_shot"><p>Set key to hold string value if key does not exist. In that case, it is equal to SET. When key already holds a value, no operation is performed.</p></blockquote>
<p>If we have multiple processes calling SETNX on the same key, the command will only succeed for the process that first makes the call, and in that case the response from Redis will be 1. For subsequent SETNX commands, the key will already exist, and the response from Redis will be 0. The value we try to set with SETNX keeps track of how many attempts have been made to deliver the message, initially set to one, this allows us to retry failed messages a predefined number of times before giving up entirely.</p>
<p><pre class="brush: jscript; gutter: false;">
function acquireLock(payload, attempt, callback) {
    var lockIdentifier = &quot;lock.&quot; + payload.identifier;

    function dataForCallback(acquired) {
        return {
            &quot;acquired&quot; : acquired,
            &quot;lockIdentifier&quot; : lockIdentifier,
            &quot;payload&quot; : payload,
            &quot;attempt&quot; : attempt
        };
    }

    // The value of the lock key indicates how many lock attempts have been made
    client.setnx(lockIdentifier, attempt, function(error, data) {
        if (error) {
            logger.error(&quot;Error trying to acquire redis lock for: %s&quot;, lockIdentifier);
            return callback(error, dataForCallback(false));
        }

        return callback(null, dataForCallback(data === 1));
    });
}
</pre></p>
<p>At this point our attempt to acquire the lock has either succeeded or failed, and our callback is invoked. What we do next depends on whether we managed to acquire the lock. If we did acquire the lock, we simply attempt to send the message. If we did not acquire the lock, then we will check back later to see if the message was sent successfully (more on this later):</p>
<p><pre class="brush: jscript; gutter: false;">
function lockCallback(error, data) {
    // Again, error handling elided for brevity
    if (data &amp;&amp; data.acquired) {
        return sendMessage(data.payload, data.lockIdentifier, data.attempt === MAX_ATTEMPTS);
    } else if (data &amp;&amp; !data.acquired) {
        return setTimeout(checkLock, LOCK_EXPIRY, data.payload, data.lockIdentifier);
    }
}
</pre></p>
<p>Finally, it’s time to actually send the message! We do some work to process the payload into a form we can use to pass to APNS and send it off. If all goes well, we do one of two things:</p>
<ol>
<li>If this was our first attempt to send the message, we update the lock key in Redis to a sentinel value indicating we were successful. This is the value the backup processes will check for to determine whether or not sending succeeded.</li>
<li>If this was our last attempt to send the message (i.e. the primary process failed to deliver and now a backup process is handling delivery), we simply delete the lock key.</li>
</ol>
<p><pre class="brush: jscript; gutter: false;">
function sendMessage(payload, lockIdentifier, lastAttempt) {
    // Does some work to process the payload and generate an APNS notification object
    var notification = generateApnsNotification(payload);

    if (notification) {
        // The APNS connection is defined/initialized elsewhere
        apnsConnection.sendNotification(notification);

        if (lastAttempt) {
            client.del(lockIdentifier);
        } else {
            client.set(lockIdentifier, DONE_VALUE);
        }
    }
}
</pre></p>
<p>There’s one final piece of the puzzle: checking the lock in the process that did not acquire it initially. Here we issue a Redis <a href="http://redis.io/commands/get">GET</a> to retrieve the current value of the lock key. If the process that won the lock managed to send the message, this key should be set to a well known sentinel value. If so, we don’t have any work to do, and we can simply delete the lock. However, if this value is not set to that sentinel value, then something went wrong with delivery in the process that originally acquired the lock and we should step up and try to deliver the message from this backup process:</p>
<p><pre class="brush: jscript; gutter: false;">
function checkLock(payload, lockIdentifier) {
    client.get(lockIdentifier, function(error, data) {
        // Error handling elided for brevity
        if (data !== DONE_VALUE) {
            acquireLock(payload, data + 1, lockCallback);
        } else {
            client.del(lockIdentifier);
        }
    });
}
</pre></p>
<h2>Summing Up</h2>
<p>So, there you have it in a nutshell. This method of coordinating between processes makes it very easy to adjust the number of processes subscribing to a given shard’s channels. There’s no need for any process subscribed to a channel to be aware of how many other processes are also subscribed. As long as we have at least two processes in separate data centers subscribing to each shard we are protected from all of the from the following scenarios:</p>
<ul>
<li>The crash of any individual Node.js process</li>
<li>The loss of a single host running the Node.js processes</li>
<li>The loss of an entire data center containing many hosts running the Node.js processes</li>
</ul>
<p>Let’s go back over our initial goals and see how we fared:</p>
<ol>
<li>Impact to normal page serving times should be minimal</li>
</ol>
<p>We accomplish this by minimizing the workload done as part of the normal browser-driven request/response processing. The deferred task system picks up from there, out of band.</p>
<ol start="2">
<li>Delivery should be in near-real time</li>
</ol>
<p>Processing stats from our implementation show that time from user actions leading to event generation to message delivery averages about 400ms and is completely event driven (no polling).</p>
<ol start="3">
<li>Handle thousands of notifications per second</li>
</ol>
<p>In stress tests of our system, we were able to process more than 2,000 notifications per second on a single host (8 Node.js workers, each subscribing to multiple shards).</p>
<ol start="4">
<li>The underlying services should be highly available</li>
</ol>
<p>The availability design is resilient to a variety of failure scenarios, and failover is automatic.</p>
<p>We hope you’re enjoying push notifications in the <a href="http://flickr.com/iphone">new Flickr iPhone app</a>.</p>
<h2>Addendum!</h2>
<p>There was a minor problem with the code in this post when supporting more than two workers. For a full explanation of the problem and the solution, check out <a href="http://code.flickr.net/2012/12/21/redis-global-locks-redux/">Global Redis Locks Redux</a>.</p>
<div class="hiring-banner">
<p class="group-photo"><a title="Flickr flamily floto by morozgrafix, on Flickr" href="http://www.flickr.com/photos/morozgrafix/7803402076/"><img alt="Flickr flamily floto" src="http://farm9.staticflickr.com/8436/7803402076_c06f87bf1f_m.jpg" width="120" height="80" /></a></p>
<p>Like this post? Have a love of online photography? Want to work with us? Flickr is hiring <strong>engineers</strong>, <strong>designers</strong> and <strong>product managers</strong> in our San Francisco office. <strong>Find out more at <a href="http://www.flickr.com/jobs/">flickr.com/jobs</a></strong>.</p>
</div>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a>			</span>
															
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2339 -->

				
					
	<article id="post-2324" class="post-2324 post type-post status-publish format-standard hentry category-uploadr">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/12/10/drag-n-drop/" title="Permalink to Avoiding Dragons: A Practical Guide to Drag&nbsp;’n’&nbsp;Drop" rel="bookmark">Avoiding Dragons: A Practical Guide to Drag&nbsp;’n’&nbsp;Drop</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/12/10/drag-n-drop/" title="9:48 pm" rel="bookmark"><time class="entry-date" datetime="2012-12-10T21:48:04+00:00">December 10, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/pdokas/" title="View all posts by Phil Dokas" rel="author">Phil Dokas</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>You, the enterprising programmer, know about <a href='/2012/06/01/parsing-exif-client-side-using-javascript-2/'>parsing EXIF from photos</a> in the browser and even how and why to power this <a href='/2012/06/06/web-workers-and-yui/'>parsing with web workers</a>. “Bat,” you ask yourself, “how do I get those photos into the browser in the first place?”</p>
<p>The oldest and most low-tech solution is the venerable <code>&lt;input type="file" name="foo"&gt;</code>. This plops the old standby file button on your page and <code>POST</code>s the file’s contents to your server upon form submission.</p>
<p>To address many of this simple control’s limitations <a href='/2008/04/22/making-a-better-flickr-web-uploadr-or-web-browsers-arent-good-at-uploading-files-by-themselves/'>we debuted a Flash-based file uploader</a> in 2008. This workhorse has been providing per-file upload statuses, batch file selection, and robust error handling for the last four years through Flash’s file system APIs.</p>
<p>These days we can thankfully <a href='/2012/04/25/raising-the-bar-on-web-uploads/'>do this work without plugins</a>. Not only can we use <code>XHR</code> to <code>POST</code> files and provide all the other fancy info we’ve long needed Flash for, but now we can pair this with something much better than an <code>&lt;input&gt;</code>: drag and drop. This allows people drag files directly into a browser window from the iPhotos, Lightrooms, and Windows Explorers of the world.</p>
<p>Let’s take a look at how this works.</p>
<h2>Foundations first</h2>
<p class="flickr-photo"><a href="http://www.flickr.com/photos/boston_public_library/2387493721/" title="Workmen laying the cornerstone, construction of the McKim Building by Boston Public Library, on Flickr"><img src="http://farm4.staticflickr.com/3024/2387493721_2a10e5f4b2_b.jpg" width="1024" height="760" alt="Workmen laying the cornerstone, construction of the McKim Building" /></a><span class="caption"><a href="http://www.flickr.com/photos/boston_public_library/2387493721/">Workmen laying the cornerstone, construction of the McKim Building</a> by <a href="http://www.flickr.com/photos/boston_public_library/">Boston Public Library</a></span></p>
<p>Let’s begin with our simple fallback, a – yes – <code>&lt;input type="file"&gt;</code>.</p>
<p><b>HTML</b>: <code>&lt;input type="file" multiple accept="image/*,video/*"&gt;</code><br />
<b>JS</b>: <code>Y.all('input[type=file]').on('change', handleBrowse);</code></p>
<p>Here we start with an <code>&lt;input&gt;</code> that accepts multiple files and knows it only accepts images and videos. Then, we bind an event handler to its change event. That handler can be very simple:</p>
<p><pre class="brush: jscript; gutter: false;">
function handleBrowse(e) {
	// get the raw event from YUI
	var rawEvt = e._event;
	
	// pass the files handler into the loadFiles function
	if (rawEvt.target &amp;&amp; rawEvt.target.files) {
		loadFiles(rawEvt.target.files);
	}
}
</pre></p>
<p>A simple matter of handing the event object’s file array off to our universal function that adds files to our upload queue. Let’s take a look at this file loader:</p>
<p><pre class="brush: jscript; gutter: false;">
function loadFiles(files) {
	updateQueueLength(count);
	
	for (var i = 0; i &lt; files.length; i++) {
		var file = files[i];
		
		if (File &amp;&amp; file instanceof File) {
			enqueueFileAddition(file);
		}
	}
}
</pre></p>
<p>Looks clear – it’s just going over the file list and adding them to a queue. “But wait,” you wonder, “why all this queue nonsense? Why not just kick off an <code>XHR</code> for the file right now?” Indeed, we’ve stuck in a layer of abstraction here that seems unnecessary. And for now it is. But suppose our pretty synchronous world were soon to become a whole lot less synchronous – that could get real fun in a hurry. For now, we’ll put that idea aside and take a look at these two queue functions themselves:</p>
<p><pre class="brush: jscript; gutter: false;">
function updateQueueLength(quantity) {
	state.files.total += quantity;
}

function enqueueFileAddition(file) {
	state.files.handles.push(file);
	
	// If all the files we expect have shown up, then flush the queue.
	if (state.files.handles.length === state.files.total) {
		for (var i = 0, len = state.files.total; i &lt; len; i++) {
			addFile(state.files.handles[i]);
		}
		
		// reset the state of the world
		state.files.handles = [];
		state.files.total = 0;
	}
}
</pre></p>
<p>Pretty straightforward. One function for leaving a note of how many files we expect, one function to add files and see if we have all the files we expect. If so, pass along everything we have to <code>addFile()</code> which sends the file into our whirlwind of <code>XHR</code>s heading off to <a href='/2009/03/03/panda-tuesday-the-history-of-the-panda-new-apis-explore-and-you/'>the great pandas in the sky</a>.</p>
<h2>Droppin’ dragons</h2>
<p class="flickr-photo"><a href="http://www.flickr.com/photos/dokas/8252092817/" title="Droppin’ dragons by Phil Dokas, on Flickr"><img src="http://farm9.staticflickr.com/8346/8252092817_3d298cd5d3_c.jpg" width="800" height="600" alt="Droppin’ dragons" /></a><span class="caption"><a href="http://www.flickr.com/photos/dokas/8252092817/">Droppin’ dragons</a> by <a href="http://www.flickr.com/photos/dokas/">Phil Dokas</a></span></p>
<p>While all of that is well and good, it was all for a ho-hum <code>&lt;input&gt;</code> element! Let’s hook a modern browser’s drag and drop events into this system:</p>
<p><pre class="brush: jscript; gutter: false;">
document.addEventListener('drop', function(e) {
	if (e.dataTransfer &amp;&amp; e.dataTransfer.files) {
		loadFiles(e.dataTransfer.files);
	}
});
</pre></p>
<p>The <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html'>drag and drop API</a> is a fairly complicated one, but it thankfully makes the task of reading files out of a drop event easy. Every drop will have a <code>dataTransfer</code> attribute and when there’s at least one file in the drag that member will itself have a <code>files</code> attribute.</p>
<p>In fact, when you’re only concerned about handling files dragged directly into the browser you could call it a day right here. The <code>loadFiles()</code> function we wrote earlier knows how to handle instances of the <code>File</code> class and that’s exactly what <code>dataTransfer.files</code> stores. Easy!</p>
<h2>Put it up to eleven</h2>
<p>While easy is a good thing, awesome is awesome. How could we make dragging files into a browser even better? Well, how about cutting down on the trouble of finding the folder with your photos somewhere on your desktop, opening it, and then dragging those files into the browser? What if we could just drag the folder in and call it a day?</p>
<p class="flickr-photo"><a href="http://www.flickr.com/photos/rkimpeljr/439400672/" title="goes to 11 by Rick Kimpel, on Flickr"><img src="http://farm1.staticflickr.com/158/439400672_5c51fae079_b.jpg" width="1024" height="683" alt="goes to 11" /></a><span class="caption"><a href="http://www.flickr.com/photos/rkimpeljr/439400672/">goes to 11</a> by <a href="http://www.flickr.com/photos/rkimpeljr/">Rick Kimpel</a></span></p>
<p>Try to drag a folder into the browser with the current state of our code; what happens? Our code tells the browser to treat all dropped file system objects as files. So what ultimately happens for folders is a very elaborate “nothing”. To fix this, we need to tell the browser how to handle directories. In our case, we want it to recursively walk every directory it sees and pick out the photos from each.</p>
<p>From here on out we’re going to be treading over tumultuous land, rife with rapidly changing specs and swiftly updating browsers. This becomes immediately apparent in how we begin to add support for directories. We need to update our drop event handler like this:</p>
<p><pre class="brush: jscript; gutter: false;">
document.addEventListener('drop', function(e) {
	if (e.dataTransfer &amp;&amp; e.dataTransfer.items) {
		loadFiles(e.dataTransfer.items);
	}
	else if (e.dataTransfer &amp;&amp; e.dataTransfer.files) {
		loadFiles(e.dataTransfer.files);
	}
});
</pre></p>
<p>Items? Files? The difference is purely a matter of one being the newer interface where development happens and the other being the legacy interface. This is <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#the-datatransfer-interface'>spelled out a bit in the spec</a>, but the short of it is that the <code>files</code> member will be kept around for backwards compatibility while newer abilities will be built in the <code>items</code> namespace. Our code above prefers to use the <code>items</code> attribute if available, while falling back to <code>files</code> for compatibility. The real fun is what comes next.</p>
<p>You see, the <code>items</code> namespace deals with <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#the-datatransferitem-interface'>Items</a>, not <a href='http://dev.w3.org/2006/webapi/FileAPI/#file'>Files</a>. Items can be thought of as pointers to things in the file system. Thankfully, that includes the directories we’re after. But unfortunately, this is the file system and the file system is slow. And JavaScript is single-threaded. These two facts together are a recipe for latency. The File System API tackles this problem with the same solution as Node.js: asynchronicity. Most of the functions in the API accept a callback that will be invoked when the disk gets around to providing the requested files. So we’ll have to update our code to do two new things: 1) translate items into files and 2) handle synchronous and asynchronous APIs.</p>
<p>So what do these changes look like? Let’s turn back to <code>loadFiles()</code> and teach it how to handle these new types of files. Taking a look at <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#the-datatransferitem-interface'>the spec for the Item class</a>, there appears to be a <code>getAsFile()</code> function and that sounds perfect.</p>
<p><pre class="brush: jscript; gutter: false;">
function loadFiles(files) {
	updateQueueLength(count);
	
	for (var i = 0; i &lt; files.length; i++) {
		var file = files[i];
		
		if (typeof file.getAsFile === 'function') {
			enqueueFileAddition(file.getAsFile());
		}
		else if (File &amp;&amp; file instanceof File) {
			enqueueFileAddition(file);
		}
	}
}
</pre></p>
<p>Easy – but, there’s a problem. The <code>getAsFile()</code> function is very literal. It assumes the Item points to a file. But directories aren’t files and that means this method won’t meet our needs. Fortunately, there is a solution and that’s through yet another data type, <a href='http://www.w3.org/TR/file-system-api/#the-entry-interface'>the Entry</a>. An Entry is much like a File, but it can also represent directories. As mentioned in <a href='http://wiki.whatwg.org/wiki/DragAndDropEntries'>this WHATWG wiki document</a>, there is a proposed method, <code>getAsEntry()</code>, in the Item interface that allows you to grab an Entry for its file system object. It’s browser prefixed for now, so let’s add that in as well.</p>
<p><pre class="brush: jscript; gutter: false;">
function loadFiles(files) {
	updateQueueLength(count);
	
	for (var i = 0; i &lt; files.length; i++) {
		var file = files[i];
		var entry;
		
		if (file.getAsEntry) {
			entry = file.getAsEntry();
		}
		else if (file.webkitGetAsEntry) {
			entry = file.webkitGetAsEntry();
		}
		else if (typeof file.getAsFile === 'function') {
			enqueueFileAddition(file.getAsFile());
		}
		else if (File &amp;&amp; file instanceof File) {
			enqueueFileAddition(file);
		}
	}
}
</pre></p>
<p>So what we have now is a way of handling native files and a way of turning Items into Entries. Now we need to figure out if the Entry is a file or a directory and then handle that appropriately.</p>
<p>What we’ll do is queue up any File objects we run across and skip the loop ahead to the next object. But if we have an Item and successfully turn it into an Entry then we’ll try to resolve this down to a file or a directory.</p>
<p><pre class="brush: jscript; gutter: false;">
function loadFiles(files) {
	updateQueueLength(count);
	
	for (var i = 0; i &lt; files.length; i++) {
		var file = files[i];
		var entry, reader;
		
		if (file.getAsEntry) {
			entry = file.getAsEntry();
		}
		else if (file.webkitGetAsEntry) {
			entry = file.webkitGetAsEntry();
		}
		else if (typeof file.getAsFile === 'function') {
			enqueueFileAddition(file.getAsFile());
			continue;
		}
		else if (File &amp;&amp; file instanceof File) {
			enqueueFileAddition(file);
			continue;
		}
		
		if (!entry) {
			updateQueueLength(-1);
		}
		else if (entry.isFile) {
			entry.file(function(file) {
				enqueueFileAddition(file);
			}, function(err) {
				console.warn(err);
			});
		}
		else if (entry.isDirectory) {
			reader = entry.createReader();
			
			reader.readEntries(function(entries) {
				loadFiles(entries);
				updateQueueLength(-1);
			}, function(err) {
				console.warn(err);
			});
		}
	}
}
</pre></p>
<p>The code is getting long, but we’re almost done. Let’s unpack this.</p>
<p>The first branch of our new Entry logic ensures that what was returned by <code>webkitGetAsEntry()</code>/<code>getAsEntry()</code> is something useful. When they error they return <code>null</code> and this will happen if an application provides data in the drop event that isn’t a file. To see this in action try dragging a few files in from Preview in Mac OS X – it’s odd behavior, but this adequately cleans it up.</p>
<p>Next we handle files. <a href='http://www.w3.org/TR/file-system-api/#the-entry-interface'>The Entry spec</a> provides the brilliantly simple <code>isFile</code> and <code>isDirectory</code> attributes. These guarantee whether you have a <a href='http://www.w3.org/TR/file-system-api/#the-fileentry-interface'>FileEntry</a> or a <a href='http://www.w3.org/TR/file-system-api/#the-directoryentry-interface'>DirectoryEntry</a> on your hands. These classes have useful – though as promised, asynchronous – methods and here we use FileEntry’s <code>file()</code> method and enqueue its returned file.</p>
<p>Finally, the unicorn we’re chasing – handling directories. This is a tad more complicated, but the idea is straightforward. We create a <a href='http://www.w3.org/TR/file-system-api/#the-directoryreader-interface'>DirectoryReader</a> which lets us read its contents through its <code>readEntries()</code> method which provides an array of Entries. And what do we do with these Entries? We recursively call our <code>loadFiles()</code> function with them! In this step we achieve recursively walking a branch of the file system and rooting out every available image. Finally, we decrement the count of expected files by 1 to indicate that this was a directory and it has now been suitably handled.</p>
<p>But there is one more thing.</p>
<p>In that final directory reading step we recursively called <code>loadFiles()</code> with an array of <em>Entries</em>. As of right now, this function only expects to handle Files and Items. Let’s patch up this oversight, add a final bit of error handling, and call it a day.</p>
<p><pre class="brush: jscript; gutter: false;">
function loadFiles(files) {
	updateQueueLength(count);
	
	for (var i = 0; i &lt; files.length; i++) {
		var file = files[i];
		var entry, reader;
		
		if (file.isFile || file.isDirectory) {
			entry = file;
		}
		else if (file.getAsEntry) {
			entry = file.getAsEntry();
		}
		else if (file.webkitGetAsEntry) {
			entry = file.webkitGetAsEntry();
		}
		else if (typeof file.getAsFile === 'function') {
			enqueueFileAddition(file.getAsFile());
			continue;
		}
		else if (File &amp;&amp; file instanceof File) {
			enqueueFileAddition(file);
			continue;
		}
		else {
			updateQueueLength(-1);
			continue;
		}
		
		if (!entry) {
			updateQueueLength(-1);
		}
		else if (entry.isFile) {
			entry.file(function(file) {
				enqueueFileAddition(file);
			}, function(err) {
				console.warn(err);
			});
		}
		else if (entry.isDirectory) {
			reader = entry.createReader();
			
			reader.readEntries(function(entries) {
				loadFiles(entries);
				updateQueueLength(-1);
			}, function(err) {
				console.warn(err);
			});
		}
	}
}
</pre></p>
<p>All we need to do to handle an Entry is to rely on the fact that Entries have those oh-so-helpful <code>isFile</code> and <code>isDirectory</code> attributes. If we see those we know we have an Entry of one type or another and we know how to work with them, so just skip on down to the FileEntry and DirectoryEntry handling code.</p>
<p>And that, finally, is it. There are many specs with very new data types at play here, but through this turmoil we can achieve some very nice results never before possible in browsers.</p>
<h3>Further reading</h3>
<ul>
<li><a href='http://www.html5rocks.com/en/tutorials/file/filesystem/'>Exploring the Filesystem APIs</a>, by Eric Bidelman, Google</li>
<li><a href='http://updates.html5rocks.com/2012/07/Drag-and-drop-a-folder-onto-Chrome-now-available'>Drag and Drop a Folder onto Chrome Now Available</a>, by Eiji Kitamura, Google</li>
<li><a href='http://www.google.com/url?q=http%3A%2F%2Fwww.whatwg.org%2Fspecs%2Fweb-apps%2Fcurrent-work%2Fmultipage%2Fdnd.html&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNHqKBNtqsbeETblNeT9FmctdY0MXw'>WHATWG’s HTML Drag and Drop spec</a></li>
<li><a href='http://www.w3.org/TR/FileAPI/'>W3C’s File API spec</a></li>
<li><a href='http://www.w3.org/TR/file-system-api/'>W3C’s File API: Directories and System spec</a></li>
</ul>
<div class="hiring-banner">
<p class="group-photo"><a href="http://www.flickr.com/photos/morozgrafix/7803402076/" title="Flickr flamily floto by morozgrafix, on Flickr"><img src="http://farm9.staticflickr.com/8436/7803402076_c06f87bf1f_m.jpg" width="120" height="80" alt="Flickr flamily floto"></a></p>
<p>Like this post? Have a love of online photography? Want to work with us? Flickr is hiring <strong>engineers</strong>, <strong>designers</strong> and <strong>product managers</strong> in our San Francisco office. <strong>Find out more at <a href="http://www.flickr.com/jobs/">flickr.com/jobs</a></strong>.</p>
</div>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/uploadr/" title="View all posts in uploadr" rel="category tag">uploadr</a>			</span>
															
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2324 -->

				
					
	<article id="post-2290" class="post-2290 post type-post status-publish format-standard hentry category-event">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/10/26/flickr-at-sf-web-performance/" title="Permalink to Flickr at SF Web&nbsp;Performance" rel="bookmark">Flickr at SF Web&nbsp;Performance</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/10/26/flickr-at-sf-web-performance/" title="5:59 pm" rel="bookmark"><time class="entry-date" datetime="2012-10-26T17:59:37+00:00">October 26, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/rharmes/" title="View all posts by Ross Harmes" rel="author">Ross Harmes</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p class="flickr-photo">
<a href="http://www.flickr.com/photos/schill/8124204694/" title="Wait! Did you say they all run Webkit? by Schill, on Flickr"><img src="https://farm9.staticflickr.com/8188/8124204694_238968c134_c.jpg" width="800" height="534" alt="Wait! Did you say they all run Webkit?"></a><br />
<span class="caption"><a href="http://www.flickr.com/photos/schill/8124204694/">Wait! Did you say they all run Webkit?</a> by <a href="http://www.flickr.com/photos/schill/">Schill</a></span>
</p>
<p>Thanks to everyone that came out to the <a href="http://www.meetup.com/SF-Web-Performance-Group/events/76198912/">SF Web Performance meet up</a> last night! For those of you that missed it, JP and Aaron were kind enough to record the <a href="http://www.ustream.tv/recorded/26434123">entire event on Ustream</a>.</p>
<p>You can also view the slides and associated blog posts for each of the presentations:</p>
<ul>
<li><b>Optimizing Touch Performance</b>, by Stephen Woods: <a href="https://speakerdeck.com/ysaw/creating-responsive-html5-touch-interfaces">slides</a> and <a href="/2011/07/20/lessons-learned-from-the-flickr-touch-lightbox/">blog post</a></li>
<li><b>Using Web Workers for fun and profit: Parsing Exif in the client</b>, by Chris Berry: <a href="https://speakerdeck.com/christopher_b/processing-exif-in-the-client-with-javascript-web-workers">slides</a> and <a href="/2012/06/01/parsing-exif-client-side-using-javascript-2/">blog post</a></li>
<li><b>The Grid: How we show 10,000 photos on a page without crashing your browser</b>, by Scott Schiller: <a href="http://isflashdeadyet.com/talks/html5/flickr_grid_sf_webperformance_10-25-2012/">slides</a> and <a href="/2012/05/11/building-the-flickr-web-uploadr-the-grid/">blog post</a></li>
</ul>
<p>Big thanks to <a href="https://twitter.com/jphpsf">JP</a> and <a href="https://twitter.com/gofastweb">Aaron</a> for setting it up and running the event so well!</p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/event/" title="View all posts in event" rel="category tag">event</a>			</span>
															
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2290 -->

				
					
	<article id="post-2282" class="post-2282 post type-post status-publish format-standard hentry category-event tag-event">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/10/25/join-the-flickr-frontend-team-tonight-at-the-sf-web-performance-meet-up/" title="Permalink to Join the Flickr Frontend team tonight at the SF Web Performance meet&nbsp;up!" rel="bookmark">Join the Flickr Frontend team tonight at the SF Web Performance meet&nbsp;up!</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/10/25/join-the-flickr-frontend-team-tonight-at-the-sf-web-performance-meet-up/" title="7:55 pm" rel="bookmark"><time class="entry-date" datetime="2012-10-25T19:55:58+00:00">October 25, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/rharmes/" title="View all posts by Ross Harmes" rel="author">Ross Harmes</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p class="flickr-photo">
<a href="http://www.flickr.com/photos/wafer/8121133637/" title="Team Tinfoil by waferbaby, on Flickr"><img src="http://farm9.staticflickr.com/8326/8121133637_6d5c8c2f3f_c.jpg" width="800" height="531" alt="Team Tinfoil" border="0" /></a><br />
<span class="caption"><a href="http://www.flickr.com/photos/wafer/8121133637/">Team Tinfoil</a> by <a href="http://www.flickr.com/photos/wafer/">waferbaby</a></span>
</p>
<p>We will be hosting the <a href="http://www.meetup.com/SF-Web-Performance-Group/events/76198912/">SF Web Performance meet up</a> tonight at 7pm at <a href="http://citizenspace.us/">Citizen Space</a>. Come join us for pizza, drinks, and these great talks:</p>
<h3>Using Web Workers for fun and profit: Parsing Exif in the client, by Chris Berry</h3>
<p>Exif, exchangeable image file format, describes various sets of metadata stored in a photo. Really interesting metadata, like image titles, descriptions, lens focal lengths, camera types, image orientation, even GPS data! I&#8217;ll go over the methods to extracting this data on the front-end, in real-time, using web workers.</p>
<h3>The Grid: How we show 10,000 photos on a page without crashing your browser, by Scott Schiller</h3>
<p>Flickr&#8217;s latest Web-based Uploadr interface uses HTML5 APIs to push bytes en masse. Its real power, however, is the UI which enables users to add and edit the metadata of hundreds of photos while they are uploading in the background.</p>
<p>
Handling the selection, display and management of large numbers of photos in a browser UI meant that the Uploadr project needed to be designed for scalability from the ground up.
</p>
<p>
This talk will go into some of the details of the Uploadr &#8220;Grid&#8221; UI, technical notes and performance findings made during its development.</p>
<h3>Optimizing Touch Performance, by Stephen Woods</h3>
<p>Touch interfaces are amazing. Touch devices are amazingly slow.  Stephen Woods will share hard-won advice for building responsive touch-based interfaces using HTML5, CSS, and JavaScript. He also reveals how Star Trek: The Next Generation predicted the need for instant user feedback in a touch-based UI and how Tivos slow UI was made bearable by a simple &#8220;bloop&#8221; sound.</p>
<p>See you there!</p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/event/" title="View all posts in event" rel="category tag">event</a>			</span>
															<span class="sep"> | </span>
							<span class="tag-links">
				<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="http://code.flickr.net/tag/event/" rel="tag">event</a>			</span>
						
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2282 -->

				
					
	<article id="post-2273" class="post-2273 post type-post status-publish format-standard hentry category-geo tag-geo tag-shapefile">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/10/24/2273/" title="Permalink to We saved you a&nbsp;step…" rel="bookmark">We saved you a&nbsp;step…</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/10/24/2273/" title="5:41 pm" rel="bookmark"><time class="entry-date" datetime="2012-10-24T17:41:45+00:00">October 24, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/standardpixel/" title="View all posts by Eric Gelinas" rel="author">Eric Gelinas</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>It seems when we launched <a href="http://code.flickr.com/blog/2011/01/08/flickr-shapefiles-public-dataset-2-0/">version 2.0</a> of our <a href="http://code.flickr.com/blog/2008/10/30/the-shape-of-alpha/">Flickr shapes</a>, we posted them with a flaw which made them useless to most popular geo applications.</p>
<p>Awwwww&#8230;</p>
<p>Luckily, <a href="http://twitter.com/cmanning88">Christopher Manning</a> wrote a <a href="http://www.christophermanning.org/writing/make-flickr-shapes-json-parsable/">python script</a> which makes them useful.</p>
<p>Yaaaayyyyy!</p>
<p>The least we can do is post an update which has already been christopher-manning-ified, So, we are very happy to announce version 2.0.1 of the Flickr shape files which can be downloaded here:<br />
<a href="http://www.flickr.com/services/shapefiles/2.0.1/">http://www.flickr.com/services/shapefiles/2.0.1/</a></p>
<p>Look, it works:</p>
<p class="figure">
<img src="http://farm9.staticflickr.com/8196/8075284257_ef27d63253_c.jpg" width="800" height="506"><br />
<span class="caption">Flickr Shapes 2.0.1 in TileMill</span>
</p>
<p>A very hearty THANKS! from your friends at Flickr, Christopher.</p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/geo/" title="View all posts in geo" rel="category tag">geo</a>			</span>
															<span class="sep"> | </span>
							<span class="tag-links">
				<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="http://code.flickr.net/tag/geo/" rel="tag">geo</a>, <a href="http://code.flickr.net/tag/shapefile/" rel="tag">shapefile</a>			</span>
						
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2273 -->

				
					
	<article id="post-2070" class="post-2070 post type-post status-publish format-standard hentry category-uncategorized tag-maps">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/07/11/designing-an-osm-map-style/" title="Permalink to Designing an OSM Map&nbsp;Style" rel="bookmark">Designing an OSM Map&nbsp;Style</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/07/11/designing-an-osm-map-style/" title="9:35 pm" rel="bookmark"><time class="entry-date" datetime="2012-07-11T21:35:08+00:00">July 11, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/rharmes/" title="View all posts by Ross Harmes" rel="author">Ross Harmes</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>With the recent <a href="/blog/2012/06/29/the-great-map-update-of-2012/">change to our map system</a>, we introduced a new map style for our <a href="http://www.openstreetmap.org/">OSM</a> tiles. Since 2008, we’ve used the default OSM styles, which produces map tiles like this:</p>
<p class="undersized-image-container">
    <img src="http://farm9.staticflickr.com/8159/7537002708_6db9e51663_o.png" width="526" height="396" alt="">
</p>
<p>This style is extremely good at putting a lot of information in front of you. OSM doesn’t know your intended purpose for the maps (navigation, orientation, exploration, city planning, disaster response, etc.), so they err on the side of lots of information. This is good, but with the introduction of <a href="http://mapbox.com/tilemill/">TileMill</a>, non-professional cartographers (like myself) can now easily change map styles to better suit our needs. Using TileMill, we decided to take a crack at designing a map that is better suited to Flickr.</p>
<p>On Flickr, we use maps for a very specific purpose: to provide context for a photo. This means there are a lot of map features that we can leave out entirely. We can choose to hide features that are primarily used for navigation (ferry and train routes, bus stops) or for demarcation (city and county boundaries). Roads are useful as orientation tools, but certain road features (like exit numbers on highways) aren’t needed. In the end, we can reduce the data that the map shows to much smaller and more useful subset:</p>
<p class="undersized-image-container">
    <img src="http://farm9.staticflickr.com/8281/7537002620_9ee5d84281_o.png" width="526" height="396" alt="">
</p>
<p>This is the style provided by MapBox’s excellent <a href="https://github.com/mapbox/osm-bright">OSM Bright</a>. As a starting point, this gets us a long way towards our goal of an unobtrusive yet still useful map. We made a few changes to OSM Bright and released them on GitHub as our <a href="https://github.com/flickr/Pandonia">Pandonia</a> map style. Here are a few examples of the changes we made:</p>
<ul>
<li>Toned down the road, land, and water colors, to allow greater contrast with the pink and blue dots that we use as markers</li>
<li>Reduced the density of road and highway names, as well as city, town and state names</li>
<li>Removed underground tram and rail line</li>
<li>Removed land use overlays for residential, commercial, and industrial zones, as well as parking lots</li>
<li>Removed state park overlays that overlapped the water</li>
</ul>
<p>This is how it looks:</p>
<p class="undersized-image-container">
    <img src="http://farm9.staticflickr.com/8002/7537002542_5cb7151bc0_o.png" width="526" height="396" alt="">
</p>
<p>We tried a lot of different color combinations on the road to this style. Here is an animation of the different styles we tried, starting with OSM Bright.</p>
<p class="undersized-image-container">
    <img src="http://farm8.staticflickr.com/7116/7537992486_d3b6c66d83_o.gif" width="500" height="471" alt="" style="margin-left:13px;">
</p>
<p>Here it is zoomed in a bit more:</p>
<p class="undersized-image-container">
    <img src="http://farm9.staticflickr.com/8167/7537992394_3db2018af5_o.gif" width="500" height="721" alt="" style="margin-left:13px;">
</p>
<p>Over the next couple of weeks, we’ll be rolling out this style to all of the places where we use OSM tiles.</p>
<p>These maps are still a work in progress. The world is a big place, and creating a unified style that works well for every single location is challenging. If you notice problems with our new map styles, <a href="http://www.flickr.com/help/forum/en-us/72157630333262094/">please let us know</a>!</p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a>			</span>
															<span class="sep"> | </span>
							<span class="tag-links">
				<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="http://code.flickr.net/tag/maps/" rel="tag">maps</a>			</span>
						
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2070 -->

				
					
	<article id="post-2029" class="post-2029 post type-post status-publish format-standard hentry category-uncategorized tag-cloudmade tag-geo tag-geotagging tag-leaflet tag-mapbox tag-maps tag-openstreetmaps tag-osm tag-pandonia">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/06/29/the-great-map-update-of-2012/" title="Permalink to The great map update of&nbsp;2012" rel="bookmark">The great map update of&nbsp;2012</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/06/29/the-great-map-update-of-2012/" title="12:11 am" rel="bookmark"><time class="entry-date" datetime="2012-06-29T00:11:35+00:00">June 29, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/standardpixel/" title="View all posts by Eric Gelinas" rel="author">Eric Gelinas</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>Today we are announcing an update to the map tiles which we use site wide. A very high majority of the globe will be represented by Nokia’s clever looking tiles. </p>
<p class="undersized-image-container">
    <img src="http://farm8.staticflickr.com/7257/7463259956_c87ec24638_o.png" alt="Nokia map tile" />
</p>
<p>We are not stopping there. As some of you may know, Flickr has been using Open Street Maps (OSM) data to make map tiles for some places. <a href="http://blog.flickr.net/en/2008/08/12/around-the-world-and-back-again/">We started with Beijing</a> and the list has grown to twenty one additional places:</p>
<table border="0">
<tr>
<td style="padding:20px;vertical-align:top;">
Mogadishu<br />
Cairo<br />
Algiers<br />
Kiev<br />
Tokyo<br />
Tehran
</td>
<td style="padding:20px;vertical-align:top;">
Hanoi<br />
Ho Chi Minh City<br />
Manila<br />
Davao<br />
Cebu<br />
Baghdad
</td>
<td style="padding:20px;vertical-align:top;">
Kabul<br />
Accra<br />
Hispaniola<br />
Havana<br />
Kinshasa<br />
Harare
</td>
<td style="padding:20px;vertical-align:top;">
Nairobi<br />
Buenos aires<br />
Santiago
</td>
</tr>
</table>
<p>It has been a while since <a href="http://code.flickr.com/blog/2009/07/22/horseyes/">we last updated</a> our OSM tiles. Since 2009, the OSM community has advanced quite a bit in the tools they provide and data quality. I went into a little detail about this in a <a href="http://www.yuiblog.com/blog/2012/02/22/video-eric-gelinas-geo/">talk I gave last year</a>. </p>
<h2>Introducing Pandonia</h2>
<p class="undersized-image-container">
    <img src="http://farm9.staticflickr.com/8154/7463259904_09a82a7ddf_o.png" alt="Nokia map tile" />
</p>
<p>Today we are launching <a href="http://www.flickr.com/map?&amp;fLat=-34.5652&amp;fLon=-58.4694&amp;zl=12">Buenos Aires</a> and <a href="http://www.flickr.com/map?&amp;fLat=-33.463&amp;fLon=-70.648&amp;zl=12">Santiago</a> in a new style. We will be launching more cities in this new style in the near future. They are built from more recent OSM data and they will also have an entirely new style which we call <a href="https://github.com/flickr/Pandonia">Pandonia</a>. Our new style was designed in <a href="http://mapbox.com/tilemill/">TileMill</a> from the <a href="https://github.com/mapbox/osm-bright">osm-bright</a> template, both created by the rad team at MapBox. TileMill changes the game when it comes to styling map tiles. The interface is developed to let you quickly iterate style changes to tiles and see the changes immediately. <a href="http://www.flickr.com/photos/rossharmes/">Ross Harmes</a> will be writing a more detailed account of the work he did to create the Pandonia style. We appreciate the tips and guidance from Eric Gunderson, Tom MacWright, and the rest of the team at MapBox</p>
<p>We are looking forward to updating all of our OSM places with the Pandonia style in the near future and growing to more places after that&#8230; Antarctica? Null Island? The Moon? Stay tuned and see&#8230;</p>
<h2>Changing our Javascript API</h2>
<p>To host all of these new tiles we needed to find a flexible javascript api. <a href="http://leaflet.cloudmade.com">Cloudmade’s Leaflet</a> is a simple and open source tile serving javascript library. The events and methods map well to our previous JS API, which made upgrading simple for us. All of our existing map interfaces will stay the same with the addition of modern map tiles. They will also support touch screen devices better than ever. Leaflet’s layers mechanism will make it easier for us to blend different tile sources together seamlessly. We have a <a href="https://github.com/flickr/Leaflet">fork on GitHub</a> which we plan to contribute to as time goes on. We’ll keep you posted.</p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a>			</span>
															<span class="sep"> | </span>
							<span class="tag-links">
				<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="http://code.flickr.net/tag/cloudmade/" rel="tag">cloudmade</a>, <a href="http://code.flickr.net/tag/geo/" rel="tag">geo</a>, <a href="http://code.flickr.net/tag/geotagging/" rel="tag">geotagging</a>, <a href="http://code.flickr.net/tag/leaflet/" rel="tag">leaflet</a>, <a href="http://code.flickr.net/tag/mapbox/" rel="tag">mapbox</a>, <a href="http://code.flickr.net/tag/maps/" rel="tag">maps</a>, <a href="http://code.flickr.net/tag/openstreetmaps/" rel="tag">openstreetmaps</a>, <a href="http://code.flickr.net/tag/osm/" rel="tag">osm</a>, <a href="http://code.flickr.net/tag/pandonia/" rel="tag">pandonia</a>			</span>
						
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-2029 -->

				
					
	<article id="post-1981" class="post-1981 post type-post status-publish format-standard hentry category-uploadr tag-javascript tag-web-workers tag-yui">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/06/06/web-workers-and-yui/" title="Permalink to Web workers and&nbsp;YUI" rel="bookmark">Web workers and&nbsp;YUI</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/06/06/web-workers-and-yui/" title="8:43 pm" rel="bookmark"><time class="entry-date" datetime="2012-06-06T20:43:12+00:00">June 6, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/hartsell/" title="View all posts by Trevor Hartsell" rel="author">Trevor Hartsell</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p><i>(Flickr is hiring! Check out our <a href="http://www.flickr.com/jobs/">open job postings</a> and <a href="http://www.flickr.com/jobs/">what it&#8217;s like to work at Flickr</a>.)</i></p>
<p>Web workers are awesome. They’ll change the way you think about JavaScript.</p>
<p class="undersized-image-container"><a href="http://www.flickr.com/photos/sdasmarchives/5018997088/"><img src="http://farm5.staticflickr.com/4110/5018997088_1ab8dfe5de_z.jpg" width="575" height="433" alt="Factory Scenes : Consolidated/Convair Aircraft Factory San Diego" border="0" /></a></p>
<p>Chris posted an excellent writeup on how we do <a href="http://code.flickr.com/blog/2012/06/01/parsing-exif-client-side-using-javascript-2/">client-side Exif parsing</a> in the new Uploader, which is how we can display thumbnails before uploading your photos to the Flickr servers. But parsing metadata from hundreds of files can be a little expensive.</p>
<p>In the old days, we’d attempt to divide our expensive JS into smaller parts, using <code>setTimeout</code> to yield to the UI thread, crossing our fingers, and hoping that the user could still scroll and click when they wanted to. If that didn’t work, then the feature was simply too fancy for the web.</p>
<p>Since then, a lot has happened. People started using better browsers. HTML got an orange logo. <a href="http://www.w3.org/TR/workers/">Web workers</a> were discovered.</p>
<p>So now we can run JavaScript in separate threads (“parallel execution environments”), without interrupting the standard UI stuff the browser is always working on. We just need to put our job code in a separate file, and instantiate a web worker.</p>
<h3>Without YUI</h3>
<p>For simple, one-off tasks, you can just write some JavaScript in a new file and upload it to your server. Then create a worker like this:</p>
<p><pre class="brush: jscript; gutter: false;">
var worker = new Worker('my_file.js');

worker.addEventListener('message', function (e) {
	// do something with the message from the worker
});

// pass some data into the worker
worker.postMessage({
	foo: bar
});
</pre></p>
<p>Of course, the worker thread won’t have access to anything in the main thread. You can post messages containing anything that’s JSON compatible, but not functions, cyclical references, or special objects like <code>File</code> references.</p>
<p>That means any modules or helper functions you’ve defined in your main thread are out of bounds, unless you’ve also included them in your worker file. That can be a drag if you’re accustomed to working in a framework.</p>
<h3>With YUI</h3>
<p>Practically speaking, a worker thread isn’t very different from the main thread. Workers can’t access the DOM, and they have a top-level <code>self</code> object instead of <code>window</code>. But plenty of our existing JavaScript modules and helper functions would be very useful in a worker thread.</p>
<p>Flickr is built on YUI. Its modular architecture is powerful and encourages clean, reusable code. We have a ton of small JS files—one per module—and the YUI Loader figures out how to put them all together into a single URL.</p>
<p>If we want to write our worker code like we write our normal code, our worker file can’t be just <code>my_file.js</code>. It needs to be a full combo URL, with YUI running inside it.</p>
<div class="aside">
<h3>An aside for the brogrammers who have never seen modular JS in practice</h3>
<p><i><a href="http://yuilibrary.com/yui/docs/yui/loader.html">Loader dynamically loads script and css files for YUI modules as well as external modules. It includes the dependency information for the version of the library in use, and will automatically pull in dependencies for the modules requested.</a></i></p>
<p>In development, we have one JS file per module. Let&#8217;s say <code>photo.js</code>, <code>kitten.js</code>, and <code>puppy.js</code>.</p>
<p>A page full of kitten photos might require two of those modules. So we tell YUI that we want to use <code>photo.js</code> and <code>kitten.js</code>, and the YUI Loader appends a script node with a combo URL that looks something like this:</p>
<p><code>&lt;script src="/combo.php?photo.js&amp;kitten.js"&gt;</code>.</p>
<p>On our server, <code>combo.php</code> finds the two files on disk and prints out the contents, which are immediately executed inside the script node.</p>
</div>
<h3>C-c-c-combo</h3>
<p>Of course, the main thread is already running YUI, which we can use to generate the combo URL required to create a worker.</p>
<p>That URL needs to return the following:</p>
<ol>
<li><code>YUI.add()</code> statements for any required modules. (Don’t forget yui-base)</li>
<li><code>YUI.add()</code> statement for the primary module with the expensive code.</li>
<li><code>YUI.add()</code> statement to execute the primary module.</li>
</ol>
<p>Ok, so how do we generate this combo URL? Like so:</p>
<p><pre class="brush: jscript; gutter: false;">
//
// Make a reference to our original YUI configuration object,
// with all of our module definitions and combo handler options.
//
// To make sure it's as clean as possible, we use a clone of the
// object from before we passed it into YUI.
//

var yconf = window.yconf; // global for demo purposes

//
// Y.Loader.resolve can be used to generate a combo URL with all
// the YUI modules needed within the web worker. (YUI 3.5 or later)
//
// The YUI Loader will bypass any required modules that have
// already been loaded in this instance, so in addition to the
// clean configuration object, we use a new YUI instance.
//

var Y2 = YUI(Y.merge(yconf));

var loader = new Y2.Loader({
	// comboBase must be on the same domain as the main thread
	comboBase: '/local/combo/path/',
	combine: true,
	ignoreRegistered: true,
	maxURLLength: 2048,
	require: ['my_worker_module']
});

var out = loader.resolve(true);

var combo_url = out.js[0];
</pre></p>
<p>Then, also in the main thread, we can start the worker instance:</p>
<p><pre class="brush: jscript; gutter: false;">//
// Use the combo URL to create a web worker.
// This is when the combo URL is downloaded, parsed, 
// and executed.
//

var worker = new window.Worker(combo_url);
</pre></p>
<p>To start using YUI, we need to pass our YUI config object into the worker thread. That could have been part of the combo URL, but our YUI config is pretty specific to the particular page you’re on, so we need to reuse the same object we started with in the main thread. So we use <code>postMessage</code> to pass it from the main thread to the worker:</p>
<p><pre class="brush: jscript; gutter: false;">//
// Post the YUI config into the worker.
// This is when the worker actually starts its work.
//

worker.postMessage({
	yconf: yconf
});
</pre></p>
<p>Now we’re almost done. We just need to write the worker code that waits for our YUI config before using the module. So, at the bottom of the combo response, in the worker thread:</p>
<p><pre class="brush: jscript; gutter: false;">
self.addEventListener('message', function (e) {

	if (e.data.yconf) {

		//
		// make sure bootstrapping is disabled
		//
		
		e.data.yconf.bootstrap = false;

		//
		// instantiate YUI and use it to execute the callback
		//
		
		YUI(e.data.yconf).use('my_worker_module', function (Y) {

			// do some hard work!

		});

	}

}, false);
</pre></p>
<p>Yeah, I know the back-and-forth between the main thread and the worker makes that look complicated. But it’s actually just a few steps:</p>
<ol>
<li>Main thread generates a combo URL and instantiates a Web Worker.</li>
<li>Worker thread parses and executes the JS returned by that URL.</li>
<li>Main thread posts the page’s YUI config into the worker thread.</li>
<li>Worker thread uses the config to instantiate YUI and “use” the worker module.</li>
</ol>
<p>That&#8217;s it. Now get to work!</p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/uploadr/" title="View all posts in uploadr" rel="category tag">uploadr</a>			</span>
															<span class="sep"> | </span>
							<span class="tag-links">
				<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> <a href="http://code.flickr.net/tag/javascript/" rel="tag">javascript</a>, <a href="http://code.flickr.net/tag/web-workers/" rel="tag">web workers</a>, <a href="http://code.flickr.net/tag/yui/" rel="tag">yui</a>			</span>
						
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-1981 -->

				
					
	<article id="post-1951" class="post-1951 post type-post status-publish format-standard hentry category-uploadr">
		<header class="entry-header">
						<h1 class="entry-title"><a href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/" title="Permalink to Parsing Exif client-side using&nbsp;JavaScript" rel="bookmark">Parsing Exif client-side using&nbsp;JavaScript</a></h1>
			
						<div class="entry-meta">
				<span class="sep">Posted on </span><a href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/" title="6:48 pm" rel="bookmark"><time class="entry-date" datetime="2012-06-01T18:48:57+00:00">June 1, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/mustardpizza/" title="View all posts by cberry" rel="author">cberry</a></span></span>			</div><!-- .entry-meta -->
			
					</header><!-- .entry-header -->

				<div class="entry-content">
			<h3>What is Exif? A short primer.</h3>
<p>Exif is short for Exchangeable image file format. A standard that specifies the formats to be used in images, sounds, and tags used by digital still cameras. In this case we are concerned with the tags standard and how it is used in still images.</p>
<h3>How Flickr currently parses Exif data.</h3>
<p>Currently we parse an image’s Exif data after it is uploaded to the Flickr servers and then expose that data on the photo’s metadata page (<a href="http://www.flickr.com/photos/rubixdead/7192796744/meta/in/photostream">http://www.flickr.com/photos/rubixdead/7192796744/meta/in/photostream</a>). This page will show you all the data recorded from your camera when a photo was taken, the camera type, lens, aperture, exposure settings, etc. We currently use ExifTool (<a href="http://www.sno.phy.queensu.ca/~phil/exiftool/">http://www.sno.phy.queensu.ca/~phil/exiftool/</a>) to parse all of this data, which is a robust, albeit server side only, solution.</p>
<h3>An opportunity to parse Exif data on the client-side</h3>
<p>Sometime in the beginning phases of spec’ing out the Uploadr project we realized modern browsers can read an image’s data directly from the disk, using the FileReader API (<a href="http://www.w3.org/TR/FileAPI/#FileReader-interface">http://www.w3.org/TR/FileAPI/#FileReader-interface</a>). This lead to the realization that we could parse Exif data while the photo is being uploaded, then expose this to the user while they are editing their photos in the Uploadr before they even hit the Upload button.</p>
<h3>Why client-side Exif?</h3>
<p>Why would we need to parse Exif on the client-side, if we are parsing it already on the server-side? Parsing Exif on the client-side is both fast and efficient. It allows us to show the user a thumbnail without putting the entire image in the DOM, which uses a lot of memory and kills performance. Users can also add titles, descriptions, and tags in a third-party image editing program saving the metadata into the photo’s Exif. When they drag those photos into the Uploadr, BOOM, we show them the data they have already entered and organized, eliminating the need to enter it twice.</p>
<h3>Using Web Workers</h3>
<p>We started doing some testing and research around parsing Exif data by reading a file’s bytes in JavaScript. We found a few people had accomplished this already, it’s not a difficult feat, but a messy one. We then quickly realized that making a user’s browser run through 10 megabytes of data can be a heavy operation. Web workers allow us to offload the parsing of byte data into a separate cpu thread. Therefore freeing up the user’s browser, so they can continue using Uploadr while Exif is being parsed.</p>
<h3>Exif Processing Flow</h3>
<p>Once we had a web worker prototype setup, we next had to write to code that would parse the actual bytes.</p>
<p>The first thing we do is pre-fetch the JavaScript used in the web worker thread. Then when a user adds an image to the Uploadr we create event handlers for the worker. When a web worker calls postMessage() we capture that, check for Exif data and then display it on the page. Any additional processing is also done at this time. Parsing XMP data, for example, is done outside of the worker because the DOM isn’t available in worker threads.</p>
<p>Using Blob.slice() we pull out the first 128kb of the image to limit load on the worker and speed things up. The Exif specification states that all of the data should exist in the first 64kb, but IPTC sometimes goes beyond that, especially when formatted as XMP.</p>
<p><pre class="brush: jscript; gutter: false;">
if (file.slice) {
	filePart = file.slice(0, 131072);
} else if (file.webkitSlice) {
	filePart = file.webkitSlice(0, 131072);
} else if (file.mozSlice) {
	filePart = file.mozSlice(0, 131072);
} else {
	filePart = file;
}
</pre></p>
<p>We create a new FileReader object and pass in the Blob slice to be read. An event handler is created at this point to handle the reading of the Blob data and pass it into the worker. FileReader.readAsBinaryString() is called, passing in the blob slice, to read it as a binary string into the worker.</p>
<p><pre class="brush: jscript; gutter: false;">
binaryReader = new FileReader();

binaryReader.onload = function () {

	worker.postMessage({
		guid: guid,
		binary_string: binaryReader.result
	});

};

binaryReader.readAsBinaryString(filePart);
</pre></p>
<p>The worker receives the binary string and passes it through multiple Exif processors in succession. One for Exif data, one for XMP formatted IPTC data and one for unformatted IPTC data. Each of the processors uses postMessage() to post the Exif data back out and is caught by the module. The data is displayed in the uploadr, which is later sent along to the API with the uploaded batch.</p>
<h3>On asynchronous Exif parsing</h3>
<p>When reading in Exif data asynchronously we ran into a few problems, because processing does not happen immediately. We had to prevent the user from sorting their photos until all the Exif data was parsed, namely the date and time for “order by” sorting. We also ran into a race condition when getting tags out of the Exif data. If a user had already entered tags we want to amend those tags with what was possibly saved in their photo. We also update the Uploadr with data from Exiftool once it is processed on the back-end.</p>
<h3>The Nitty Gritty: Creating EXIF Parsers and dealing with typed arrays support</h3>
<p class="flickr-photo">
<a href="http://www.flickr.com/photos/dret/6021263096/" title="pre-electronic binary code by dret, on Flickr"><img src="http://farm7.staticflickr.com/6014/6021263096_9c4a742be8_b.jpg" width="800" height="613" alt="pre-electronic binary code"></a><br />
<span class="caption"><a href="http://www.flickr.com/photos/dret/6021263096/">pre-electronic binary code</a> by <a href="http://www.flickr.com/photos/dret/">dret</a></span>
</p>
<p>Creating an Exif parser is no simple task, but there are a few things to consider:</p>
<ul>
<li>What specification of Exif are we dealing with? (Exif, XMP, IPTC, any and all of the above?)</li>
<li>When processing the binary string data, is it big or little endian?</li>
<li>How do we read binary data in a browser?</li>
<li>Do we have typed arrays support or do we need to create our own data view?</li>
</ul>
<h3>First things first, how do we read binary data?</h3>
<p>As we saw above our worker is fed a binary string, meaning this is a stream of ASCII characters representing values from 0-255. We need to create a way to access and parse this data. The Exif specification defines a few different data value types we will encounter:</p>
<ul>
<li>1 = BYTE An 8-bit unsigned integer</li>
<li>2 = ASCII An 8-bit byte containing one 7-bit ASCII code. The final byte is terminated with NULL.</li>
<li>3 = SHORT A 16-bit (2-byte) unsigned integer</li>
<li>4 = LONG A 32-bit (4-byte) unsigned integer</li>
<li>5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.</li>
<li>7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition</li>
<li>9 = SLONG A 32-bit (4-byte) signed integer (2&#8242;s complement notation)</li>
<li>10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator</li>
</ul>
<p>So, we need to be able to read an unsigned int (1 byte), an unsigned short (2 bytes), an unsigned long (4 bytes), an slong (4 bytes signed), and an ASCII string. Since the we read the stream as a binary string it is already in ASCII, that one is done for us. The others can be accomplished by using typed arrays, if supported, or some fun binary math.</p>
<h3>Typed Array Support</h3>
<p>Now that we know what types of data we are expecting, we just need a way to translate the binary string we have into useful values. The easiest approach would be typed arrays (<a href="https://developer.mozilla.org/en/JavaScript_typed_arrays">https://developer.mozilla.org/en/JavaScript_typed_arrays</a>), meaning we can create an ArrayBuffer using the string we received from from the FileReader, and then create typed arrays, or views, as needed to read values from the string. Unfortunately array buffer views do not support endianness, so the preferred method is to use DataView (<a href="http://www.khronos.org/registry/typedarray/specs/latest/#8">http://www.khronos.org/registry/typedarray/specs/latest/#8</a>), which essentially creates a view to read into the buffer and spit out various integer types. Due to lack of great support, Firefox does not support DataView and Safari’s typed array support can be slow, we are currently using a combination of manual byte conversion and ArrayBuffer views.</p>
<p><pre class="brush: jscript; gutter: false;">
var arrayBuffer = new ArrayBuffer(this.data.length);
var int8View = new Int8Array(arrayBuffer);

for (var i = 0; i &amp;lt; this.data.length; i++) {
	int8View[i] = this.data[i].charCodeAt(0);
}

this.buffer = arrayBuffer;

this.getUint8 = function(offset) {
	if (compatibility.ArrayBuffer) {

	return new Uint8Array(this.buffer, offset, 1)[0];
	}
	else {
		return this.data.charCodeAt(offset) &amp;amp; 0xff;
	}
}
</pre></p>
<p>Above we are creating an ArrayBuffer of length to match the data being passed in, and then creating a view consisting of 8-bit signed integers which allows us to store data into the ArrayBuffer from the data passed in. We then process the charCode() at each location in the data string passed in and store it in the array buffer via the int8View. Next you can see an example function, getUint8(), where we get an unsigned 8-bit value at a specified offset. If typed arrays are supported we use a Uint8Array view to access data from the buffer at an offset, otherwise we just get the character code at an offset and then mask the least significant 8 bits.</p>
<p>To read a short or long value we can do the following:</p>
<p><pre class="brush: jscript; gutter: false;">
this.getLongAt = function(offset,littleEndian) {

	//DataView method
	return new DataView(this.buffer).getUint32(offset, littleEndian);

	//ArrayBufferView method always littleEndian
	var uint32Array = new Uint32Array(this.buffer);
	return uint32Array[offset];

	//The method we are currently using
	var b3 = this.getUint8(this.endianness(offset, 0, 4, littleEndian)),
	b2 = this.getUint8(this.endianness(offset, 1, 4, littleEndian)),
	b1 = this.getUint8(this.endianness(offset, 2, 4, littleEndian)),
	b0 = this.getUint8(this.endianness(offset, 3, 4, littleEndian));

	return (b3 * Math.pow(2, 24)) + (b2 &amp;lt;&amp;lt; 16) + (b1 &amp;lt;&amp;lt; 8) + b0;

}
</pre></p>
<p>The DataView method is pretty straight forward, as is the ArrayBufferView method, but without concern for endianness. The last method above, the one we are currently using, gets the unsigned int at each byte location for the 4 bytes. Transposes them based on endianness and then creates a long integer value out of it. This is an example of the custom binary math needed to support data view in Firefox.</p>
<p>When originally beginning to build out the Exif parser I found this jDataView (<a href="https://github.com/vjeux/jDataView">https://github.com/vjeux/jDataView</a>) library written by Christopher Chedeau aka Vjeux (<a href="http://blog.vjeux.com/">http://blog.vjeux.com/</a>). Inspired by Christopher’s jDataView module we created a DataView module for YUI.</p>
<h3>Translating all of this into useful data</h3>
<p>There are a few documents you should become familiar with if you are considering writing your own Exif parser:</p>
<ul>
<li>The Exif specification in its entirety:
<ul>
<li><a href="http://www.kodak.com/global/plugins/acrobat/en/service/digCam/exifStandard2.pdf">http://www.kodak.com/global/plugins/acrobat/en/service/digCam/exifStandard2.pdf</a></li>
</ul>
</li>
<li>The TIFF 6.0 specification which has a good breakdown of the tags and Tiff header:
<ul>
<li><a href="http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf">http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf</a></li>
</ul>
</li>
<li>A breakdown of the Exif specification originally put together by TsuruZoh Tachibanaya, but hosted now at MIT:
<ul>
<li><a href="http://www.media.mit.edu/pia/Research/deepview/exif.html">http://www.media.mit.edu/pia/Research/deepview/exif.html</a></li>
</ul>
</li>
</ul>
<p class="undersized-image-container"><img src="http://farm9.staticflickr.com/8002/7315733808_6dcfd91f88_o.gif" /></p>
<p>The diagram above is taken straight from the Exif specification section 4.5.4, it describes the basic structure for Exif data in compressed JPEG images. Exif data is broken up into application segments (APP0, APP1, etc.). Each application segment contains a maker, length, Exif identification code, TIFF header, and usually 2 image file directories (IFDs). These IFD subdirectories contain a series of tags, of which each contains the tag number, type, count or length, and the data itself or offset to the data. These tags are described in <i>Appendix A of the <a href="http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf">TIFF6 Spec</a></i>, or at <i>Table 41 JPEG Compressed (4:2:0) File APP1 Description Sample in the <a href="http://www.kodak.com/global/plugins/acrobat/en/service/digCam/exifStandard2.pdf">Exif spec</a></i> and also broken down on the <a href="http://www.media.mit.edu/pia/Research/deepview/exif.html">Exif spec page</a> created by TsuruZoh Tachibanaya.</p>
<h3>Finding APP1</h3>
<p>The first thing we want to find is the APP1 marker, so we know we are in the right place. For APP1, this is always the 2 bytes 0xFFE1, We usually check the last byte of this for the value 0xE1, or 225 in decimal, to prevent any endianness problems. The next thing we want to know is the size of the APP1 data, we can use this to optimize and know when to stop reading, which is also 2 bytes. Next up is the Exif header, which is always the 4 bytes 0&#215;45, 0&#215;78, 0&#215;69, 0&#215;66, or “Exif” in ASCII, which makes it easy. This is always followed up 2 null bytes 0&#215;0000. Then begins the TIFF header and then the 0th IFD, where our Exif is stored, followed by the 1st IFD, which usually contains a thumbnail of the image.</p>
<p>We are concerned with application segment 1 (APP1). APP2 and others can contain other metadata about this compressed image, but we are interested in the Exif attribute information.</p>
<h3>Wherefore art thou, TIFF header?</h3>
<p>Once we know we are at APP1 we can move on to the TIFF header which starts with the byte alignment, 0&#215;4949 (II, Intel) or 0x4D4D (MM, Motorola), Intel being little endian and Motorola being big endian. Then we have the tag marker, which is always 0x2A00 (or 0x002A for big endian): “an arbitrary but carefully chosen number (42) that further identifies the file as a TIFF file”. Next we have the offset to the first IFD, which is usually 0&#215;08000000, or 8 bytes from the beginning of the TIFF header (The 8 bytes: 0&#215;49 0&#215;49 0x2A 0&#215;00 0&#215;08 0&#215;00 0&#215;00 0&#215;00). Now we can begin parsing the 0th IFD!</p>
<p class="undersized-image-container"><img src="http://farm9.staticflickr.com/8024/7315733770_7a850b8cb6_o.gif" /></p>
<p>The diagram above (taken from the TIFF6.0 specification found here:<a href="http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf"> http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf</a>), shows the structure of the TIFF header, the following IFD and a directory entry contained within the IFD.</p>
<p>The IFD starts off with the number of directory entries in the IFD, 2 bytes, then follows with all of the directory entries and ends with the offset to the next IFD if there is one. Each directory entry is 12 bytes long and comprised of 4 parts: the tag number, the data format, the number of components, and the data itself or an offset to the data value in the file. Then follows the offset to the next IFD which is again 8 bytes.</p>
<h3>Example: Processing some real world bytes</h3>
<p>Let’s run through an example below! I took a screen shot from hexfiend (<a href="http://ridiculousfish.com/hexfiend/">http://ridiculousfish.com/hexfiend/</a>, which is an awesome little program for looking at raw hex data from any file, I highly recommend it) and highlighted the appropriate bytes from start of image (SOI) to some tag examples.</p>
<p class="undersized-image-container"><img src="http://farm9.staticflickr.com/8009/7315733860_d8288b3607_o.gif" /></p>
<p>This is the first 48 bytes of the image file. I’ve grouped everything into 2 byte groups and 12 byte columns, because IFD entries are 12 bytes it makes it easier to read. You can see the start of image marker (SOI), APP1 mark and size, “Exif” mark and null bytes. Next is the beginning of the TIFF header including byte align, the 42 TIFF verification mark, the offset to the 0th IFD, the number of directory entries, and then the first 2 directory entries. These entries are in little endian and I wrote them out as big endian to make them easier to read. Both of these first entries are of ASCII type, which always point to an offset in the file and ends with a null terminator byte.</p>
<h3>Writing code to parse Exif</h3>
<p>Now that we understand the tag structure and what we are looking for in our 128k of data we sliced from the beginning of the image, we can write some code to do just that. A lot of insipration for this code comes from an exif parser written by Jacob Seidelin, <a href="http://blog.nihilogic.dk/">http://blog.nihilogic.dk</a>, the original you can find here:<a href="http://www.nihilogic.dk/labs/exif/exif.js"> http://www.nihilogic.dk/labs/exif/exif.js</a>. We used a lot of his tag mapping objects to translate the Exif tag number values into tag names as well as his logic that applies to reading and finding Exif data in a binary string.</p>
<p>First we start looking for the APP1 marker, by looping through the binary string recording our offset and moving it up as we go along.</p>
<p><pre class="brush: jscript; gutter: false;">
if (dataview.getByteAt(0) != 0xFF || dataview.getByteAt(1) != 0xD8) {
	return;
}
else {
	offset = 2;
	length = dataview.length;
	
	while (offset &amp;lt; length) {
		marker = dataview.getByteAt(offset+1);
		if (marker == 225) {
			readExifData(dataview, offset + 4, dataview.getShortAt(offset+2, true)-2);
			break;
		}
		else if(marker == 224) {
			offset = 20;
		}
		else {
			offset += 2 + dataview.getShortAt(offset+2, true);
		}
	}
}
</pre></p>
<p>We check for a valid SOI marker (0xFFD8) and then loop through the string we passed in. If we find the APP1 marker (225) we start reading Exif data, if we find a APP0 marker (224) we move the offset up by 20 and continue reading, otherwise we move the offset up by 2 plus the length of the APP data segment we are at, because it is not APP1, we are not interested.</p>
<p>Once we find what we are looking for we can look for the Exif header, endianness, the TIFF header, and look for IFD0.</p>
<p><pre class="brush: jscript; gutter: false;">
function readExifData(dataview, start, length) {

	var littleEndian;
	var TIFFOffset = start + 6;

	if (dataview.getStringAt(iStart, 4) != &quot;Exif&quot;) {
		return false;
	}

	if (dataview.getShortAt(TIFFOffset) == 0x4949) {
		littleEndian = true;
		self.postMessage({msg:&quot;----Yes Little Endian&quot;});
	}
	else if (dataview.getShortAt(TIFFOffset) == 0x4D4D) {
		littleEndian = false;
		self.postMessage({msg:&quot;----Not Little Endian&quot;});
	}
	else {
		return false;
	}

	if (dataview.getShortAt(TIFFOffset+2, littleEndian) != 0x002A) {
		return false;
	}

	if (dataview.getLongAt(TIFFOffset+4, littleEndian) != 0x00000008) {
		return false;
	}

	var tags = ExifExtractorTags.readTags(dataview, TIFFOffset, TIFFOffset+8, ExifExtractorTags.Exif.TiffTags, littleEndian);
</pre></p>
<p>This is the first part of the readExifData function that is called once we find our APP1 segment marker. We start by verifying the Exif marker, then figuring out endianness, then checking if our TIFF header verification marker exists (42), and then getting our tags and values by calling ExifExtractorTags.readTags. We pass in the dataview to our binary string, the offset, the offset plus 8, which bypasses the TIFF header, the tags mapping object, and the endianness.</p>
<p>Next we pass that data into a function that creates an object which maps all of the tag numbers to real world descriptions, and includes maps for tags that have mappable values.</p>
<p><pre class="brush: jscript; gutter: false;">
this.readTags = function(dataview, TIFFStart, dirStart, strings, littleEndian) {
	var entries = dataview.getShortAt(dirStart, littleEndian);
	var tags = {};
	var i;

	for (i = 0; i &amp;lt; entries; i++) {
		var entryOffset = dirStart + i*12 + 2;
		var tag = strings[dataview.getShortAt(entryOffset, littleEndian)];

		tags[tag] = this.readTagValue(dataview, entryOffset, TIFFStart, dirStart, littleEndian);
	}

	if(tags.ExifIFDPointer) {
		var entryOffset = dirStart + i*12 + 2;
		var IFD1Offset = dataview.getLongAt(entryOffset,littleEndian);

		tags.IFD1Offset = IFD1Offset;
	}

	return tags;
}
</pre></p>
<p>This function is quite simple, once we know where we are at of course. For each entry we get the tag name from our tag strings and create a key on a tags object with a value of the tag. If there is an IFD1, we store that offset in the tags object as well. The readTagValue function takes the dataview object, the entry’s offset, the TIFF starting point, the directory starting point (TIFFStart + 8), and then endianness. It returns the tag’s value based on the data type (byte, short, long, ASCII).</p>
<p>We return a tags object which has keys and values for various Exif tags that were found in the IFD. We check if ExifIFDPointer exists on this object, if so, we have IFD entries to pass back out of the worker and show the user. We also check for GPS data and an offset to the next IFD, IFD1Offset, if that exists we know we have another IFD, which is usually a thumbnail image.</p>
<p><pre class="brush: jscript; gutter: false;">
if (tags.ExifIFDPointer) {

	var ExifTags = ExifExtractorTags.readTags(dataview, TIFFOffset, TIFFOffset + tags.ExifIFDPointer, ExifExtractorTags.Exif.Tags, littleEndian);

	for (var tag in ExifTags) {
		switch (tag) {
			case &quot;LightSource&quot; :
			case &quot;Flash&quot; :
			case &quot;MeteringMode&quot; :
			case &quot;ExposureProgram&quot; :
			case &quot;SensingMethod&quot; :
			case &quot;SceneCaptureType&quot; :
			case &quot;SceneType&quot; :
			case &quot;CustomRendered&quot; :
			case &quot;WhiteBalance&quot; :
			case &quot;GainControl&quot; :
			case &quot;Contrast&quot; :
			case &quot;Saturation&quot; :
			case &quot;Sharpness&quot; :
			case &quot;SubjectDistanceRange&quot; :
			case &quot;FileSource&quot; :
				ExifTags[tag] = ExifExtractorTags.Exif.StringValues[tag][ExifTags[tag]];
				break;
			case &quot;ExifVersion&quot; :
			case &quot;FlashpixVersion&quot; :
				ExifTags[tag] = String.fromCharCode(ExifTags[tag][0], ExifTags[tag][1], ExifTags[tag][2], ExifTags[tag][3]);
				break;
			case &quot;ComponentsConfiguration&quot; :
				ExifTags[tag] =
					ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][0]]
					+ ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][1]]
					+ ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][2]]
					+ ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][3]];
				break;
		}
		
		tags[tag] = ExifTags[tag];
	}
}
</pre></p>
<p>This is the rest of the readTags function, basically we are checking if ExifIFDPointer exists and then reading tags again at that offset pointer. Once we get another tags object back, we check to see if that tag has a value that needs to be mapped to a readable value. For example if the Flash Exif tag returns 0&#215;0019 we can map that to “Flash fired, auto mode”.</p>
<p><pre class="brush: jscript; gutter: false;">
if(tags.IFD1Offset) {
	IFD1Tags = ExifExtractorTags.readTags(dataview, TIFFOffset, tags.IFD1Offset + TIFFOffset, ExifExtractorTags.Exif.TiffTags, littleEndian);
	
	if(IFD1Tags.JPEGInterchangeFormat) {
		readThumbnailData(dataview, IFD1Tags.JPEGInterchangeFormat, IFD1Tags.JPEGInterchangeFormatLength, TIFFOffset, littleEndian);
	}
}

function readThumbnailData(dataview, ThumbStart, ThumbLength, TIFFOffset, littleEndian) {

	if (dataview.length &amp;lt; ThumbStart+TIFFOffset+ThumbLength) {
		return;
	}

	var data = dataview.getBytesAt(ThumbStart+TIFFOffset,ThumbLength);
	var hexData = new Array();
	var i;

	for(i in data) {
		if (data[i] &amp;lt; 16) {
			hexData[i] = &quot;0&quot;+data[i].toString(16);
		}
		else {
			hexData[i] = data[i].toString(16);
		}
	}

	self.postMessage({guid:dataview.guid, thumb_src:&quot;data:image/jpeg,%&quot;+hexData.join('%')});
}
</pre></p>
<p>The directory entry for the thumbnail image is just like the others. If we find the IFD1 offset at the end of IFD0, we pass the data back into the readTags function looking for two specific tags: JPEGInterchangeFormat (the offset to the thumbnail) and JPEGInterchangeFormatLength (the size of the thumbnail in bytes). We read in the correct amount of raw bytes at the appropriate offset, convert each byte into hex, and pass it back as a data URI to be inserted into the DOM showing the user a thumbnail while their photo is being uploaded.</p>
<p>As we get data back from the readTags function, we post a message out of the worker with the tags as an object. Which will be caught caught by our event handlers from earlier, shown the user, and stored as necessary to be uploaded when the user is ready.</p>
<p>We use this same process to parse older IPTC data. Essentially we look for an APP14 marker, a Photoshop 3.0 marker, a “8BIM” marker, and then begin running through the bytes looking for segment type, size, and data. We map the segment type against a lookup table to get the segment name and get size number of bytes at the offset to get the segment data. This is all stored in a tags object and passed out of the worker.</p>
<p>XMP data is a little different, even easier. Basically we look for the slice of data surrounded by the values “&lt;x:xmpmeta” to “&lt;/x:xmpmeta&gt;” in the binary string, then pass that out of the worker to be parsed via Y.DataType.XML.parse().</p>
<h3>Conclusion</h3>
<p>In conclusion the major steps we take to process an image&#8217;s Exif are:</p>
<ol>
<li>Initialize a web worker</li>
<li>Get a file reference</li>
<li>Get a slice of the file’s data</li>
<li>Read a byte string</li>
<li>Look for APP1/APP0 markers</li>
<li>Look for Exif and TIFF header markers</li>
<li>Look for IFD0 and IFD1</li>
<li>Process entries from IFD0 and IFD1</li>
<li>Pass data back out of the worker</li>
</ol>
<p>That is pretty much all there is to reading Exif! The key is to be very forgiving in the parsing of Exif data, because there are a lot of different cameras out there and the format has changed over the years.</p>
<p>One final note: Web workers have made client-side Exif processing feasible at scale. Tasks like this can be performed without web workers, but run the risk of locking the UI thread &#8211; certainly not ideal for a web app that begs for user interaction.</p>
<div class="hiring-banner">
<p class="group-photo">
        <a href="http://www.flickr.com/photos/morozgrafix/7803402076/" title="Flickr flamily floto by morozgrafix, on Flickr"><img src="http://farm9.staticflickr.com/8436/7803402076_c06f87bf1f_m.jpg" width="120" height="80" alt="Flickr flamily floto"></a>
    </p>
<p>
        Like this post? Have a love of online photography? Want to work with us? Flickr is hiring <strong>engineers</strong>, <strong>designers</strong> and <strong>product managers</strong> in our San Francisco office. <strong>Find out more at <a href="http://www.flickr.com/jobs/">flickr.com/jobs</a></strong>.
    </p>
</div>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"></div>					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
												<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-cat-links">Posted in</span> <a href="http://code.flickr.net/category/uploadr/" title="View all posts in uploadr" rel="category tag">uploadr</a>			</span>
															
			
					</footer><!-- .entry-meta -->
	</article><!-- #post-1951 -->

				
						<nav id="nav-below">
			<h3 class="assistive-text">Post navigation</h3>
			<div class="nav-previous"><a href="http://code.flickr.net/page/2/" ><span class="meta-nav">&larr;</span> Older posts</a></div>
			<div class="nav-next"></div>
		</nav><!-- #nav-above -->
	
			
			</div><!-- #content -->
		</div><!-- #primary -->

		<div id="secondary" class="widget-area" role="complementary">
					<aside id="search-2" class="widget widget_search">	<form method="get" id="searchform" action="http://code.flickr.net/">
		<label for="s" class="assistive-text">Search</label>
		<input type="text" class="field" name="s" id="s" placeholder="Search" />
		<input type="submit" class="submit" name="submit" id="searchsubmit" value="Search" />
	</form>
</aside>		<aside id="recent-posts-2" class="widget widget_recent_entries">		<h3 class="widget-title">Recent Posts</h3>		<ul>
					<li>
				<a href="http://code.flickr.net/2012/12/21/redis-global-locks-redux/" title="Redis Global Locks&nbsp;Redux">Redis Global Locks&nbsp;Redux</a>
						</li>
					<li>
				<a href="http://code.flickr.net/2012/12/12/highly-available-real-time-notifications/" title="Highly Available Real Time Push Notifications and&nbsp;You">Highly Available Real Time Push Notifications and&nbsp;You</a>
						</li>
					<li>
				<a href="http://code.flickr.net/2012/12/10/drag-n-drop/" title="Avoiding Dragons: A Practical Guide to Drag&nbsp;’n’&nbsp;Drop">Avoiding Dragons: A Practical Guide to Drag&nbsp;’n’&nbsp;Drop</a>
						</li>
					<li>
				<a href="http://code.flickr.net/2012/10/26/flickr-at-sf-web-performance/" title="Flickr at SF Web&nbsp;Performance">Flickr at SF Web&nbsp;Performance</a>
						</li>
					<li>
				<a href="http://code.flickr.net/2012/10/25/join-the-flickr-frontend-team-tonight-at-the-sf-web-performance-meet-up/" title="Join the Flickr Frontend team tonight at the SF Web Performance meet&nbsp;up!">Join the Flickr Frontend team tonight at the SF Web Performance meet&nbsp;up!</a>
						</li>
				</ul>
		</aside><aside id="archives-2" class="widget widget_archive"><h3 class="widget-title">Archives</h3>		<ul>
			<li><a href='http://code.flickr.net/2012/12/' title='December 2012'>December 2012</a></li>
	<li><a href='http://code.flickr.net/2012/10/' title='October 2012'>October 2012</a></li>
	<li><a href='http://code.flickr.net/2012/07/' title='July 2012'>July 2012</a></li>
	<li><a href='http://code.flickr.net/2012/06/' title='June 2012'>June 2012</a></li>
	<li><a href='http://code.flickr.net/2012/05/' title='May 2012'>May 2012</a></li>
	<li><a href='http://code.flickr.net/2012/04/' title='April 2012'>April 2012</a></li>
	<li><a href='http://code.flickr.net/2012/02/' title='February 2012'>February 2012</a></li>
	<li><a href='http://code.flickr.net/2012/01/' title='January 2012'>January 2012</a></li>
	<li><a href='http://code.flickr.net/2011/12/' title='December 2011'>December 2011</a></li>
	<li><a href='http://code.flickr.net/2011/10/' title='October 2011'>October 2011</a></li>
	<li><a href='http://code.flickr.net/2011/09/' title='September 2011'>September 2011</a></li>
	<li><a href='http://code.flickr.net/2011/08/' title='August 2011'>August 2011</a></li>
	<li><a href='http://code.flickr.net/2011/07/' title='July 2011'>July 2011</a></li>
	<li><a href='http://code.flickr.net/2011/06/' title='June 2011'>June 2011</a></li>
	<li><a href='http://code.flickr.net/2011/03/' title='March 2011'>March 2011</a></li>
	<li><a href='http://code.flickr.net/2011/02/' title='February 2011'>February 2011</a></li>
	<li><a href='http://code.flickr.net/2011/01/' title='January 2011'>January 2011</a></li>
	<li><a href='http://code.flickr.net/2010/11/' title='November 2010'>November 2010</a></li>
	<li><a href='http://code.flickr.net/2010/10/' title='October 2010'>October 2010</a></li>
	<li><a href='http://code.flickr.net/2010/09/' title='September 2010'>September 2010</a></li>
	<li><a href='http://code.flickr.net/2010/08/' title='August 2010'>August 2010</a></li>
	<li><a href='http://code.flickr.net/2010/07/' title='July 2010'>July 2010</a></li>
	<li><a href='http://code.flickr.net/2010/05/' title='May 2010'>May 2010</a></li>
	<li><a href='http://code.flickr.net/2010/04/' title='April 2010'>April 2010</a></li>
	<li><a href='http://code.flickr.net/2010/03/' title='March 2010'>March 2010</a></li>
	<li><a href='http://code.flickr.net/2010/02/' title='February 2010'>February 2010</a></li>
	<li><a href='http://code.flickr.net/2010/01/' title='January 2010'>January 2010</a></li>
	<li><a href='http://code.flickr.net/2009/12/' title='December 2009'>December 2009</a></li>
	<li><a href='http://code.flickr.net/2009/11/' title='November 2009'>November 2009</a></li>
	<li><a href='http://code.flickr.net/2009/10/' title='October 2009'>October 2009</a></li>
	<li><a href='http://code.flickr.net/2009/09/' title='September 2009'>September 2009</a></li>
	<li><a href='http://code.flickr.net/2009/07/' title='July 2009'>July 2009</a></li>
	<li><a href='http://code.flickr.net/2009/06/' title='June 2009'>June 2009</a></li>
	<li><a href='http://code.flickr.net/2009/05/' title='May 2009'>May 2009</a></li>
	<li><a href='http://code.flickr.net/2009/04/' title='April 2009'>April 2009</a></li>
	<li><a href='http://code.flickr.net/2009/03/' title='March 2009'>March 2009</a></li>
	<li><a href='http://code.flickr.net/2009/02/' title='February 2009'>February 2009</a></li>
	<li><a href='http://code.flickr.net/2009/01/' title='January 2009'>January 2009</a></li>
	<li><a href='http://code.flickr.net/2008/12/' title='December 2008'>December 2008</a></li>
	<li><a href='http://code.flickr.net/2008/11/' title='November 2008'>November 2008</a></li>
	<li><a href='http://code.flickr.net/2008/10/' title='October 2008'>October 2008</a></li>
	<li><a href='http://code.flickr.net/2008/09/' title='September 2008'>September 2008</a></li>
	<li><a href='http://code.flickr.net/2008/08/' title='August 2008'>August 2008</a></li>
	<li><a href='http://code.flickr.net/2008/07/' title='July 2008'>July 2008</a></li>
	<li><a href='http://code.flickr.net/2008/06/' title='June 2008'>June 2008</a></li>
	<li><a href='http://code.flickr.net/2008/05/' title='May 2008'>May 2008</a></li>
	<li><a href='http://code.flickr.net/2008/04/' title='April 2008'>April 2008</a></li>
		</ul>
</aside><aside id="categories-2" class="widget widget_categories"><h3 class="widget-title">Categories</h3>		<ul>
			<li class="cat-item cat-item-564792"><a href="http://code.flickr.net/category/change-log/" title="View all posts filed under changelog">changelog</a>
</li>
	<li class="cat-item cat-item-5784"><a href="http://code.flickr.net/category/event/" title="View all posts filed under event">event</a>
</li>
	<li class="cat-item cat-item-29160"><a href="http://code.flickr.net/category/geo/" title="All things geo related">geo</a>
</li>
	<li class="cat-item cat-item-34412"><a href="http://code.flickr.net/category/kittens/" title="View all posts filed under kittens">kittens</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://code.flickr.net/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-249276"><a href="http://code.flickr.net/category/uploadr/" title="View all posts filed under uploadr">uploadr</a>
</li>
	<li class="cat-item cat-item-830560"><a href="http://code.flickr.net/category/xulrunner/" title="View all posts filed under xulrunner">xulrunner</a>
</li>
		</ul>
</aside><aside id="meta-2" class="widget widget_meta"><h3 class="widget-title">Meta</h3>			<ul>
			<li><a href="http://flickrcode.wordpress.com/wp-login.php?action=register">Register</a></li>			<li><a href="http://flickrcode.wordpress.com/wp-login.php">Log in</a></li>
			<li><a href="http://code.flickr.net/feed/" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://code.flickr.net/comments/feed/" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li>Powered by <a href="http://vip.wordpress.com/" rel="generator nofollow" class="powered-by-wpcom">WordPress.com VIP</a></li>
						</ul>
</aside>		</div><!-- #secondary .widget-area -->
	</div><!-- #main -->

	<footer id="colophon" role="contentinfo">

			

			<div id="site-generator">
				Theme: Twenty Eleven <span class="sep"> | </span>				Powered by <a href="http://vip.wordpress.com/" rel="generator nofollow" class="powered-by-wpcom">WordPress.com VIP</a>			</div>
	</footer><!-- #colophon -->
</div><!-- #page -->


<script type="text/javascript">
var _qevents = _qevents || [], wpcomQuantcastData = {"qacct":"p-18-mFEk4J448M","labels":",language.en,type.wpcom,vip.flickrcode"};
function wpcomQuantcastPixel( labels, options ) {
	var i, defaults = wpcomQuantcastData, data = { event: 'ajax' };

	labels  = labels  || '';
	options = options || {};

	if ( typeof labels != 'string' )
		options = labels;

	for ( i in defaults ) {
		data[i] = defaults[i];
	}

	for ( i in options ) {
		data[i] = options[i];
	}

	if ( data.labels ) {
		data.labels += ',' + labels;
	} else {
		data.labels = labels;
	}

	_qevents.push( data );
};
(function() {var elem = document.createElement('script');elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";elem.async = true;elem.type = "text/javascript";var scpt = document.getElementsByTagName('script')[0];scpt.parentNode.insertBefore(elem, scpt);  })();
_qevents.push( wpcomQuantcastData );
</script>
<noscript><div style="display: none;"><img src="//pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif?labels=%2Clanguage.en%2Ctype.wpcom%2Cvip.flickrcode" height="1" width="1" alt="" /></div></noscript>

<script type='text/javascript' src='//0.gravatar.com/js/gprofiles.js?ver=201307ac'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1351637563g'></script>
<script>jQuery(document).ready(function($){ Gravatar.profile_cb = function( h, d ) { WPGroHo.syncProfileData( h, d );	}; Gravatar.my_hash = WPGroHo.my_hash; Gravatar.init( 'body', '#wp-admin-bar-my-account' ); });</script>	<div style="display:none">
	</div>
<script type='text/javascript' src='http://s0.wp.com/_static/??-eJzTLy/QTc7PK0nNK9EvyClNz8wr1i+uzCtJrMjITM/IAeKS1CJsIslFmQUlQLUZzvlFqXpZxTr6FJvkVFRanOEVDOYDTbTPtTU0NrYwMDCwNDPOAgAx90DX'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var themecssurl = "http://s0.wp.com/wp-content/plugins/syntaxhighlighter-wpcom/shThemeDefault.css?m=1267535107g&amp;ver=2.1.364b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.getElementsByTagName("head")[0].appendChild(themecss);
	})();
	SyntaxHighlighter.config.clipboardSwf = 'http://s2.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter/scripts/clipboard.swf?m=1253219630g';
	SyntaxHighlighter.config.strings.expandSource = 'show source';
	SyntaxHighlighter.config.strings.viewSource = 'view source';
	SyntaxHighlighter.config.strings.copyToClipboard = 'copy to clipboard';
	SyntaxHighlighter.config.strings.copyToClipboardConfirmation = 'The code is in your clipboard now';
	SyntaxHighlighter.config.strings.print = 'print';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx.js?m=1354656609g'></script>
<script type='text/javascript' src='http://platform.twitter.com/widgets.js?ver=20111117'></script>
<script type='text/javascript' src='http://s1.wp.com/wp-content/mu-plugins/twitter-blackbird-pie/pending.js?m=1342628662g'></script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script><script src="http://s.stats.wordpress.com/w.js?21" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'39034126','v':'wpcom','tz':'0','user_id':'0','subd':'flickrcode'});
function st_vt() {var x=document.createElement("img");x.src="http://stats.wordpress.com/g.gif?blog=39034126&v=wpcomvt&tz=0&user_id=0&subd=flickrcode&rand="+Math.random();}
ex_go({'crypt':'UE40eW5QN0p8M2Y/RE1BNmNJfGhxNCVxUDExYmtXRThKbHcwXTdETWI1alhvb1oseHImN101ZFpEakVpYjlQYVFLYzBaVHRtPz0wXS9bM1lKdVZKQS1NTGJmdUM0ZHJxVkdbSmJHXy45cWp6UEwwZUM/ZjMuP3ZrOGNQSXNQckNPekk0enJoYU55LCxheWdBb2RjM1N8cGRDYy9WZlMscywxW2l0SDdsOXouVWpDeVBib2lualk2SVNBTy0mdld3T3RaTFk1Z3gsek03WXBIJVFvTU1xVCtIbS9IUz1fNkU1NWRySA=='});
addLoadEvent(function(){linktracker_init('39034126',0);});
	</script>
<noscript><img src="http://stats.wordpress.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /></noscript>
<script type="text/javascript">
	// Trigger Quantcast pixel for each Infinite Scroll post load
	if ( 'function' === typeof( jQuery ) ) {
		jQuery( document.body ).on( 'post-load', function() {
			if ( 'function' === typeof( wpcomQuantcastPixel ) )
				wpcomQuantcastPixel();
		} );
	}
</script>

</body>
</html>