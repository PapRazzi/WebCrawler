
<!DOCTYPE html>
<html lang="en" class="devsite">

  

  <head>
    <meta charset="utf-8" />
    <script src="/_static/js/script_head.js"></script>
    <link rel="stylesheet" type="text/css" href="/_static/css/screen.css" />
    <link rel="shortcut icon" href="/_static/images/favicon.ico">
    <link rel="apple-touch-icon" href="/_static/images/apple-touch-icon.png">
    <link href='//fonts.googleapis.com/css?family=Open+Sans:300,400,600,700' rel='stylesheet' type='text/css'>
    
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
    <script id="jqueryui" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8.10/jquery-ui.min.js"></script>
    <script src="//www.google.com/jsapi?key=AIzaSyCZfHRnq7tigC-COeQRmoa9Cxr0vbrK6xw"></script>

    <script type="text/javascript" src="//www.gstatic.com/feedback/api.js"></script>
    <script type="text/javascript" src="/jsi18n/"></script>
    <!--[if lt IE 9]>
    <script src="/_static/js/html5shim/html5.js"></script>
    <![endif]-->

    
  <script type="text/javascript">
    var contentTimer = new window.jstiming.Timer();

    var ___gcfg = ___gcfg || {};
    ___gcfg.lang = 'en';
  </script>
  
  <title>Python Strings - Educational Materials &mdash; Google Developers</title>
  
  
  
    
    
    
  


    
    

  </head>
  <body class="two-column docs">
    
    <div id="sandbar">
      
      <a href="/sandbar?q=&page_url=/edu/python/strings"></a>
      <div id="gc-googlebar"></div>
      <img src="/_static/images/google-logo.png" style="display:none;"/>
      
    </div>
    

    
    

    <div id="gc-wrapper" itemscope itemtype="http://schema.org/Article">
      
      <input id="gc-analytics" type="hidden" value="UA-24532603-1" />
      

      

      <div id="gc-topnav">
        <div>

          
          

          <ul>

            
            

            
            
            
            
            <li class=""><a href="/">Home</a></li>
            
            <li class="active"><a href="/products/">Products</a></li>
            
            <li class=""><a href="/events/">Conferences</a></li>
            
            <li class=""><a href="/showcase/">Showcase</a></li>
            
            <li class=""><a href="/live/">Live</a></li>
            
            <li class=""><a href="/groups/">Groups</a></li>
            

            
            
            
          </ul>
        </div>
      </div>
      
      

      
      
      
        <div id="gc-appbar">
          
          
<h1>

  <a href="/edu/">Educational Materials</a>
  <div class="plusone-container">
    <div class="g-plusone"
      data-href="https://developers.google.com/edu/"
      data-size="medium"
      data-source="google:developers"></div>
  </div>






</h1>


          
        </div>
      
      

      
        
      <div id="gc-main">
        
        
  
  
      
      
      <div id="gc-sidebar">
        

  



  <nav class="gc-toc"><ul><li class=""><a href="/edu/python" data-title="Python Course"><span>Python Course</span></a><ul><li class=""><a href="/edu/python/set-up" data-title="Python Set Up"><span>Python Set Up</span></a></li><li class=""><a href="/edu/python/introduction" data-title="Introduction"><span>Introduction</span></a></li><li class=""><a href="/edu/python/strings" data-title="Strings"><span>Strings</span></a></li><li class=""><a href="/edu/python/lists" data-title="Lists"><span>Lists</span></a></li><li class=""><a href="/edu/python/sorting" data-title="Sorting"><span>Sorting</span></a></li><li class=""><a href="/edu/python/dict-files" data-title="Dicts and Files"><span>Dicts and Files</span></a></li><li class=""><a href="/edu/python/regular-expressions" data-title="Regular Expressions"><span>Regular Expressions</span></a></li><li class=""><a href="/edu/python/utilities" data-title="Utilities"><span>Utilities</span></a></li></ul></li><li class=""><span class="tlw-title" data-title="Lecture Videos day1, day2">Lecture Videos day1, day2</span><ul><li class=""><a href="http://www.youtube.com/watch?v=tKTZoB2Vjuk" data-title="1.1 Introduction, strings"><span>1.1 Introduction, strings</span></a></li><li class=""><a href="http://www.youtube.com/watch?v=EPYupizJYQI" data-title="1.2 Lists and sorting"><span>1.2 Lists and sorting</span></a></li><li class=""><a href="http://www.youtube.com/watch?v=haycL41dAhg" data-title="1.3 Dicts and files"><span>1.3 Dicts and files</span></a></li><li class=""><a href="http://www.youtube.com/watch?v=kWyoYtvJpe4" data-title="2.1 Regular expr"><span>2.1 Regular expr</span></a></li><li class=""><a href="http://www.youtube.com/watch?v=uKZ8GBKmeDM" data-title="2.2 Utilities"><span>2.2 Utilities</span></a></li><li class=""><a href="http://www.youtube.com/watch?v=Nn2KQmVF5Og" data-title="2.3 Utilities urllib"><span>2.3 Utilities urllib</span></a></li><li class=""><a href="http://www.youtube.com/watch?v=IcteAbMC1Ok" data-title="2.4 Conclusions"><span>2.4 Conclusions</span></a></li></ul></li><li class=""><span class="tlw-title" data-title="Python Exercises">Python Exercises</span><ul><li class=""><a href="/edu/python/exercises/basic" data-title="Basic Exercises"><span>Basic Exercises</span></a></li><li class=""><a href="/edu/python/exercises/baby-names" data-title="Baby Names Exercise"><span>Baby Names Exercise</span></a></li><li class=""><a href="/edu/python/exercises/copy-special" data-title="Copy Special Exercise"><span>Copy Special Exercise</span></a></li><li class=""><a href="/edu/python/exercises/log-puzzle" data-title="Log Puzzle Exercise"><span>Log Puzzle Exercise</span></a></li></ul></li></ul></nav>



      </div>
      

      <div id="gc-content"
           
           
           >
        
        <div>
  
          
  
  <h1 itemprop="name" class="page-title" >Python Strings</h1>
  
  <div itemprop="articleBody">
  



<p>

</p>

<p>Python has a built-in string class named "str" with many handy features (there is an older module named "string" which you should not use). String literals can be enclosed by either double or single quotes, although single quotes are more commonly used. Backslash escapes work the usual way within both single and double quoted literals -- e.g. \n \' \". A double quoted string literal can contain single quotes without any fuss (e.g. "I didn't do it") and likewise single quoted string can contain double quotes. A string literal can span multiple lines, but there must be a backslash \ at the end of each line to escape the newline. String literals inside triple quotes, """" or ''', can multiple lines of text.</p>

<p>Python strings are "immutable" which means they cannot be changed after they are created (Java strings also use this immutable style). Since strings can't be changed, we construct *new* strings as we go to represent computed values. So for example the expression ('hello' + 'there') takes in the 2 strings 'hello' and 'there' and builds a new string 'hellothere'.</p>

<p>Characters in a string can be accessed using the standard [ ] syntax, and like Java and C++, Python uses zero-based indexing, so if str is 'hello' str[1] is 'e'. If the index is out of bounds for the string, Python raises an error. The Python style (unlike Perl) is to halt if it can't tell what to do, rather than just make up a default value. The handy "slice" syntax (below) also works to extract any substring from a string. The len(string) function returns the length of a string. The  [ ] syntax and the len() function actually work on any sequence type -- strings, lists, etc.. Python tries to make its operations work consistently across different types. Python newbie gotcha: don't use "len" as a variable name to avoid blocking out the len() function. The '+' operator can concatenate two strings. Notice in the code below that variables are not pre-declared -- just assign to them and go.</p>

<pre class='prettyprint'>
  s = 'hi'
  print s[1]          ## i
  print len(s)        ## 2
  print s + ' there'  ## hi there
</pre>

<p>Unlike Java, the '+' does not automatically convert numbers or other types to string form. The str() function converts values to a string form so they can be combined with other strings.</p>

<pre class='prettyprint'>
  pi = 3.14
  ##text = 'The value of pi is ' + pi      ## NO, does not work
  text = 'The value of pi is '  + str(pi)  ## yes
</pre>

<p>For numbers, the standard operators, +, /, * work in the usual way. There is no ++ operator,  but +=, -=, etc. work. If you want integer division, it is most correct to use 2 slashes -- e.g. 6 // 5 is 1 (previous to python 3000, a single / does int division with ints anyway, but moving forward // is the preferred way to indicate that you want int division.)</p>

<p>The "print" operator prints out one or more python items followed by a newline (leave a trailing comma at the end of the items to inhibit the newline). A "raw" string literal is prefixed by an 'r' and passes all the chars through without special treatment of backslashes, so r'x\nx' evaluates to the length-4 string 'x\nx'. A 'u' prefix allows you to write a unicode string literal (Python has lots of other unicode support features -- see the docs below).</p>

<pre class='prettyprint'>
  raw = r'this\t\n and that'
  print raw     ## this\t\n and that
    
  multi = """It was the best of times.
  It was the worst of times."""
</pre>

<h3>String Methods</h3>

<p>Here are some of the most common string methods. A method is like a function, but it runs "on" an object. If the variable s is a string, then the code s.lower() runs the lower() method on that string object and returns the result (this idea of a method running on an object is one of the basic ideas that make up Object Oriented Programming, OOP). Here are some of the most common string methods:</p>

<ul>
   <li> s.lower(), s.upper() -- returns the lowercase or uppercase version of the string</li>

   <li> s.strip() -- returns a string with whitespace removed from the start and end</li>

   <li> s.isalpha()/s.isdigit()/s.isspace()... -- tests if all the string chars are in the various character classes</li>
 
   <li> s.startswith('other'), s.endswith('other') -- tests if the string starts or ends with the given other string</li>

   <li> s.find('other') -- searches for the given other string (not a regular expression) within s, and returns the first index where it begins or -1 if not found</li>

   <li> s.replace('old', 'new') -- returns a string where all occurrences of 'old' have been replaced by 'new'</li>

   <li> s.split('delim') -- returns a list of substrings separated by the given delimiter. The delimiter is not a regular expression, it's just text. 'aaa,bbb,ccc'.split(',') -> ['aaa', 'bbb', 'ccc']. As a convenient special case s.split() (with no arguments) splits on all whitespace chars.</li>

   <li> s.join(list) -- opposite of split(), joins the elements in the given list together using the string as the delimiter. e.g. '---'.join(['aaa', 'bbb', 'ccc']) -> aaa---bbb---ccc</li>
</ul>

<p>A google search for "python str" should lead you to the official <a href="http://docs.python.org/library/stdtypes.html#string-methods">python.org string methods</a> which lists all the str methods.</p>

<p>Python does not have a separate character type. Instead an expression like s[8] returns a string-length-1 containing the character. With that string-length-1, the operators ==, <=, ... all work as you would expect, so mostly you don't need to know that Python does not have a separate scalar "char" type.</p>

<h3>String Slices</h3>

<p>The "slice" syntax is a handy way to refer to sub-parts of sequences -- typically strings and lists. The slice s[start:end] is the elements beginning at start and extending up to but not including end. the Suppose we have s = "Hello"</p>

<p>
<img src="/edu/python/images/hello.png"
style='display:block; margin:0 auto'
alt="the string 'hello' with letter indexes 0 1 2 3 4"  /></p>

<ul>
   <li> s[1:4] is 'ell' -- chars starting at index 1 and extending up to but not including index 4

   <li> s[1:] is 'ello' -- omitting either index defaults to the start or end of the string

   <li> s[:] is 'Hello' -- omitting both always gives us a copy of the whole thing (this is the pythonic way to copy a sequence like a string or list)

   <li> s[1:100] is 'ello' -- an index that is too big is truncated down to the string length
</ul>

<p>The standard zero-based index numbers give easy access to chars near the start of the string. As an alternative, Python uses negative numbers to give easy access to the chars at the end of the string: s[-1] is the last char 'o', s[-2] is 'l' the next-to-last char, and so on. Negative index numbers count back from the end of the string:</p>

<ul>
   <li> s[-1] is 'o' -- last char (1st from the end)
   
   <li> s[-4] is 'e' -- 4th from the end

   <li> s[:-3] is 'He' -- going up to but not including the last 3 chars.

   <li> s[-3:] is 'llo' -- starting with the 3rd char from the end and extending to the end of the string.
</ul>

<p>It is a neat truism of slices that for any index n, <code>s[:n] + s[n:] == s</code>. This works even for n negative or out of bounds. Or put another way s[:n] and s[n:] always partition the string into two string parts, conserving all the characters. As we'll see in the list section later, slices work with lists too.</p>

<h3>String %</h3>

<p>Python has a printf()-like facility to put together a string. The % operator takes a printf-type format string on the left (%d int, %s string, %f/%g floating point), and the matching values in a tuple on the right (a tuple is made of values separated by commas, typically grouped inside parenthesis):</p>

<pre class='prettyprint'>
  # % operator
  text = "%d little pigs come out or I'll %s and %s and %s" % (3, 'huff', 'puff', 'blow down')
</pre>

<p>The above line is kind of long -- suppose you want to break it into separate lines. You cannot just split the line after the '%' as you might in other languages, since by default Python treats each line as a separate statement (on the plus side, this is why we don't need to type semi-colons on each line). To fix this, enclose the whole expression in an outer set of parenthesis -- then the expression is allowed to span multiple lines. This code-across-lines technique works with the various grouping constructs detailed below: ( ), [ ], { }.</p>

<pre class='prettyprint'>
  # add parens to make the long-line work:
  text = ("%d little pigs come out or I'll %s and %s and %s" %
    (3, 'huff', 'puff', 'blow down'))
</pre>

<h3>i18n Strings (Unicode)</h3>

<p>Regular Python strings are *not* unicode, they are just plain bytes. To create a unicode string, use the 'u' prefix on the string literal:</p>

<pre class='prettyprint'>
> ustring = u'A unicode \u018e string \xf1'
> ustring
u'A unicode \u018e string \xf1'
</pre>

<p>A unicode string is a different type of object from regular "str" string, but the unicode string is compatible (they share the common superclass "basestring"), and the various libraries such as  regular expressions work correctly if passed a unicode string instead of a regular string.</p>

<p>To convert a unicode string to bytes with an encoding such as 'utf-8', call the ustring.encode('utf-8') method on the unicode string. Going the other direction, the unicode(s, encoding) function converts encoded plain bytes to a unicode string:</p>

<pre class='prettyprint'>
## (unistring from above contains a unicode string)
> s = unistring.encode('utf-8')
> s
'A unicode \xc6\x8e string \xc3\xb1'  ## bytes of utf-8 encoding
> t = unicode(s, 'utf-8')             ## Convert bytes back to a unicode string
> t == unistring                      ## It's the same as the original, yay!
<p>True</p>
</pre>

<p>The built-in print does not work fully with unicode strings. You can encode() first to print in utf-8 or whatever. In the file-reading section, there's an example that shows how to open a text file with some encoding and read out unicode strings. Note that unicode handling is one area where Python 3000 is significantly cleaned up vs. Python 2.x behavior described here.</p>

<h2>If Statement</h2>

<p>Python does not use { } to enclose blocks of code for if/loops/function etc.. Instead, Python uses the colon (:) and indentation/whitespace to group statements. The boolean test for an if does not need to be in parenthesis (big difference from C++/Java), and it can have *elif* and *else* clauses (mnemonic: the word "elif" is the same length as the word "else").</p>

<p>Any value can be used as an if-test. The "zero" values all count as false: None, 0, empty string, empty list, empty dictionary. There is also a Boolean type with two values: True and False (converted to an int, these are 1 and 0). Python has the usual comparison operations: ==, !=, &lt;, &lt;=, >, >=. Unlike Java and C, == is overloaded to work correctly with strings. The boolean operators are the spelled out words *and*, *or*, *not* (Python does not use the C-style && || !). Here's what the code might look like for a policeman pulling over a speeder -- notice how each block of then/else statements starts with a : and the statements are grouped by their indentation:</p>

<pre class='prettyprint'>
  if speed >= 80:
    print 'License and registration please'
    if mood == 'terrible' or speed >= 100:
      print 'You have the right to remain silent.'
    elif mood == 'bad' or speed >= 90:
      print "I'm going to have to write you a ticket."
      write_ticket()
    else:
      print "Let's try to keep it under 80 ok?"
</pre>

<p>I find that omitting the ":" is my most common syntax mistake when typing in the above sort of code, probably since that's an additional thing to type vs. my C++/Java habits. Also, don't put the boolean test in parens -- that's a C/Java habit. If the code is short, you can put the code on the same line after ":", like this (this applies to functions, loops, etc. also), although some people feel it's more readable to space things out on separate lines.</p>

<pre class='prettyprint'>
  if speed >= 80: print 'You are so busted'
  else: print 'Have a nice day'
</pre>

<h2>Exercise: string1.py</h2>

<p>To practice the material in this section, try the <strong>string1.py</strong> exercise in the <a href="/edu/python/exercises/basic">Basic Exercises</a>.</p>







      
  </div>

  
        </div>
        
<div id="gc-content-footer">



<div itemprop="datePublished" content="2012-12-13T01:16:37.120510" id="gc-content-last-updated">Last updated December 13, 2012.</div>

</div>




      </div>
  

        
      </div>
        
      

      
      
      <footer id="gc-footer">
        <div id="gc-copyright">
          <a href="/">
            <img id="developers-logo-footer" src="/_static/images/developers-logo-footer.png" alt="Google Developers logo" style="vertical-align: center; float: left"/>
          </a>
          <ul>
            <li><a href="http://www.google.com/">Google</a></li>
            <li><a href="/readme/terms">Terms of Service</a></li>
            <li><a href="http://www.google.com/intl/en/privacy/">Privacy Policy</a></li>
            <li><a href="/jobs">Jobs</a></li>
            <li><a class="google-feedback" data-p="81425" data-b="Documentation"  data-v="devsite-20130214-rc02.365315134916571040" href="">Report a bug</a></li>
          </ul>
        </div>
        
        <div id="gc-language">
          <ul>
            <li>
              <form id="setlang" action="/i18n/setlang/" method="post">
                <div style='display:none'><input type='hidden' name='csrfmiddlewaretoken' value='984ae293906a3defcc33518b2b170200' /></div>
                <select id="footer_language" name="language">
                  
                  
                  <option
                     value="ar"
                     >
                    العربيّة
                  </option>
                  
                  <option
                     value="bg"
                     >
                    български
                  </option>
                  
                  <option
                     value="ca"
                     >
                    català
                  </option>
                  
                  <option
                     value="zh-cn"
                     >
                    简体中文
                  </option>
                  
                  <option
                     value="zh-tw"
                     >
                    繁體中文
                  </option>
                  
                  <option
                     value="hr"
                     >
                    Hrvatski
                  </option>
                  
                  <option
                     value="cs"
                     >
                    česky
                  </option>
                  
                  <option
                     value="da"
                     >
                    Dansk
                  </option>
                  
                  <option
                     value="nl"
                     >
                    Nederlands
                  </option>
                  
                  <option
                     value="en"
                      selected="selected" >
                    English
                  </option>
                  
                  <option
                     value="fa"
                     >
                    فارسی
                  </option>
                  
                  <option
                     value="fi"
                     >
                    suomi
                  </option>
                  
                  <option
                     value="fr"
                     >
                    Français
                  </option>
                  
                  <option
                     value="de"
                     >
                    Deutsch
                  </option>
                  
                  <option
                     value="el"
                     >
                    Ελληνικά
                  </option>
                  
                  <option
                     value="he"
                     >
                    עברית
                  </option>
                  
                  <option
                     value="hi"
                     >
                    Hindi
                  </option>
                  
                  <option
                     value="hu"
                     >
                    Magyar
                  </option>
                  
                  <option
                     value="id"
                     >
                    Bahasa Indonesia
                  </option>
                  
                  <option
                     value="it"
                     >
                    italiano
                  </option>
                  
                  <option
                     value="ja"
                     >
                    日本語
                  </option>
                  
                  <option
                     value="ko"
                     >
                    한국어
                  </option>
                  
                  <option
                     value="lv"
                     >
                    latviešu
                  </option>
                  
                  <option
                     value="lt"
                     >
                    Lithuanian
                  </option>
                  
                  <option
                     value="nb"
                     >
                    Norsk (bokmål)
                  </option>
                  
                  <option
                     value="nn"
                     >
                    Norsk (nynorsk)
                  </option>
                  
                  <option
                     value="pl"
                     >
                    polski
                  </option>
                  
                  <option
                     value="pt-br"
                     >
                    Português Brasileiro
                  </option>
                  
                  <option
                     value="pt"
                     >
                    Português
                  </option>
                  
                  <option
                     value="ro"
                     >
                    Română
                  </option>
                  
                  <option
                     value="ru"
                     >
                    Русский
                  </option>
                  
                  <option
                     value="sr"
                     >
                    српски
                  </option>
                  
                  <option
                     value="sk"
                     >
                    slovenský
                  </option>
                  
                  <option
                     value="sl"
                     >
                    Slovenščina
                  </option>
                  
                  <option
                     value="es"
                     >
                    español
                  </option>
                  
                  <option
                     value="sv"
                     >
                    Svenska
                  </option>
                  
                  <option
                     value="th"
                     >
                    Thai
                  </option>
                  
                  <option
                     value="tr"
                     >
                    Türkçe
                  </option>
                  
                  <option
                     value="uk"
                     >
                    Українська
                  </option>
                  
                  <option
                     value="vi"
                     >
                    Vietnamese
                  </option>
                  
                </select>
              </form>
            </li>
          </ul>
        </div>
        
      </footer>
      
      
    </div>
    <div id="needAuth" class="msgDialogContent">
      
      <h1>Authentication required</h1>
      
      <div>
        You need to be signed in with <a href='http://www.google.com/+'>Google+</a> to do that.
      </div>
      <button>Sign in</button>
      <button>Cancel</button>
    </div>
    <div id="signingIn" class="msgDialogContent">
      
      <h1>Signing you in...</h1>
      <div>
        
        Google Developers needs your permission to do that.
      </div>
      
      <button>Try again</button>
      
      <button>Cancel</button>
    </div>
    <script src="/_static/js/script_foot.js"></script>
    <script>
      (function($) {
        devsite.devsite.Init($, null, '');
      })(jQuery);

      
      devsite.localInit = function() {
        
      };
      
    </script>
    <!-- Google Code for PXL - Developers - Codesite - HP - 90d Remarketing List -->
    <script type="text/javascript">
    $('#setlang select').each(function() {
      if ($.browser.msie) {
        $(this).change(function() {
          $('#setlang').submit();
        });
      } else {
        $(this).kdSelect({'change': function() {
          $('#setlang').submit();
        }});
      }
    });
    </script>
    <script type="text/javascript">
      /* <![CDATA[ */
      var google_conversion_id = 992540712;
      var google_conversion_language = "en";
      var google_conversion_format = "3";
      var google_conversion_color = "ffffff";
      var google_conversion_label = "qio2CKCPwQMQqPCj2QM";
      var google_conversion_value = 0;
      /* ]]> */
    </script>
    <script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js">
    </script>

    

    <script>
      
      google.load('visualization', '1', {packages: ['table']});
    </script>

    <noscript>
      <div style="display:inline;">
        <img height="1" width="1" style="border-style:none;" alt="" src="//www.googleadservices.com/pagead/conversion/992540712/?label=qio2CKCPwQMQqPCj2QM&amp;guid=ON&amp;script=0"/>
      </div>
    </noscript>
    





<script type="text/javascript">
$(document).ready(function(e) {
    // Render any carousels on the page
    $('.carousel').carousel();
    // Render any feed widgets on the page
    
    $('.feed').rss();
    $('.feed-plain').rss();
    // Render any OSS widgets on the page.
    $('.oss').oss();
    });
</script>

<script type="text/javascript" defer>


$(document).ready(function() {
    contentTimer.name = 'content';
    contentTimer.tick('ol');
    window.jstiming.report(contentTimer);

    // Boilerplate javascript to enable the plusone button
    var po = document.createElement('script'); po.type = 'text/javascript';
    po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js?onload=devsite_plusoneLoaded';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(po, s);
});
</script>




  </body>

  
</html>
