
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by PageRender2 () for Shodor -->
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
  <title>CSERD: Parallel Programming Examples using MPI</title>

  <style type="text/css" media="screen">
  @import "/common-1.9/ui/default/css/main.css";
  </style>
  <link rel="stylesheet" type="text/css" href="/common-1.9/ui/tk/toolkit.css" />

  <style type="text/css" media="screen">
  
  @import "/common-1.9/ui/refdesk/css/main.css";
  @import "/refdesk/public/css/main.css";
  </style>

  <meta content="" />
  <style type="text/css">
  @import "/common-1.9/ui/xforms/xforms.css";
  </style>
  <script type="text/javascript" src="/common-1.9/ui/default/js/main.js"></script>
  <script type="text/javascript" src="/common-1.9/ui/default/js/prototype/prototype.js"></script>

  <script type="text/javascript" src="/common-1.9/ui/tk/toolkit.js"></script>
  <script type="text/javascript" src="/common-1.9/ui/refdesk/js/main.js"></script>
  <script type="text/javascript" src="/refdesk/public/js/main.js"></script>
  
  <script type="text/javascript">
  <!--
  var jumpTo_links = new Array('', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2Fhome%2F', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FCatalog%2F', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FResources%2F', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FHelp%2F', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FCatalog%2FSubmit%2F');
var browse_links = new Array('', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FBrowse%2F%3Ffield%3DSubject%26transaction_id%3D444', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FBrowse%2F%3Ffield%3DKeyword%26transaction_id%3D444', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FBrowse%2F%3Ffield%3DAudience%26transaction_id%3D444', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FBrowse%2F%3Ffield%3DEducation%20Level%26transaction_id%3D444', 'http%3A%2F%2Fwww.shodor.org%2Frefdesk%2FBrowse%2F%3Ffield%3DResource%20Type%26transaction_id%3D444');

  -->
  </script>
  		
<!-- Start Google Analytics code -->
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-321552-3";
urchinTracker();
</script>
<!-- End Google Analytics code -->
<script src="/common-1.9/ui/xforms/xforms.js" type="text/javascript"></script>
</head>
<body  class="SPageBody" onload="">
<!-- table that contains the entire page, including visible margins -->
<table border="0" width="100%" cellpadding="0" cellspacing="0" id="PageTable">
<!--************************************
    TopBar
    ************************************-->

<tbody id="TopBar">
<tr>
  <td>
    <form id="TopBarSearch" style="display:inline" method="get" action="http://www.shodor.org/refdesk/Search/" target="_top" name="search">
      <table border="0" width="100%" cellpadding="0" cellspacing="0" id="TopBarTable">
        <tr>
          <td id="TopBarLogoWell" class="pageLeftBorder" >
            <a href="http://www.shodor.org/refdesk" target="_top"><span id="Logo"></span></a><h2 id="LogoText">CSERD</h2>
          </td>
          <td id="TopBarFlexSpace"></td>
          <td id="TopBarNavWell1" align="right"><select id="JumpToMenu" onchange="javascript:if(this.options[this.selectedIndex].value &lt;= 0) { this.selectedIndex = 0; } else { jumpTo(this.options[this.selectedIndex].value);}"><option selected="selected" value="0">Jump To:</option><option value="1">CSERD Home</option><option disabled=
"disabled" value="-1">--------</option><option value="2">User Home</option><option value="3">Catalog</option><option value="4">Resources</option><option disabled=
"disabled" value="-1">--------</option><option value="5">Help</option><option value="6">Submit Item</option></select></td>
          <td id="TopBarDivider1"><span></span></td>
          <td id="TopBarNavWell2" width="50"><select id="BrowseMenu" onchange="javascript:if(this.options[this.selectedIndex].value &lt;= 0) { this.selectedIndex = 0; } else { browse(this.options[this.selectedIndex].value);}"><option selected="selected" value="0">Browse:</option><option value="1">By Subject</option><option value="2">By Keyword</option><option value="3">By Audience</option><option value="4">By Education Level</option><option value="5">By Resource Type</option></select></td>
          <td id="TopBarDivider2"><span></span></td>
          <td id="TopBarNavWell3" class="pageRightBorder" width="50">
<input type="text" name="ss" id="sbox" size="13" value=" Search" onclick="javascript:if(this.value==' Search')this.value='';" onblur="javascript:if(this.value=='')this.value=' Search';"/></td>
        </tr>
      </table>
    </form>
  </td>
</tr>
<tr class="metaSlotDivider">
  <td><hr /></td>
</tr>
</tbody>
<!--************************************
    TabsBar Level 1
    ************************************-->

<tbody id="TabsBar1">
<tr>
  <td class="pageLeftBorder pageRightBorder" id="TabsBar1Td">
  <ul><li><a href="http://www.shodor.org/refdesk/home/Last"><img src="http://www.shodor.org/refdesk/media/images/buttons/userhome.gif" border="0" alt="userhome" /></a></li><li><a href="http://www.shodor.org/refdesk/Catalog/Last"><img src="http://www.shodor.org/refdesk/media/images/buttons/catalog.gif" border="0" alt="catalog" /></a></li><li class="select"><a href="http://www.shodor.org/refdesk/Resources/Last"><img src="http://www.shodor.org/refdesk/media/images/buttons/resources_select.gif" border="0" alt="resources" /></a></li><li><a href="http://www.shodor.org/refdesk/UserHelp/"><img src="http://www.shodor.org/refdesk/media/images/buttons/help.gif" border="0" alt="help" /></a></li></ul>
  </td>
</tr>
<tr class="metaSlotDivider">
  <td><hr /></td>
</tr>
</tbody>
<!--************************************
    PageTitle
    ************************************-->

<tbody id="PageTitle">
<tr>
  <td class="pageLeftBorder pageRightBorder">
  	
    <h1>Parallel Programming Examples using MPI</h1>
  </td>
</tr>
<tr class="metaSlotDivider">
  <td><hr /></td>
</tr>
</tbody>
<!--************************************
    PathBar
    ************************************-->

<tbody id="PathBar">
<tr>
  <td class="pageLeftBorder pageRightBorder" id="PathBarTd">
    <a href="/">Shodor</a> &gt; <a href="http://www.shodor.org/refdesk">CSERD</a> &gt; <a href="http://www.shodor.org/refdesk/Resources/">Resources</a> &gt; <a href="http://www.shodor.org/refdesk/Resources/Tutorials/">Tutorials</a> &gt; Parallel Programming Examples using MPI
  </td>
</tr>
<tr class="metaSlotDivider">
  <td><hr /></td>
</tr>
</tbody>
<!--************************************
    TabsBar Level 2
    ************************************-->

<tbody id="TabsBar2">
<tr>
  <td class="pageLeftBorder pageRightBorder" id="TabsBar2Td">
  &nbsp;&nbsp;<a href="index.php">Overview</a>&nbsp;&nbsp;&bull;&nbsp;&nbsp;
<a href="ParamSpace.php">Parameter Space Study</a>&nbsp;&nbsp;&bull;&nbsp;&nbsp;
<a href="Life.php">The Game of Life</a>&nbsp;&nbsp;&bull;&nbsp;&nbsp;
<a href="GalaxSee.php">GalaxSee</a>&nbsp;&nbsp;&bull;&nbsp;&nbsp;
<a href="intermediate.php">Intermediate MPI Examples</a><br /><br />
  </td>
</tr>
<tr class="metaSlotDivider">
  <td><hr /></td>
</tr>
</tbody>
<!--************************************
    ContentWell
    ************************************-->
  <tbody id="ContentWell">
  <tr><td class="pageLeftBorder pageRightBorder" id="ContentWellTd">
  <div align="center">
    <table class="WellWrapper" id="ContentWellWrapper" border="0" cellspacing="0" cellpadding="0">
      <tr>
        
        
    <td id="ContentWellColumn1" valign="top">
      <div class="ContentWell tdFillDiv">
        <div class="contentDiv">
        <div style="float:right;width:100px;border:1px solid gray;padding:5px;">
<a href="http://www.shodor.org/refdesk/Catalog/Item/13">View This Item in the CSERD Catalog</a>
</div><H1>Parallel Programming Examples Using MPI</H1>

<p>...or...

<H2>So you want to use a cluster!</H2>

<P>The purpose of parallel programming is to take one large task
and to break it up into a number of smaller tasks which can be
performed independently. The problem is most complex tasks cannot
be easily divided into tasks which are completely independent of each
other.

<P>Consider, for example, a meeting of scientists discussing plans
to colonize the Moon. You might have one committee discussing habitat construction, another committee discussing hydroponics, a third committee discussing atmospheric recycling, and a fourth committee discussing transport to the moon. The transport committee needs to know how many people and what equipment to transfer. The atmospheric recycling committee probably needs to coordinate with the hydroponics committee. The habitat committee will need to know what resources can be reused and what must be continuously brought from Earth. The transport committee also would likely want to know that information.

<P>Real problems are not just the sum of many small problems, and when you have to break up a large problem into small problems, you need to be able to communicate information between small problems.

<P>The degree to which communication and coordination is required in a parallel program is known as the <b>granularity</b> of the program. <b>Course grain parallelism</b> requires little communication, and <b>fine grain parallelism</b> requires a great deal of communication.

<P>The efficiency of a parallel code is the degree to which you can use all of the processing power available. Codes in which clients spend most of their time waiting to perform a calculation may be better done on a single CPU. Codes with very high network requirements may run better on a single CPU. If t(p) is a measure of the time required to solve a given problem on p processors, the efficiency of a parallel code is given by

<p>e=t(p)/(p*t(1))

<P>We are going to start with three examples which span the range of granularity and incorporate three common numerical techniques. These examples were designed for the MSI HPC Workshops to be run on the "cluster in a suitcase," a small test cluster made up of 1 server and 4 client nodes, all of which are Toshiba laptops running Linux 7.2 and OSCAR. Each client has X enabled so that a "tiled" display can be set up by arranging the laptops next to each other.

<P>The first program is an example of a parameter space study of a Monte Carlo simulation of the game of darts. The model calculates average score for a player whose throw falls within a Gaussian pattern around some aim point. Since the dart board is two dimensional, the grid of aim points makes up a two dimensional parameter space to be studied. Each point in parameter space can be solved completely independently. The parameter space is evenly divided between processors, and each processor performs their own visualization.

<P>The second example is cellular automata arranged in a grid, in this case the Game of Life. You have a two dimensional grid of cells, where each cell is either "alive" or "dead." Cells die out if they are too lonely (less than 2 neighbors) or too crowded (more than three neighbors). Cells are born if they are empty and have exactly three neighbors. The grid can be broken up into sub-grids, but those sub-grids must be able to communicate with each other <b>at the boundaries</b>. Each sub-grid does its own visualization in this example.

<P>The third example is a finite difference integration of N-bodies gravitationally attracted to one another. In studies of cosmology and galactic dynamics, you are dealing with large numbers of objects and every object feels a force from every other object, leading to (n)*(n-1) forces in three dimensions. For large n, the time spent calculating those forces <b>vastly</b> outweighs the time spent doing anything else in the calculation, and efforts at parallelizing the code center only around the force calculation. With p processors, each calculator can calculate n/p forces, but needs to know all n positions. Also, since this is only one piece of the larger code, it is generally arranged so that one code is the coordinator, or server. The server does the standard calculation, and when it comes time to calculate forces, sends out a message to each client code with the data on each n positions. The client codes then calculate n/p forces, and send the information back to the server. The server performs all visualization in this example.

<P><B>Note:</B> The makefiles in the following examples may need to be changed in your system. Typically, you will want to specify the X11 libraries and possibly the math libraries (-lX11 -lm). You will need to give the include directory location and the library directory location for any include files or libraries not in your computers default path (for example, -I/usr/X11R6/include -L/usr/X11R6/lib -lX11 to include the X11 libraries located at /usr/X11R6).

<P><B>Note:</B> Currently, the Life and Parameter Space examples are set up to use the display on the client nodes. If your clients are not set up to display X, you can either run the examples with no visualization (not really helpful for seeing things, but you can do some time trials using the unix "time" command), or you can display all of the windows on the server machine by running "mpirun -x DISPLAY program_name" where program_name is the program you are running. This, however, will slow things down considerably and kind of defeat the point of having a cluster. I'm working on adding a few more display options.  I'll try to get those built-in as soon as possible!

<P>All files are stored as tarred, gzipped directories. Download the files, and extract them with "tar -xzf filename.tgz". (Be sure to substitute the actual filename for "filename.tgz.") "cd" to the directory, edit the Makefile if needed, and "make" the program for your machine. Run the program using mpirun.

<P>Currently for all programs the command line options to the programs are optional, but you need each prior option to use a given option. In other words, for Life the command line options are size and display. If you want to specify to not use the display, you have to give a value for the size. However, you can just give the size if you want the program to decide by default whether or not to use the display.

        </div>
      </div>
    </td>

        
        
        
      </tr>
    </table>
  </div>
</td></tr>
<tr class="metaSlotDivider">
  <td><hr /></td>
</tr></tbody>
<!--************************************
    BottomBar
    ************************************-->
<tbody id="BottomBar"><tr>
<td class="pageLeftBorder pageRightBorder contentTd">
  
  <div id="BottomBarLeftText">&copy;1994-2013 Shodor &nbsp;&nbsp; </div>
</td></tr></tbody>

<!--************************************
	WidthEnforcer
	 ************************************-->
<tbody id="WidthEnforcer"><tr><td>
<table width="700" border="0" cellspacing="0" cellpadding="0">
  <tr><td>&nbsp;</td></tr>
</table>
</td></tr></tbody>
</table>
</body>
</html>