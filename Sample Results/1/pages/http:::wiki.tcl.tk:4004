<!DOCTYPE HTML>
<html lang='en'>
<head>
<title>Combining Fortran and Tcl in one program</title>

	<meta charset="UTF-8">
	<link rel='stylesheet' href='/_css/wikit_screen.css' media='screen' type='text/css' title='With TOC'>
	<link rel='alternate stylesheet' href='/_css/wikit_screen_notoc.css' media='screen' type='text/css' title='Without TOC'>
	<link rel='stylesheet' href='/_css/wikit_print.css' media='print' type='text/css'>
	<link rel='stylesheet' href='/_css/wikit_handheld.css' media='handheld' type='text/css'>
	<link rel='stylesheet' href='/_css/tooltips.css' type='text/css'>

	<script type="text/javascript" src="/_scripts/sh_main.js"></script>
	<script type="text/javascript" src="/_scripts/sh_tcl.js"></script>
	<script type="text/javascript" src="/_scripts/sh_c.js"></script>
	<script type="text/javascript" src="/_scripts/sh_cpp.js"></script>
	<link type="text/css" rel="stylesheet" href="/_css/sh_style.css">

	<link rel='alternate' type='application/rss+xml' title='RSS' href='/rss.xml'>
	<script type='text/javascript'>/* <![CDATA[ */

	    function init() {
		// quit if this function has already been called
		if (arguments.callee.done) return;

		// flag this function so we don't do the same thing twice
		arguments.callee.done = true;

		try {
		    hide_discussions()
		} catch (err) {
		    /* nothing */
		}
	    };

	    /* for Mozilla */
	    if (document.addEventListener) {
		document.addEventListener("DOMContentLoaded", init, false);
	    }

	    // for Internet Explorer (using conditional comments)
	    /*@cc_on @*/
	    /*@if (@_win32)
	    document.write("<script id=__ie_onload defer src=javascript:void(0)><\/script>");
	    var script = document.getElementById("__ie_onload");
	    script.onreadystatechange = function() {
		if (this.readyState == "complete") {
		    init(); // call the onload handler
		}
	    };
	    /*@end @*/
	  
	    /* for other browsers */
	    window.onload = init;
	
/* ]]> */
</script>
	<meta name="verify-v1" content="89v39Uh9xwxtWiYmK2JcYDszlGjUVT1Tq0QX+7H8AD0=">
    </head>
<body onload='sh_highlightDocument();'>

	<div class='container'>
	<div class='header'>
	    <div class='logo'><a href='http://wiki.tcl.tk' class='logo'>wiki.tcl.tk</a><a href='http://wiki.tcl.tk'><img class='logo' alt='' src='http://wiki.tcl.tk/plume.png'></a></div>
	    <div id='title' class='title'><a href='/_/ref?N=4004' title='click to see reference to this page'>Combining Fortran and Tcl in one program</a></div>
	    <div id='updated' class='updated'>Updated 2009-09-17 11:24:43 by <a href='/17985'>jdc</a> <a href='/_/diff?N=4004#diff0' class='delta'>â–²</a></div>
	</div>
    
	    
	    <div id='wrapper'><div id='content'><p></p><a href="/2199">Arjen Markus</a> (7 november 2002) I have written an article on the use of Tcl in a Fortran program. (Fortran Forum, december 2002). Below you will find a fragment of that article, describing a small client-server system for on-line visualisation:<p></p><ul><li>The Fortran program does a calculation and uses Tcl to send the results to a server program</li><li>The server program displays the results in a graphical form</li></ul><p></p>It is meant to demonstrate how easy it is to combine Fortran and Tcl and do novel things with them.<p></p><a href="/3533">AM</a> (1 september 2006) I have set up a project on SourceForge for this: [<a rel="nofollow" href="http://ftcl.sf.net">http://ftcl.sf.net<img src='/ext.png'></a>] and the sources can be found at [<a rel="nofollow" href="http://www.sf.net/projects/ftcl">http://www.sf.net/projects/ftcl<img src='/ext.png'></a>] Developments at the moment:<p></p><ul><li>Make a friendlier build system that require less expertise from the user.</li><li>Setting up extensions in Fortran should be very easy</li><li>(In the longer run) support for derived types</li></ul><hr><p></p>To apply Tcl within a program you need to interact with the run-time system, the Tcl interpreter. This is actually a collection of variables and Tcl routines. Most commonly there is only one interpreter, but there are classes of applications where several are used at once, as each may act quite independently, for instance in client/server systems.<p></p>I created a small library to facilitate the interaction:<p></p><ul><li>One routine, ftcl_start, to initialise the one interpreter that will remain active during the whole program run. It can optionally run a startup script from file.</li><li>A set of routines to set the values of variables in the interpreter (one for each common data type, but via the interface mechanism in Fortran, they present themselves as a single routine, <i>ftcl_set</i>)</li><li>A set of routines to get the values of variables in the interpreter (likewise, externally they are visible as a single routine, <i>ftcl_get</i>).</li><li>One routine to evaluate Tcl scripts (one or more commands; <i>ftcl_script</i>)</li></ul><p></p>With this library I created a small demonstration program, an almost trivial simulation, that provides on-line visualisation of the results:<pre class=''>
 ! Simple program to show the Ftcl library
 !
 program calc
    use FTCL
    implicit none

    integer       :: i
    integer       :: nosteps
    real          :: x
    real          :: y
    real          :: dphi
    real          :: phi

 !
 ! Start the Tcl interpreter, and read the major parameters
 !
    call ftcl_start( &#39;calc.tcl&#39; )
    call ftcl_get( &#39;dphi&#39;, dphi )
    call ftcl_get( &#39;nosteps&#39;, nosteps )

 !
 ! Run the calculation and output the variables
 !
    do i = 0,nosteps
       phi = real(i) * dphi
       x = cos( phi )
       y = sin( phi )
       call ftcl_put( &#39;x&#39;, x )
       call ftcl_put( &#39;y&#39;, y )
       call ftcl_script( &#39;transfer&#39; )
    enddo

    call ftcl_script( &#39;close_transfer&#39; )
    stop
    end</pre><p></p>The interesting feature here is that the Fortran program does not need to know anything about the output mechanism - this is all put into the Tcl routine transfer.<p></p>The script file that is run when initialising the interpreter looks like this:<pre class=''>
 # Define the routines to send data to the server
 #
 proc transfer { } {
     global channel
     global x
     global y
    puts $channel &quot;$x $y&quot;
    flush $channel
 }
 proc close_transfer { } {
    global channel
    close $channel
 }

 #
 # SetUp accepts zero or one arguments, if there is no argument,
 # use the local host.
 #
 proc SetUp  { {host localhost} } {
    global channel
    set port    8085

    set channel [ socket $host $port ]
 }

 SetUp

 #
 # Set the computational parameters
 #

 set nosteps 100
 set dphi    0.1</pre><p></p>The routine SetUp sets up a socket connection to the local host (as there is no host name given). The routine transfer writes the values of the variables x and y to the channel and flushes it to make sure the output is available immediately on the receiving side.<p></p>The receiving side is a somewhat less simple Tcl script that uses the graphical toolkit, Tk, to display the input (the x and y coordinates) graphically:<pre class=''>
 #
 # SetUp the server side (it needs to &quot;listen&quot; to the port)
 #
 proc SetUp  { } {
    set port    8085
    set timeout 60000

    socket -server [list Accept $timeout] $port

    # We run in a graphical (Tk) shell, so an event loop is
    # already available: the next statement is not required.
    # vwait forever
 }

 #
 # Procedure that accepts the client and sets up the connection
 #
 proc Accept { timelimit socket ip args } {
    fconfigure $socket -block false
    fileevent  $socket readable [list DrawInput $socket]
 }

 #
 # Draw the input graphically
 #
 proc DrawInput { socket } {
    global xprev yprev

    if { ! [eof $socket] } {
       gets $socket line
       set x [lindex $line 0]
       set y [lindex $line 1]

       if { $x != &quot;&quot; &amp;&amp; $y != &quot;&quot; } {
          set xc [expr 100+80*$x]
          set yc [expr 100+80*$y]
          .c create line $xprev $yprev $xc $yc -fill black
          set xprev $xc
          set yprev $yc
       }
    }
 }

 #
 # Main code: create a window in which we can draw and start
 # the server .
 #
 global xprev yprev

 set xprev 0.0
 set yprev 0.0

 canvas .c -background white
 pack .c

 SetUp</pre><p></p>The server&#39;s version of SetUp creates a so-called server socket and then enters an event loop (explicitly via the command vwait or automatically because the runtime environment is graphical). The other routines have to do with the handling of incoming requests and incoming data. The result is a very simple picture.<hr><p></p><a href="/3533">AM</a> Thanks to <a href="/74">Clif Flynt</a> this little library is now capable of using Tk within a Fortran program. This means you can build a Fortran program with a very portable GUI ... Just thought to mention this, as the interest in this library has increased a lot over the past couple of months.<p></p><a href="/3533">AM</a> (2 july 2004) One place to find the library is: <a rel="nofollow" href="http://www.digitalsmarties.com/tcl/ftcl.zip">http://www.digitalsmarties.com/tcl/ftcl.zip<img src='/extbrk.png'></a> <a href="/3533">AM</a> (1 september 2006) See above!<hr><p></p><div class='centered'><p></p><table class='wikit_table'><thead><tr><th><a href="/4019">Category Foreign Interfaces</a></th></tr></thead></table><p></p></div><p></p></div></div>
	
	<div id='menu_area'><div id='wiki_menu'><ul id='menu'>
<li><a href='/'>Home</a></li><li><a href='/_/recent'>Recent changes</a></li><li><a href='/Help'>Help</a></li><li><a href='/_/whoami'>WhoAmI</a>/<a href='/_/logout'>Logout</a></li><li><a href='/_/new'>Create new page</a></li><li><a href='/_/random'>Random page</a></li><li><a href='/_/previouspage'>Previous page</a></li><li><a href='/_/nextpage'>Next page</a></li><li><br></li><li><a href='/_/edit?N=4004&amp;A=1'>Add comments</a></li><li><a href='/_/edit?N=4004'>Edit</a></li><li><a href='/_/history?N=4004'>History</a></li><li><a href='/_/summary?N=4004'>Edit summary</a></li><li><a href='/_/ref?N=4004'>References</a></li></ul></div>
	<form method='get' action='/_/search' id='searchform'><input id='searchtxt' onfocus='clearSearch();' onblur='setSearch();' name='S' type='text' value='Search' tabindex='1'>
	    <input name='_charset_' type='hidden' value='' tabindex='2'></form>
    <div class='navigation'><div id='page_toc'></div></div><div class='extra'><div id='wiki_toc'><div class='toc1'>Getting started
<div class='toc2'><a class='toc' href='/299'>What is Tcl?</a></div>
<div class='toc2'><a class='toc' href='/487'>What is Tk?</a></div>
<div class='toc2'><a class='toc' href='/20786'>Getting Tcl/Tk</a></div>
<div class='toc2'><a class='toc' href='/20788'>Getting help</a></div>
<div class='toc2'><a class='toc' href='/20789'>Learning Tcl</a></div>
<div class='toc2'><a class='toc' href='/20790'>Tcl Dev Xchange</a></div>
<div class='toc3'><a class='toc' href='/20791'>About the Wiki</a></div>
</div>
<div class='toc1'>Community
<div class='toc2'><a class='toc' href='/590'>Advocacy</a></div>
<div class='toc2'><a class='toc' href='/828'>Conferences</a></div>
<div class='toc2'><a class='toc' href='/20792'>Chat, news, lists</a></div>
<div class='toc2'><a class='toc' href='/20794'>History</a></div>
<div class='toc2'><a class='toc' href='/17182'>Humor</a></div>
<div class='toc2'><a class='toc' href='/10681'>People</a></div>
<div class='toc3'><a class='toc' href='/20810'>Tcl websites</a></div>
</div>
<div class='toc1'>Reference
<div class='toc2'><a class='toc' href='/1887'>Companies</a></div>
<div class='toc2'><a class='toc' href='/20788'>Getting help</a></div>
<div class='toc2'><a class='toc' href='/20795'>Online books</a></div>
<div class='toc2'><a class='toc' href='/20796'>Online tutorials</a></div>
<div class='toc2'><a class='toc' href='/3109'>Manual pages</a></div>
<div class='toc2'><a class='toc' href='/20797'>Tcl roadmap</a></div>
<div class='toc3'><a class='toc' href='/49'>Acronyms</a></div>
</div>
<div class='toc1'>Tcl software
<div class='toc2'><a class='toc' href='/20798'>Applications</a></div>
<div class='toc2'><a class='toc' href='/20799'>The Tcl core</a></div>
<div class='toc2'><a class='toc' href='/20800'>Development tools</a></div>
<div class='toc2'><a class='toc' href='/11485'>Documentation</a></div>
<div class='toc2'><a class='toc' href='/940'>Extensions</a></div>
<div class='toc3'><a class='toc' href='/20801'>Toys and games</a></div>
</div>
<div class='toc1'>Tcl in the wild
<div class='toc2'><a class='toc' href='/20802'>Major applications</a></div>
<div class='toc2'><a class='toc' href='/20803'>Businesses</a></div>
<div class='toc2'><a class='toc' href='/20804'>Education</a></div>
<div class='toc2'><a class='toc' href='/20805'>Engineering</a></div>
<div class='toc2'><a class='toc' href='/20806'>Government</a></div>
<div class='toc2'><a class='toc' href='/20811'>Medical</a></div>
<div class='toc3'><a class='toc' href='/20809'>Other</a></div>
</div>
</div></div></div>
    
	<div class='footer'><p id='footer'><a href='/'>Home</a> &bull; <a href='/_/recent'>Recent changes</a> &bull; <a href='/Help'>Help</a> &bull; <a href='/_/new'>Create new page</a> &bull; <a href='/_/searchp'>Search</a> &bull; <a href='/_/edit?N=4004&amp;A=1'>Add comments</a> &bull; <a href='/_/edit?N=4004'>Edit</a></p></div>
    </div>
    <script type='text/javascript' src='/_scripts/wiki.js'></script>
</body>
</html>
