<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<meta name="robots" content="index,nofollow">

<title>Python2orPython3 - Python Wiki</title>
<script type="text/javascript" src="/wiki/common/js/common.js"></script>

<script type="text/javascript">
<!--
var search_hint = "Search";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/wiki/europython/css/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="/wiki/europython/css/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="/wiki/europython/css/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="/wiki/europython/css/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/wiki/europython/css/msie.css">
<![endif]-->


<link rel="alternate" title="Python Wiki: Python2orPython3" href="/moin/Python2orPython3?diffs=1&amp;show_att=1&amp;action=rss_rc&amp;unique=0&amp;page=Python2orPython3&amp;ddiffs=1" type="application/rss+xml">


<link rel="Start" href="/moin/FrontPage">
<link rel="Alternate" title="Wiki Markup" href="/moin/Python2orPython3?action=raw">
<link rel="Alternate" media="print" title="Print View" href="/moin/Python2orPython3?action=print">
<link rel="Search" href="/moin/FindPage">
<link rel="Index" href="/moin/TitleIndex">
<link rel="Glossary" href="/moin/WordIndex">
<link rel="Help" href="/moin/HelpOnFormatting">
</head>

<body  lang="en" dir="ltr">
<p class="red"><b>Please note:</b> This wiki is
    currently running in test mode after an attack on January 5 2013. 
    <b>All passwords were reset</b>, so you will have to use the <a
    href="?action=recoverpass">password recovery function</a> to get a new
    password.  <b>To edit wiki pages, please log in first.</b> See the <a
    href="/moin/WikiAttack2013">wiki attack description page</a> for more
    details.  If you find problems, please report them to the <a
    href="mailto:pydotorg-www@python.org">pydotorg-www mailing list</a>. 
    </p> 
<div id="header">

<form id="searchform" method="get" action="/moin/Python2orPython3">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput">Search:</label>
<input id="searchinput" type="text" name="value" value="" size="20"
    onfocus="searchFocus(this)" onblur="searchBlur(this)"
    onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search">
<input id="titlesearch" name="titlesearch" type="submit"
    value="Titles" alt="Search Titles">
<input id="fullsearch" name="fullsearch" type="submit"
    value="Text" alt="Search Full Text">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<div id="logo"><a href="/moin/FrontPage"></a><a href="http://python.org"><img src="http://www.python.org/images/python-logo.gif" alt="Python" ></a><a name="logo"></a></div>
<div id="locationline">


<ul id="pagelocation">
<li><a class="backlink" href="/moin/Python2orPython3?action=fullsearch&amp;context=180&amp;value=linkto%3A%22Python2orPython3%22" rel="nofollow" title="Click to do a full-text search for this title">Python2orPython3</a></li>
</ul>

</div>

<ul id="pagetrail">
<li><a href="/moin/Python2orPython3">Python2orPython3</a></li>
</ul>
</div>

<div id="sidebar">
<div id="star">

</div>
<div class="sidepanel">

<ul id="navibar">
<li class="wikilink"><a href="/moin/FrontPage">FrontPage</a></li><li class="wikilink"><a href="/moin/RecentChanges">RecentChanges</a></li><li class="wikilink"><a href="/moin/FindPage">FindPage</a></li><li class="wikilink"><a href="/moin/HelpContents">HelpContents</a></li><li class="current"><a href="/moin/Python2orPython3">Python2orPython3</a></li>
</ul>

</div>
<div class="sidepanel">
<h1>Page</h1>
<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/moin/Python2orPython3?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/moin/Python2orPython3?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/moin/Python2orPython3">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SlideShow">SlideShow</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

</div>
<div class="sidepanel">
<h1>User</h1>
<ul id="username"><li><a href="/moin/Python2orPython3?action=login" id="login" rel="nofollow">Login</a></li></ul>
</div>
</div>

<div id="page" lang="en" dir="ltr">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><span class="anchor" id="line-2"></span><p class="line867">
<h1 id="Should_I_use_Python_2_or_Python_3_for_my_development_activity.3F">Should I use Python 2 or Python 3 for my development activity?</h1>
<span class="anchor" id="line-3"></span><span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><p class="line867">
<h2 id="What_are_the_differences.3F">What are the differences?</h2>
<span class="anchor" id="line-6"></span><span class="anchor" id="line-7"></span><span class="anchor" id="line-8"></span><p class="line867"><em>Short version: Python 2.x is the status quo, Python 3.x is the present and future of the language</em> <span class="anchor" id="line-9"></span><span class="anchor" id="line-10"></span><span class="anchor" id="line-11"></span><p class="line874">At the time of writing (July 4, 2010), the final 2.7 release is out, with a statement of extended support for this end-of-life release. The 2.x branch will see no new major releases after that. 3.x is under active development and has already seen stable releases, such as the recent 3.2. This means that all recent standard library improvements, for example, are only available in Python 3.x. <span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span><span class="anchor" id="line-14"></span><p class="line874">Guido van Rossum (the original creator of the Python language) decided to clean up Python 2.x properly, with less regard for backwards compatibility than is the case for new releases in the 2.x range. The most drastic improvement is the better Unicode support (with all text strings being Unicode by default) as well as saner bytes/Unicode separation. <span class="anchor" id="line-15"></span><span class="anchor" id="line-16"></span><span class="anchor" id="line-17"></span><p class="line874">Besides, several aspects of the core language (such as print and exec being statements, integers using floor division) have been adjusted to be easier for newcomers to learn and to be more consistent with the rest of the language, and old cruft has been removed (for example, all classes are now new-style, "range()" returns a memory efficient iterable, not a list as in 2.x). <span class="anchor" id="line-18"></span><span class="anchor" id="line-19"></span><span class="anchor" id="line-20"></span><p class="line862">The <a class="http" href="http://docs.python.org/py3k/whatsnew/3.0.html">What's New in Python 3.0</a> document provides a good overview of the major language changes and likely sources of incompatibility with existing Python 2.x code. <span class="anchor" id="line-21"></span><span class="anchor" id="line-22"></span><span class="anchor" id="line-23"></span><p class="line874">However, the broader Python ecosystem has amassed a significant amount of quality software over the years. The downside of breaking backwards compatibility in 3.x is that much of that software doesn't work on 3.x yet. <span class="anchor" id="line-24"></span><span class="anchor" id="line-25"></span><span class="anchor" id="line-26"></span><p class="line867">
<h2 id="Which_version_should_I_use.3F">Which version should I use?</h2>
<span class="anchor" id="line-27"></span><span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span><p class="line874">Which version you ought to use is mostly dependent on what you want to get done. <span class="anchor" id="line-30"></span><span class="anchor" id="line-31"></span><span class="anchor" id="line-32"></span><p class="line874">If you can do exactly what you want with Python 3.x, great! There's a few downsides, such as comparatively limited library support and the fact that most current Linux distributions and Macs are still using 2.x as default, but as a language Python 3.x is definitely ready. As long as actually getting Python 3.x on your user's computers (which ought to be easy, since many people reading this may only be developing something for themselves or an environment they control) and you're writing things where lack of third-party software isn't a major impediment (or where you know the packages you need already support Python 3), Python 3.x is an excellent choice. Also, several distributions have Python 3.x already installed or available for end-users. <span class="anchor" id="line-33"></span><span class="anchor" id="line-34"></span><span class="anchor" id="line-35"></span><p class="line874">However, there are some key issues that may require you to use Python 2 rather than Python 3. <span class="anchor" id="line-36"></span><span class="anchor" id="line-37"></span><span class="anchor" id="line-38"></span><p class="line874">Firstly, if you're deploying to an environment you don't control, that may impose a specific version, rather than allowing you a free selection from the available versions. <span class="anchor" id="line-39"></span><span class="anchor" id="line-40"></span><span class="anchor" id="line-41"></span><p class="line874">Secondly, if you want to use a specific third party package or utility that doesn't yet have a released version that is compatible with Python 3, and porting that package is a non-trivial task, you may choose to use Python 2 in order to retain access to that package. <span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span><span class="anchor" id="line-44"></span><p class="line862">Popular modules that don't yet support Python 3 include <a class="http" href="http://twistedmatrix.com/trac/wiki">Twisted</a> (for networking and other applications), <a class="http" href="http://code.google.com/p/gevent/">gevent</a> (like Twisted, but different), <a class="https" href="https://docs.djangoproject.com/en/dev/faq/install/#can-i-use-django-with-python-3">Django</a> (for building Web sites), and <a class="http" href="http://www.pythonware.com/products/pil/">PIL</a> (for processing images). <span class="anchor" id="line-45"></span><span class="anchor" id="line-46"></span><span class="anchor" id="line-47"></span><p class="line862">Most of these libraries have people working on 3.x support and it's mostly a work in progress in various stages of completion. For some libraries, it's more of a priority than others: Twisted, for example, is mostly focused on production servers, where supporting older versions of Python is important, let alone supporting a new version that includes major changes to the language. (Twisted is a prime example of a major package where <a class="http" href="http://twistedmatrix.com/trac/milestone/Python-3.x">porting to 3.x is far from trivial</a>.) <span class="anchor" id="line-48"></span><span class="anchor" id="line-49"></span><span class="anchor" id="line-50"></span><p class="line862">For creating GUI applications Python 3 already comes with Tkinter, and has been supported by <a href="/moin/PyQt4">PyQt4</a> almost from the day Python 3 was released; <a href="/moin/PySide">PySide</a> added Python 3 support in 2011. GTK+ GUIs can be created with <a class="https" href="https://live.gnome.org/PyGObject">PyGObject</a> which supports Python 3 and is the successor to <a href="/moin/PyGtk">PyGtk</a>. <span class="anchor" id="line-51"></span><span class="anchor" id="line-52"></span><span class="anchor" id="line-53"></span><p class="line862">Many other major packages have been ported to Python 3, including numpy (for number crunching), <a href="/moin/CherryPy">CherryPy</a> and Pyramid (for Web sites) and cx_Freeze (for packaging applications with their dependencies). <span class="anchor" id="line-54"></span><span class="anchor" id="line-55"></span><span class="anchor" id="line-56"></span><p class="line874">Other major modules have now been ported. Some notable which were previously listed on this page as incompatible, have recently been ported to Python 3 are: <span class="anchor" id="line-57"></span><span class="anchor" id="line-58"></span><span class="anchor" id="line-59"></span><ul><li><p class="line891"><a class="http" href="http://www.pylonsproject.org">Pylons</a>' Pyramid now supports Python, including the latest version 3.2. <span class="anchor" id="line-60"></span></li><li><p class="line891"><a class="http" href="http://www.py2exe.org/index.cgi/Tutorial#Step52">py2exe</a> (for packaging your application for Windows users) <span class="anchor" id="line-61"></span><span class="anchor" id="line-62"></span><span class="anchor" id="line-63"></span></li></ul><p class="line874">If you want to use Python 3.x, but you're afraid to because of a dependency, it's probably worthwhile doing some research first. This is a work in progress and this wiki page might be outdated. <span class="anchor" id="line-64"></span><span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span><p class="line862">Even if the <a class="http" href="http://docs.python.org/py3k/">official python documentation</a> and the <a class="http" href="http://docs.python.org/py3k/tutorial/">tutorial</a> have been updated for Python 3, there is still a lot of documentation (including examples) on the Web and in reference books that still use Python 2. This can require some adjustment to make things work with Python 3 instead. <span class="anchor" id="line-67"></span><span class="anchor" id="line-68"></span><span class="anchor" id="line-69"></span><p class="line862">It is worth noting that if you wish to use an alternative implementation of Python such as <a href="/moin/IronPython">IronPython</a>, <a href="/moin/Jython">Jython</a> or <a class="http" href="http://pypy.org">PyPy</a> (or one of the longer list of Python platform or compiler <a href="/moin/PythonImplementations">implementations</a>), Python 3 support is still relatively rare. This may affect you if you are interested in choosing such an implementation for reasons of integration with other systems or for performance. <span class="anchor" id="line-70"></span><span class="anchor" id="line-71"></span><span class="anchor" id="line-72"></span><p class="line862">See the <a href="/moin/Python3PortingStatus">Python 3 Porting Status</a> page for information about which libraries have been, or are in the process of being, ported to Python 3. <span class="anchor" id="line-73"></span><span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span><p class="line867">
<h2 id="But_wouldn.27t_I_want_to_avoid_2.x.3F_It.27s_an_old_language_with_many_mistakes.2C_and_it_took_a_major_version_to_get_them_out.">But wouldn't I want to avoid 2.x? It's an old language with many mistakes, and it took a major version to get them out.</h2>
<span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span><span class="anchor" id="line-78"></span><p class="line862">Well, not entirely. Some of the less disruptive improvements in 3.0 and 3.1 have been backported to 2.6 and 2.7, respectively. For more details on the backported features, see <a class="http" href="http://docs.python.org/release/2.6.4/whatsnew/2.6.html">What's New in Python 2.6</a> and <a class="http" href="http://docs.python.org/dev/whatsnew/2.7.html">What's New in Python 2.7</a>. <span class="anchor" id="line-79"></span><span class="anchor" id="line-80"></span><span class="anchor" id="line-81"></span><p class="line874">A non-exhaustive list of features which are only available in 3.x releases and won't be backported to the 2.x series: <span class="anchor" id="line-82"></span><span class="anchor" id="line-83"></span><span class="anchor" id="line-84"></span><ul><li>strings are Unicode by default <span class="anchor" id="line-85"></span></li><li>clean Unicode/bytes separation <span class="anchor" id="line-86"></span></li><li>exception chaining <span class="anchor" id="line-87"></span></li><li>function annotations <span class="anchor" id="line-88"></span></li><li>syntax for keyword-only arguments <span class="anchor" id="line-89"></span></li><li>extended tuple unpacking <span class="anchor" id="line-90"></span></li><li>non-local variable declarations <span class="anchor" id="line-91"></span><span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span></li></ul><p class="line862">Also, language evolution is not limited to core syntactic or semantic changes. It also regards the standard library, where many improvements are done in 3.x that will not be backported to Python 2. See <a class="http" href="http://docs.python.org/py3k/whatsnew/3.2.html">What's New in Python 3.2</a>, for example. <span class="anchor" id="line-94"></span><span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span><p class="line874">That said, well-written 2.x code can be a lot like 3.x code. That can mean many things, including using new-style classes, not using ancient deprecated arcane incantations of print, using lazy iterators where available, etc. A practical example: good 2.x code will typically use xrange instead of range; xrange was the starting point for the Python 3.x range implementation (although range is even better in Python 3, since it can handle values larger than sys.maxint). <span class="anchor" id="line-97"></span><span class="anchor" id="line-98"></span><span class="anchor" id="line-99"></span><p class="line862">Above all, it is recommended that you focus on writing <em>good</em> code so that 2.x vs 3.x becomes less of an issue. That includes writing full unit test suites, and getting Unicode right. (Python 3.x is significantly less forgiving than 2.x about Unicode versus bytes issues: This is considered to be a good thing, though it makes porting some software packages fairly annoying.) <span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span><span class="anchor" id="line-102"></span><p class="line867">
<h2 id="I_want_to_use_Python_3.2C_but_there.27s_this_tiny_library_I_want_to_use_that.27s_Python_2.x_only._Do_I_really_have_to_revert_to_using_Python_2_or_give_up_on_using_that_library.3F">I want to use Python 3, but there's this tiny library I want to use that's Python 2.x only. Do I really have to revert to using Python 2 or give up on using that library?</h2>
<span class="anchor" id="line-103"></span><span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><p class="line874">Assuming you can't find an alternative package that already supports Python 3, you still have a few options to consider: <span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><span class="anchor" id="line-108"></span><ul><li>Port the library to 3.x. ("Porting" means that you make the library work on 3.x.) <span class="anchor" id="line-109"></span></li><li>It is possible that the library isn't really needed and you can use another one. <span class="anchor" id="line-110"></span></li><li>If that turns out to be really hard, and all your other dependencies do exist in 2.x, consider starting off in 2.x. As has already been explained in other places, good 2.x code will typically make switching painless as soon as every dependency has been successfully ported. <span class="anchor" id="line-111"></span></li><li>Decide if the feature is really that important. Maybe you could drop it? <span class="anchor" id="line-112"></span><span class="anchor" id="line-113"></span><span class="anchor" id="line-114"></span></li></ul><p class="line874">The ideal situation is that you try to port the library to 3.x. Often you'll find someone is already working on this. Even when that's not the case, existing project members will usually appreciate the help, especially as porting often finds bugs in the original software, improving the quality of both the original and the 3.x port. Porting isn't always easy, but it's usually easier than writing your own thing from scratch. <span class="anchor" id="line-115"></span><span class="anchor" id="line-116"></span><span class="anchor" id="line-117"></span><p class="line862">How you're supposed to do porting is explained in <a class="http" href="http://www.python.org/dev/peps/pep-3000/#id9">PEP 3000</a>. The basic idea is to take the 2.x version of the library and use the automated 2to3 converter to create a Python 3 compatible version and check that all the unit tests still pass. If tests fail, modify the original 2.x sources and try again. This approach makes it feasible to support 2.x and 3.x in parallel from a single 2.x code base. This is much easier than trying to maintain separate 2.x and 3.x branches in parallel (just ask the core Python developers about that one - they've been stuck with doing that for a couple of years now!). <span class="anchor" id="line-118"></span><span class="anchor" id="line-119"></span><span class="anchor" id="line-120"></span><p class="line874">The porting situation is more complicated if there are C extension modules involved, but even then it is still likely to be easier than inventing your own equivalent package. <span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span><span class="anchor" id="line-123"></span><p class="line862">There are also some more in depth guides right here on the wiki: <a href="/moin/PortingPythonToPy3k">PortingPythonToPy3k</a>, <a href="/moin/PortingExtensionModulesToPy3k">PortingExtensionModulesToPy3k</a> <span class="anchor" id="line-124"></span><span class="anchor" id="line-125"></span><span class="anchor" id="line-126"></span><p class="line867">
<h2 id="I_decided_to_write_something_in_3.x_but_now_someone_wants_to_use_it_who_only_has_2.x._What_do_I_do.3F">I decided to write something in 3.x but now someone wants to use it who only has 2.x. What do I do?</h2>
<span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span><span class="anchor" id="line-129"></span><p class="line862">In addition to the 2to3 tool that allows 3.x code to be generated from 2.x source code, there's also the <a href="/moin/3to2">3to2</a> tool, which aims to convert 3.x code back to 2.x code. In theory, this should work even better than going the other direction, since 3.x doesn't have as many nasty corner cases for the converter to handle (getting rid of as many of those as possible was one of the main reasons for breaking backward compatibility after all!). However, code which makes heavy use of 3.x only features (such as function annotations or extended tuple unpacking) is unlikely to be converted successfully. <span class="anchor" id="line-130"></span><span class="anchor" id="line-131"></span><span class="anchor" id="line-132"></span><p class="line874">It's probably also fair to say that 3to2 is the road less traveled compared to 2to3 at this stage, so you might come across a few rough edges here and there. However, if you want to write 3.x code, it's definitely an idea worth exploring. <span class="anchor" id="line-133"></span><span class="anchor" id="line-134"></span><span class="anchor" id="line-135"></span><p class="line867"><a class="http" href="http://packages.python.org/six/">six</a> is another tool. <span class="anchor" id="line-136"></span><span class="anchor" id="line-137"></span><span class="anchor" id="line-138"></span><p class="line867">
<h2 id="Other_resources_that_may_help_make_the_choice_between_Python_2_and_Python_3">Other resources that may help make the choice between Python 2 and Python 3</h2>
<span class="anchor" id="line-139"></span><span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><ul><li><p class="line891"><a class="http" href="http://getpython3.com/">Community Web site to promote Python 3</a> <span class="anchor" id="line-142"></span></li><li><p class="line862">Nick Efford has some specific comments in relation to teaching programming with Python 3: <a class="http" href="http://www.comp.leeds.ac.uk/nde/papers/teachpy3.html">http://www.comp.leeds.ac.uk/nde/papers/teachpy3.html</a> <span class="anchor" id="line-143"></span></li><li><p class="line862">Mark Pilgrim has written a Python 3 focused version of "Dive Into Python": <a class="http" href="http://getpython3.com/diveintopython3/">http://getpython3.com/diveintopython3/</a> <span class="anchor" id="line-144"></span></li><li><p class="line862">Swaroop C H has updated "A Byte of Python" to use Python 3, while keeping the last Python 2 based version available: <a class="http" href="http://www.swaroopch.com/notes/Python">http://www.swaroopch.com/notes/Python</a> <span class="anchor" id="line-145"></span></li><li><p class="line862">"What an <a href="/moin/IronPython">IronPython</a> user should know about Python 3": <a class="http" href="http://www.itworld.com/development/104506/python-3-and-ironpython">http://www.itworld.com/development/104506/python-3-and-ironpython</a> <span class="anchor" id="line-146"></span></li><li><p class="line891"><a href="/moin/PyCon">PyCon</a> Ireland 2010 included a talk by Paul Barry entitled "Head First into Python 3" and is available here: <a class="http" href="http://vimeo.com/groups/pyconireland/videos/14354395">http://vimeo.com/groups/pyconireland/videos/14354395</a> - Paul has a follow-up talk from <a href="/moin/PyCon">PyCon</a> Ireland 2011 entitled "What's the scoop with Python 3?" where he talks more about the (lack of) Python 3 adoption within the community, available here: <a class="http" href="http://vimeo.com/groups/pyconireland/videos/31071871">http://vimeo.com/groups/pyconireland/videos/31071871</a> <span class="anchor" id="line-147"></span></li><li><p class="line862">Mark Summerfield has written a 4 page PDF summarizing the differences between Python 2 and 3: <a class="http" href="http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/promotions/python/python2python3.pdf">Moving from Python 2 to Python 3</a> <span class="anchor" id="line-148"></span></li><li><p class="line862">Wesley Chun has written a couple of Python 3 articles: <a class="http" href="http://www.informit.com/articles/article.aspx?p=1328795">Python 3: the Evolution of a Programming Language (Mar 2009)</a> and <a class="http" href="http://www.informit.com/articles/article.aspx?p=1439189">Python's "New" Division: Python 2 Versus Python 3 (Jan 2010)</a> <span class="anchor" id="line-149"></span></li><li><p class="line862">Wesley Chun's <a class="http" href="http://us.pycon.org/2010/conference/schedule/event/29">Python 3: the Next Generation</a> talk &amp; slides (<a href="/moin/PyCon">PyCon</a>, Feb 2010) <span class="anchor" id="line-150"></span></li><li><p class="line862">James Bennett wrote an interesting article discussing <a class="http" href="http://www.b-list.org/weblog/2008/dec/05/python-3000/">why Python 3.0 exists at all</a> <span class="anchor" id="line-151"></span></li><li><p class="line891"><a class="http" href="http://washort.twistedmatrix.com/2010/11/unicode-in-python-and-how-to-prevent-it.html">how to get Unicode versus bytes semantics in 2.x similar to the ones in 3.x</a> (preventing implicit encoding and decoding, while keeping useful features, such as str.split/bytes.split <span class="anchor" id="line-152"></span><span class="anchor" id="line-153"></span><span class="anchor" id="line-154"></span></li></ul><p class="line867">
<h2 id="Footnotes">Footnotes</h2>
<span class="anchor" id="bottom"></span></div><p id="pageinfo" class="info" lang="en" dir="ltr">Python2orPython3  (last edited 2012-10-16 01:32:20 by <span title="???">JulianBerman</span>)</p>

<div id="pagebottom"></div>
</div>


<div id="footer">
<ul id="credits">
<li><a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a></li><li><a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a></li><li><a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a></li><li><a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a></li>
</ul>


</div>
</body>
</html>

