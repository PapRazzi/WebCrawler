<!DOCTYPE html>
<html lang="en-GB">
	<head>
		<meta charset="utf-8" />
		<title>Preview of the new features in Ruby 2.0.0</title>
		<meta name="viewport" content="width=device-width; initial-scale=1.0,maximum-scale=1,minimum-scale=1,user-scalable=no">
		<meta name="title" content="Preview of the new features in Ruby 2.0.0"/>
		
		
		<script type="text/javascript" src="http://use.typekit.com/vwd8eon.js"></script>
		<script type="text/javascript">try{Typekit.load();}catch(e){}</script>
		<link rel="shortcut icon" href="/favicon.ico" type="image/ico" />
		<link rel="stylesheet" href="/stylesheets/Default.css" media="all" />
		<link rel="stylesheet" href="/stylesheets/retina.css" media="only screen and (-webkit-min-device-pixel-ratio: 2)">
		<link rel="stylesheet" href="/stylesheets/syntax.css" media="all" />
    <noscript><link rel="stylesheet" href="/stylesheets/NoScript.css" media="all" /></noscript>
		<!--[if IE 8]><link rel="stylesheet" href="/stylesheets/IE8.css" media="all" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/stylesheets/IE7.css" media="all" /><![endif]-->
    <link rel="stylesheet" href="/stylesheets/Print.css" media="print" />

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
		<script src="/javascripts/jquery-extended-selectors.js"></script>
		<!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
		<!--[if (gte IE 6)&(lte IE 8)]><script src="/javascript/selectivizr.js"></script><![endif]-->
		<link rel="alternate" type="application/rss+xml" title="globaldev RSS" href="http://feeds.feedburner.com/globaldev" />
		<script type="text/javascript">
			 var _gaq = _gaq || [];
			 _gaq.push(['_setAccount', 'UA-3965813-28']);
			 _gaq.push(['_setDomainName', 'globaldev.co.uk']);
			 _gaq.push(['_setAllowLinker', true]);
			 _gaq.push(['_trackPageview']);

			(function() {
				var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
				ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();
		</script>
	</head>
	<body>
		<div id="outer-bg">
			<noscript>
				<p id="no-js">For full functionality to work on this website and get the best experience, please make sure JavaScript is enabled.</p>
			</noscript>
			<div id="wrapper">
				<header role="banner">
					<div class="inner-wrapper">
						<nav id="top-bar">
							<ul>
								<li><a href="http://www.globalpersonals.co.uk/contact-us">Contact us</a></li>
								<li class="global-personals"><a href="http://www.globalpersonals.co.uk/">Global Personals</a></li>
							</ul>
						</nav>
						<h1><a href="/">globaldev</a></h1>
						<nav role="navigation">
							<h1><a href="#">Menu</a></h1>
							<ul>
								<li class=""><a href="/about-us/">About us</a></li>
								<li class=""><a href="/blog/">Blog</a></li>
								<li class=""><a href="/team/">Team</a></li>
								<li class=""><a href="/jobs/">Careers</a></li>
								<li class=""><a href="/projects/">Open source</a></li>
							</ul>
						</nav>
					</div>
				</header>
				<div id="content-wrapper">
					<div class="inner-wrapper">
						<article role="main">
	<header>
		<h1>Preview of the new features in Ruby 2.0.0</h1>
		
		<div class="meta">
			<time datetime="2012-11-02T00:00:00-07:00">Posted: 02 November 2012</time>
			
			By: <a href="/team/#matsadler">Mat Sadler</a>

			<div class="tags">
				<p>Tags:</p>
				
				<ul>
					
						<li>ruby</li>
					
				</ul>
			</div>
		</div>
		<div class="social">
			<a href="https://twitter.com/share" class="twitter-share-button" data-via="globaldev">Tweet</a>
		</div>
	</header>
	<p>A preview version of the next major release of Ruby was <a href='http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-dev/46348'>announced</a> at RubyConf by Matz this week, with some great new language features. We take a swing through some of the highlights below.</p>

<h2 id='refinements'>Refinements</h2>

<p>If you create a namespaced refinement:</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>module</span> <span class='nn'>NumberQuery</span>
  <span class='n'>refine</span> <span class='nb'>String</span> <span class='k'>do</span>
    <span class='k'>def</span> <span class='nf'>number?</span>
      <span class='n'>match</span><span class='p'>(</span><span class='sr'>/^[1-9][0-9]+$/</span><span class='p'>)</span> <span class='p'>?</span> <span class='kp'>true</span> <span class='p'>:</span> <span class='kp'>false</span>
    <span class='k'>end</span>
  <span class='k'>end</span>
<span class='k'>end</span>
</code></pre></div>
<p>It&#8217;s not available outside that namespace</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>begin</span>
  <span class='s2'>&quot;123&quot;</span><span class='o'>.</span><span class='n'>number?</span>
<span class='k'>rescue</span> <span class='o'>=&gt;</span> <span class='n'>e</span>
  <span class='nb'>p</span> <span class='n'>e</span>   <span class='c1'>#=&gt; #&lt;NoMethodError: undefined method `number?&#39; for &quot;123&quot;:String&gt;</span>
<span class='k'>end</span>
</code></pre></div>
<p>But it is inside!</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>module</span> <span class='nn'>NumberQuery</span>
  <span class='nb'>p</span> <span class='s2'>&quot;123&quot;</span><span class='o'>.</span><span class='n'>number?</span>   <span class='c1'>#=&gt; true</span>
<span class='k'>end</span>
</code></pre></div>
<p>You can add it to another namespace like so:</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>module</span> <span class='nn'>MyApp</span>
  <span class='n'>using</span> <span class='no'>NumberQuery</span>

  <span class='nb'>p</span> <span class='s2'>&quot;123&quot;</span><span class='o'>.</span><span class='n'>number?</span>   <span class='c1'>#=&gt; true</span>
  <span class='nb'>p</span> <span class='s2'>&quot;foo&quot;</span><span class='o'>.</span><span class='n'>number?</span>   <span class='c1'>#=&gt; false</span>
<span class='k'>end</span>
</code></pre></div>
<h2 id='keyword_arguments'>Keyword arguments</h2>
<div class='highlight'><pre><code class='ruby'><span class='k'>def</span> <span class='nf'>wrap</span><span class='p'>(</span><span class='n'>string</span><span class='p'>,</span> <span class='ss'>before</span><span class='p'>:</span> <span class='s2'>&quot;&lt;&quot;</span><span class='p'>,</span> <span class='ss'>after</span><span class='p'>:</span> <span class='s2'>&quot;&gt;&quot;</span><span class='p'>)</span>
  <span class='s2'>&quot;</span><span class='si'>#{</span><span class='n'>before</span><span class='si'>}#{</span><span class='n'>string</span><span class='si'>}#{</span><span class='n'>after</span><span class='si'>}</span><span class='s2'>&quot;</span> <span class='c1'># no need to retrieve options from a hash</span>
<span class='k'>end</span>

<span class='c1'># optional</span>
<span class='nb'>p</span> <span class='n'>wrap</span><span class='p'>(</span><span class='s2'>&quot;foo&quot;</span><span class='p'>)</span>                                  <span class='c1'>#=&gt; &quot;&lt;foo&gt;&quot;</span>
<span class='c1'># one or the other</span>
<span class='nb'>p</span> <span class='n'>wrap</span><span class='p'>(</span><span class='s2'>&quot;foo&quot;</span><span class='p'>,</span> <span class='ss'>before</span><span class='p'>:</span> <span class='s2'>&quot;#&lt;&quot;</span><span class='p'>)</span>                    <span class='c1'>#=&gt; &quot;#&lt;foo&gt;&quot;</span>
<span class='nb'>p</span> <span class='n'>wrap</span><span class='p'>(</span><span class='s2'>&quot;foo&quot;</span><span class='p'>,</span> <span class='ss'>after</span><span class='p'>:</span> <span class='s2'>&quot;]&quot;</span><span class='p'>)</span>                      <span class='c1'>#=&gt; &quot;&lt;foo]&quot;</span>
<span class='c1'># order not important</span>
<span class='nb'>p</span> <span class='n'>wrap</span><span class='p'>(</span><span class='s2'>&quot;foo&quot;</span><span class='p'>,</span> <span class='ss'>after</span><span class='p'>:</span> <span class='s2'>&quot;]&quot;</span><span class='p'>,</span> <span class='ss'>before</span><span class='p'>:</span> <span class='s2'>&quot;[&quot;</span><span class='p'>)</span>         <span class='c1'>#=&gt; &quot;[foo]&quot;</span>

<span class='c1'># double splat to capture all keyword arguments, or use as hash as keyword</span>
<span class='c1'># arguments</span>
<span class='k'>def</span> <span class='nf'>capture</span><span class='p'>(</span><span class='o'>**</span><span class='n'>opts</span><span class='p'>)</span>
  <span class='n'>opts</span>
<span class='k'>end</span>
<span class='nb'>p</span> <span class='n'>capture</span><span class='p'>(</span><span class='ss'>foo</span><span class='p'>:</span> <span class='s2'>&quot;bar&quot;</span><span class='p'>)</span>                          <span class='c1'>#=&gt; {:foo=&gt;&quot;bar&quot;}</span>

<span class='c1'># keys must be symbols</span>
<span class='n'>opts</span> <span class='o'>=</span> <span class='p'>{</span><span class='ss'>:before</span> <span class='o'>=&gt;</span> <span class='s2'>&quot;(&quot;</span><span class='p'>,</span> <span class='ss'>:after</span> <span class='o'>=&gt;</span> <span class='s2'>&quot;)&quot;</span><span class='p'>}</span>
<span class='nb'>p</span> <span class='n'>wrap</span><span class='p'>(</span><span class='s2'>&quot;foo&quot;</span><span class='p'>,</span> <span class='o'>**</span><span class='n'>opts</span><span class='p'>)</span>                          <span class='c1'>#=&gt; &quot;(foo)&quot;</span>

<span class='c1'># the old hash style syantax is still accepted for keyword arguments</span>
<span class='nb'>p</span> <span class='n'>wrap</span><span class='p'>(</span><span class='s2'>&quot;foo&quot;</span><span class='p'>,</span> <span class='ss'>:before</span> <span class='o'>=&gt;</span> <span class='s2'>&quot;{&quot;</span><span class='p'>,</span> <span class='ss'>:after</span> <span class='o'>=&gt;</span> <span class='s2'>&quot;}&quot;</span><span class='p'>)</span>   <span class='c1'>#=&gt; &quot;{foo}&quot;</span>
</code></pre></div>
<h2 id='id1'><code>Enumerator#lazy</code></h2>

<p>Making an enumerable lazy makes it possible to enumerate infinite collections</p>
<div class='highlight'><pre><code class='ruby'><span class='nb'>require</span> <span class='s2'>&quot;timeout&quot;</span>
<span class='k'>begin</span>
  <span class='n'>timeout</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span><span class='o'>[</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>2</span><span class='p'>,</span><span class='mi'>3</span><span class='o'>].</span><span class='n'>cycle</span><span class='o'>.</span><span class='n'>map</span> <span class='p'>{</span><span class='o'>|</span><span class='n'>x</span><span class='o'>|</span> <span class='n'>x</span> <span class='o'>*</span> <span class='mi'>10</span><span class='p'>}}</span>
<span class='k'>rescue</span> <span class='o'>=&gt;</span> <span class='n'>e</span>
  <span class='nb'>p</span> <span class='n'>e</span>   <span class='c1'>#=&gt; #&lt;Timeout::Error: execution expired&gt;</span>
<span class='k'>end</span>

<span class='nb'>p</span> <span class='o'>[</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>2</span><span class='p'>,</span><span class='mi'>3</span><span class='o'>].</span><span class='n'>lazy</span><span class='o'>.</span><span class='n'>cycle</span><span class='o'>.</span><span class='n'>map</span> <span class='p'>{</span><span class='o'>|</span><span class='n'>x</span><span class='o'>|</span> <span class='n'>x</span> <span class='o'>*</span> <span class='mi'>10</span><span class='p'>}</span><span class='o'>.</span><span class='n'>take</span><span class='p'>(</span><span class='mi'>5</span><span class='p'>)</span><span class='o'>.</span><span class='n'>to_a</span>   <span class='c1'>#=&gt; [10, 20, 30, 10, 20]</span>
</code></pre></div>
<p>A lazy enumerable will evaluate the entire chain for each element at a time, rather than all elements at each stage of the chain, so the following will output at 1 second intervals. Without <code>#lazy</code> all output would come after 3 seconds</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>class</span> <span class='nc'>Foo</span>
  <span class='kp'>include</span> <span class='no'>Enumerable</span>
  <span class='k'>def</span> <span class='nf'>each</span>
    <span class='nb'>sleep</span> <span class='mi'>1</span>
    <span class='k'>yield</span> <span class='mi'>1</span>
    <span class='nb'>sleep</span> <span class='mi'>1</span>
    <span class='k'>yield</span> <span class='mi'>2</span>
    <span class='nb'>sleep</span> <span class='mi'>1</span>
    <span class='k'>yield</span> <span class='mi'>3</span>
  <span class='k'>end</span>
<span class='k'>end</span>

<span class='no'>Foo</span><span class='o'>.</span><span class='n'>new</span><span class='o'>.</span><span class='n'>lazy</span><span class='o'>.</span><span class='n'>map</span> <span class='p'>{</span><span class='o'>|</span><span class='n'>x</span><span class='o'>|</span> <span class='n'>x</span> <span class='o'>*</span> <span class='mi'>10</span><span class='p'>}</span><span class='o'>.</span><span class='n'>each</span> <span class='p'>{</span><span class='o'>|</span><span class='n'>x</span><span class='o'>|</span> <span class='nb'>p</span> <span class='n'>x</span><span class='p'>}</span>
</code></pre></div>
<p>You would think that as the collection is only iterated once <code>#lazy</code> might speed things up, unfortunatly this generally isn&#8217;t the case</p>

<h2 id='id2'><code>Module#prepend</code></h2>
<div class='highlight'><pre><code class='ruby'><span class='k'>module</span> <span class='nn'>A</span>
  <span class='k'>def</span> <span class='nf'>foo</span>
    <span class='s2'>&quot;A&quot;</span>
  <span class='k'>end</span>
<span class='k'>end</span>
</code></pre></div>
<p>In a regular module include, the method in the class overrides the module (module method is available as <code>super</code>)</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>class</span> <span class='nc'>B</span>
  <span class='kp'>include</span> <span class='n'>A</span>

  <span class='k'>def</span> <span class='nf'>foo</span>
    <span class='s2'>&quot;B&quot;</span>
  <span class='k'>end</span>
<span class='k'>end</span>

<span class='nb'>p</span> <span class='n'>B</span><span class='o'>.</span><span class='n'>new</span><span class='o'>.</span><span class='n'>foo</span>   <span class='c1'>#=&gt; &quot;B&quot;</span>
</code></pre></div>
<p>With <code>prepend</code> the module method overides that in the class (in the case the method in the class is available as <code>super</code>)</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>class</span> <span class='nc'>C</span>
  <span class='n'>prepend</span> <span class='n'>A</span>

  <span class='k'>def</span> <span class='nf'>foo</span>
    <span class='s2'>&quot;B&quot;</span>
  <span class='k'>end</span>
<span class='k'>end</span>

<span class='nb'>p</span> <span class='n'>C</span><span class='o'>.</span><span class='n'>new</span><span class='o'>.</span><span class='n'>foo</span>   <span class='c1'>#=&gt; &quot;A&quot;</span>
</code></pre></div>
<h2 id='converting_convention_to_hash_'>Converting convention to Hash: <code>#to_h</code></h2>
<div class='highlight'><pre><code class='ruby'><span class='nb'>p</span><span class='p'>({</span><span class='ss'>:foo</span> <span class='o'>=&gt;</span> <span class='mi'>1</span><span class='p'>}</span><span class='o'>.</span><span class='n'>to_h</span><span class='p'>)</span>   <span class='c1'>#=&gt; {:foo=&gt;1}</span>
<span class='no'>Baz</span> <span class='o'>=</span> <span class='no'>Struct</span><span class='o'>.</span><span class='n'>new</span><span class='p'>(</span><span class='ss'>:foo</span><span class='p'>)</span>
<span class='n'>baz</span> <span class='o'>=</span> <span class='no'>Baz</span><span class='o'>.</span><span class='n'>new</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>)</span>
<span class='nb'>p</span> <span class='n'>baz</span><span class='o'>.</span><span class='n'>to_h</span>            <span class='c1'>#=&gt; {:foo=&gt;1}</span>
</code></pre></div>
<p>So instead of writing something overly strict like:</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>def</span> <span class='nf'>foo</span><span class='p'>(</span><span class='n'>opts</span><span class='p'>)</span>
  <span class='k'>raise</span> <span class='no'>ArgumentError</span><span class='p'>,</span> <span class='s2'>&quot;opts must be a Hash&quot;</span> <span class='k'>unless</span> <span class='n'>opts</span><span class='o'>.</span><span class='n'>is_a?</span><span class='p'>(</span><span class='no'>Hash</span><span class='p'>)</span>
  <span class='c1'># do stuff with opts</span>
<span class='k'>end</span>
</code></pre></div>
<p>We can go with the more versatile:</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>def</span> <span class='nf'>foo</span><span class='p'>(</span><span class='n'>options</span><span class='p'>)</span>
  <span class='k'>if</span> <span class='n'>options</span><span class='o'>.</span><span class='n'>respond_to?</span><span class='p'>(</span><span class='ss'>:to_h</span><span class='p'>)</span>
    <span class='n'>opts</span> <span class='o'>=</span> <span class='n'>options</span><span class='o'>.</span><span class='n'>to_h</span>
  <span class='k'>else</span>
    <span class='k'>raise</span> <span class='no'>TypeError</span><span class='p'>,</span> <span class='s2'>&quot;can&#39;t convert </span><span class='si'>#{</span><span class='n'>options</span><span class='o'>.</span><span class='n'>inspect</span><span class='si'>}</span><span class='s2'> into Hash&quot;</span>
  <span class='k'>end</span>
  <span class='c1'># do stuff with opts</span>
<span class='k'>end</span>
</code></pre></div>
<h2 id='_a_literal_for_symbol_array'><code>%i</code>: a literal for symbol array</h2>
<div class='highlight'><pre><code class='ruby'><span class='nb'>p</span> <span class='o'>%</span><span class='n'>i</span><span class='p'>{</span><span class='n'>hurray</span> <span class='n'>huzzah</span> <span class='n'>whoop</span><span class='p'>}</span>   <span class='c1'>#=&gt; [:hurray, :huzzah, :whoop]</span>
</code></pre></div>
<h2 id='regular_expression_engine_is_changed_to_onigmo'>Regular expression engine is changed to Onigmo</h2>

<p>This is a fork of the Oniguruma regexp engine used by 1.9, with a few more features. More details <a href='https://github.com/k-takata/Onigmo'>here</a>. The new features seem Perl-inspired, with a good reference available <a href='http://perldoc.perl.org/perlre.html'>here</a></p>
<div class='highlight'><pre><code class='ruby'><span class='p'>(?(</span><span class='n'>cond</span><span class='p'>)</span><span class='n'>yes</span><span class='o'>|</span><span class='n'>no</span><span class='p'>)</span>
</code></pre></div>
<p>If <code>cond</code> is matched, then match against <code>yes</code>, if <code>cond</code> is false match against <code>no</code>. <code>cond</code> references a match either by group number or name, or is a look-ahead/behind.</p>

<p>This example only matches a trailing capital if there is a leading capital:</p>
<div class='highlight'><pre><code class='ruby'><span class='n'>regexp</span> <span class='o'>=</span> <span class='sr'>/^([A-Z])?[a-z]+(?(1)[A-Z]|[a-z])$/</span>

<span class='n'>regexp</span> <span class='o'>=~</span> <span class='s2'>&quot;foo&quot;</span>   <span class='c1'>#=&gt; 0</span>
<span class='n'>regexp</span> <span class='o'>=~</span> <span class='s2'>&quot;foO&quot;</span>   <span class='c1'>#=&gt; nil</span>
<span class='n'>regexp</span> <span class='o'>=~</span> <span class='s2'>&quot;FoO&quot;</span>   <span class='c1'>#=&gt; 0</span>
</code></pre></div>

	
	<hr>
	<section class="author-about">
		<h3>About the Author</h3>
		<p></p>
		
			<div class="author-social">
				<a href="https://twitter.com/matsadler" class="twitter-follow-button" data-show-count="false" data-show-screen-name="true">Follow @matsadler</a>
			</div>
		
	</section>
	

	<script>
		!function(d,s,id) {
			var js,fjs=d.getElementsByTagName(s)[0];
			if(!d.getElementById(id)) {
				js=d.createElement(s);js.id=id;
				js.src="//platform.twitter.com/widgets.js";
				fjs.parentNode.insertBefore(js,fjs);
			}
		}(document,"script","twitter-wjs");
	</script>

	
	<hr>
	<div>
		<div id="disqus_thread"></div>
		<script type="text/javascript">
		    var disqus_shortname = 'globaldev'; // required: replace example with your forum shortname

		    /* * * DON'T EDIT BELOW THIS LINE * * */
		    (function() {
		        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		    })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>
	</div>
	
</article> 


<aside role="complementary">
	<section class="panel" id="subscribe">
		<h1>Subscribe</h1>
		<ul>
			<li><a href="http://feeds.feedburner.com/globaldev" class="rss" style="float: left; margin-bottom: 1em;"><img alt="RSS feed icon" src="/images/icons/social/rss-icon.png">Subscribe by RSS</a></li>
		</ul>
	</section>

	<section class="panel" id="twitter">
		<h1>Tweets <img src="/images/twitter-bird.png" alt="Twitter bird" /></h1>
		<ul class="item-list" id="tweets"></ul>
		<a class="cta" href="http://twitter.com/intent/follow?screen_name=globaldev">Follow us on Twitter</a>
	</section>

	<section class="panel variant-a" id="job">
		<h1>Work with us <img src="/images/icons/panel/tree-icon.png" alt="Tree icon" /></h1>
		<ul class="item-list" id="jobs"></ul>
		<a class="cta" href="/jobs/">View all our current jobs</a>
	</section>
</aside>

					</div>
					<img src="/images/rocket.png" alt="Rocket" id="rocket" />
					<img src="/images/skyline.png" alt="Skyline" id="skyline" />
					<img src="/images/kite.png" alt="Kite" id="kite" />
					<img src="/images/trees-and-dog.png" alt="Trees and dog" id="trees" />
					<img src="/images/couple-kissing.png" alt="Couple kissing" id="couple" />
				</div>
			</div>
			
			<footer role="contentinfo">
				<div class="inner-wrapper">
					<nav>
						<ul>
							<li><a href="https://twitter.com/globaldev" class="twitter-follow-button" data-show-count="false">Follow @globaldev</a></li>
						</ul>
						
						<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
					</nav> 
					
					<p id="copyright">&copy; Global Personals Ltd. 2012. All rights reserved.</p>
				</div>
			</footer>
		</div>
		<script src="/javascripts/Global.js"></script>
		<script src="/javascripts/jquery.imagesloaded.js"></script>
		<script src="/javascripts/jquery.cj.slideshow.js"></script>
		<script src="/javascripts/jquery.cj.carousel.js"></script>
		<script src="/javascripts/Home.js"></script>
		
		<script src="/javascripts/latest_tweets.js"></script>
		
		
		<script src="/javascripts/latest_jobs.js"></script>
		
	</body>
</html>
