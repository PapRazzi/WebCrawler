<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <title>Planet Python</title>
  <link media="screen" href="http://www.python.org/styles/screen-switcher-default.css"
     type="text/css" id="screen-switcher-stylesheet" rel="stylesheet" />
  <link rel="stylesheet" type="text/css" media="sc&#82;een" href="http://www.python.org/styles/netscape4.css" />
  <link rel="stylesheet" type="text/css" media="print" href="http://www.python.org/styles/print.css" />
  <link rel="alternate stylesheet" type="text/css" media="screen" href="http://www.python.org/styles/largestyles.css" title="large text" />
  <link media="screen" href="/styles/defaultfonts.css" type="text/css"
      rel="alternate stylesheet" title="default fonts" />
  <script src="/js/iotbs2-key-directors-load.js" type="text/javascript"></script>
  <script src="/js/iotbs2-directors.js" type="text/javascript"></script>
  <script src="/js/iotbs2-core.js" type="text/javascript"></script> 
  <meta name="generator" content="Planet/2.0 +http://www.planetplanet.org" />
  <meta name="keywords"
     content="Python weblog blog blogs blogger weblogger aggregator rss" />
  <meta name="description" content="Recent postings from Python-related blogs." />
  <link rel="alternate" type="application/rss+xml" title="RSS"
     href="rss20.xml" />
</head>

<body>
  <!-- Logo -->
  <h1 id="logoheader">
    <a href="/" id="logolink" accesskey="1"><img id="logo"
src="http://www.python.org/images/python-logo.gif" alt="homepage" border="0" /></a>
  </h1>
  <!-- Skip to Navigation -->
  <div class="skiptonav"><a href="#left-hand-navigation" accesskey="2"><img src="http://www.python.org/images/trans.gif" id="skiptonav" alt="skip to navigation" border="0" /></a></div>
  <div class="skiptonav"><a href="#content-body" accesskey="3"><img src="http://www.python.org/images/trans.gif" id="skiptocontent" alt="skip to content" border="0" /></a></div>

  <div id="content-body">
    <div id="body-main">

<h1 class="pageheading">Planet Python</h1>

<p>Last update: February 15, 2013 03:48 PM





<h2>February 15, 2013</h2>




<hr /><h3 class="post"><a href="http://www.python.org/" title="Python News">Python News</a></h3>


<h4><a href="http://www.python.org/news/index.html#Thu15February201321000200">Python trademark at risk in Europe: We need your help!</a></h4>
<p>
<!--utf-8--><!--0.7-->




<p>The Python Software Foundation is requesting the assistance of anyone in the community who works in a company that has a presence in an EU Community Member State. The Python trademark is at risk, more details are available on the <a class="reference external" href="http://pyfound.blogspot.com/2013/02/python-trademark-at-risk-in-europe-we.html">PSF blog</a>. Thanks.</p></p>
<p>
<em><a href="http://www.python.org/news/index.html#Thu15February201321000200">February 15, 2013 03:43 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.jordan-dimov.com/" title="Jordan Dimov">Jordan Dimov</a></h3>


<h4><a href="http://www.jordan-dimov.com/2013/02/jordans-cheese-selection-for-february-15-2013.html">Jordan's Cheese Selection for February 15, 2013</a></h4>
<p>
This is the fourth issue of a regular series that I started to identify interesting Python modules on the Internet that were recently uploaded or updated. Today's selection includes: funcy 0.3.1 by Alexander Schepanovski. A very nice collection of tools to facilitate functional programming with Python. One of many such...</p>
<p>
<em><a href="http://www.jordan-dimov.com/2013/02/jordans-cheese-selection-for-february-15-2013.html">February 15, 2013 12:36 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.maltheborch.com" title="maltheborch.com">Malthe Borch</a></h3>


<h4><a href="http://www.maltheborch.com/2013/02/hog-that-cpu">Hog that CPU</a></h4>
<p>
<p>Python is single-core, and so to utilize multiple cores, you need to spawn multiple processes.</p>
<p>Each process will start up the interpreter and import the required modules, sharing nothing because it's all dynamic. The memory requirement grows linearly with the number of cores in your machine. This can easily be a hundred megabytes per core.</p>
<p>This currently applies to <a href="http://en.wikipedia.org/wiki/CPython">CPython</a> and <a href="http://pypy.org/">PyPy</a>, but not <a href="http://www.jython.org/">Jython</a> – but the latter is not as fast as PyPy (per core).</p>
<p><a href="http://www.maltheborch.com/2013/02/hog-that-cpu">Keep reading »</a></p></p>
<p>
<em><a href="http://www.maltheborch.com/2013/02/hog-that-cpu">February 15, 2013 10:21 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pyfound.blogspot.com/" title="Python Software Foundation News">Python Software Foundation</a></h3>


<h4><a href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/9QffjSxCJL4/python-trademark-at-risk-in-europe-we.html">Python trademark at risk in Europe: We need your help!</a></h4>
<p>
<span><span>For anyone who works in a company that has an office in a EU Community member state, we need your help.</span></span><br />
<span><span><br /></span></span>
<span><span>There is a company in the UK that is trying to trademark the use of the term "Python" for all software, services, servers... pretty much anything having to do with a computer. Specifically, it is the company that got a hold on the&nbsp;</span>python.co.uk<span>&nbsp;domain 13 years ago. At that time we weren't looking a lot at trademark issues, and so we didn't get that domain.</span><br /><br /><span>This hasn't been an issue since then because the&nbsp;</span>python.co.uk<span>&nbsp;domain has, for most of its life, just forwarded its traffic on to the parent companies,&nbsp;</span>veber.co.uk<span>&nbsp;and&nbsp;</span>pobox.co.uk<span>. Unfortunately, Veber has decided that they want to start using the name "Python" for their server products.</span><br /><br /><span>We contacted the owners of&nbsp;</span>python.co.uk<span>&nbsp;repeatedly and tried to discuss the matter with them. They blew us off and responded by filing the community trademark application claiming the exclusive right to use "Python" for software, servers, and web services - everywhere in Europe.&nbsp;</span><br /><br /><span>We got legal counsel in the UK and we (the <a href="http://www.python.org/psf/">PSF</a>) are opposing the community trademark application, but our own trademark application hasn't yet matured. Accordingly, we are going with the trademark rights we have developed through using "Python" consistently over the past 20 years.&nbsp;</span><br /><br /><span>According to our London counsel, some of the best pieces of evidence we can submit to the European trademark office are official letters from well-known companies "using PYTHON branded software in various member states of the EU" so that we can "obtain independent witness statements from them attesting to the trade origin significance of the PYTHON mark in connection with the software and related goods/services." We also need evidence of use throughout the EU.</span><br /><br /><b><span>What can you do?</span></b><br /><span>1. Do you work for a company that uses Python? Are in the EU, do you hire in the EU, or do you have an office in the EU? Could you write a letter on company letterhead that we can forward to our EU counsel?&nbsp;</span><br /><br /><span>We would want:&nbsp;</span></span><br />
<ol>
<li><span>just a brief description of how Python is used at your company,&nbsp;</span></li>
<li><span>how your company looks for and recognizes "Python" as only coming from the PSF, and&nbsp;</span></li>
<li><span>your view that another company using term Python to refer to services, software, and servers would be confusing</span></li>
</ol>
<span><span>This doesn't need to be long - just a couple of paragraphs, but we would want any description of how you use Python for software, web hosting, Internet servers, VPNs, design and development of computer hardware or software, hosting websites, renting servers (like Openstack), or backup services. For those who are interested the specific class descriptions are at the bottom of this message. [1][2]</span><br /><br /><span>You can send a PDF copy of the letter to&nbsp;</span><a href="mailto:psf-trademarks@python.org" target="_blank">psf-trademarks@python.org</a><br /><br /><span>2. Do you have, or know of, anything that was published in the EU and uses "Python" to refer to Python-the-language? Can we get copies, pictures, or scans? This includes:</span></span><br />
<ul>
<li><span>Books</span></li>
<li><span>Pamphlets</span></li>
<li><span>Conference programs or talks</span></li>
<li><span>Job listings</span></li>
<li><span>Magazines or other publications</span></li>
<li><span>Prospectuses</span></li>
</ul>
<span><span>You can send a PDF scan of the materials to&nbsp;</span><a href="mailto:psf-trademarks@python.org" target="_blank">psf-trademarks@python.org</a></span><br />
<span><br />
</span> <span><span>3. You can also help protect the Python intellectual property with financial support.</span><br /><br /><span>Since the costs of a trademark opposition are in the range of tens of thousands of dollars, we will need&nbsp;</span><span>to find a way to refinance the legal costs of the opposition.</span><br /><br /><span>Please consider donating to the Python Software Foundation at:</span><br /><br /><span>&nbsp; &nbsp;&nbsp;</span><a href="http://www.python.org/psf/donations/" target="_blank">http://www.python.org/psf/donations/</a><br /><br /><span>or get in touch with me directly.</span><br /><br /><span>This is the first time the PSF has to take legal action to protect Python's intellectual property. Please do consider&nbsp;</span><span>helping the PSF in any way you can. The threat is real and can potentially harm your business in&nbsp;</span><span>Europe, especially if you are in the web hosting business and provide Python as part of your hosting plans.</span></span><br />
<hr />
<span><br /><span>Please let me know if there are any questions that I can answer. If you know someone who might have this information, please feel free to forward this.&nbsp;</span><br /><br /><span>Thanks,&nbsp;</span><br /><br /><span>Van Lindberg,&nbsp;</span></span><span>Chairman</span><br />
<span><span><a href="mailto:van@python.org">van@python.org</a></span></span><br />
<span>Python Software Foundation</span><br />
<span><br />
</span> <span><br /><span>[1] Class 9 - Computer software; Servers for web hosting; VPN [virtual private network] hardware; Internet servers; Internet servers.</span><br /><br /><span>[2] Class 42 - Design and development of computer hardware and software; Website hosting services; Hosting computer sites [websites]; Hosting the websites of others; Hosting of websites; Hosting the web sites of others on a computer server for a global computer network; Hosting websites on the Internet; Hosting the web sites of others; Web hosting services; Hosting of digital content, namely, on-line journals and blogs; Application service provider [ASP], namely, hosting computer software applications of others; Website hosting services; Hosting of digital content on the internet; Hosting of web sites; Hosting web sites; Hosting web sites for others; Hosting websites of others; Hosting of internet sites; Hosting the computer sites (web sites) of others; Web site hosting services; Hosting computer sites [web sites]; Hosting web sites of others; Rental of web servers; Servers (rental of web-); Servers (Rental of Web -).</span></span><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=9QffjSxCJL4:GZy_X9gReL8:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?d=yIl2AUoC8zA" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=9QffjSxCJL4:GZy_X9gReL8:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=9QffjSxCJL4:GZy_X9gReL8:-BTjWOF_DHI" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=9QffjSxCJL4:GZy_X9gReL8:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=9QffjSxCJL4:GZy_X9gReL8:F7zBnMyn0Lo" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=9QffjSxCJL4:GZy_X9gReL8:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=9QffjSxCJL4:GZy_X9gReL8:V_sGLiPBpWU" border="0" /></a>
</div><img src="http://feeds.feedburner.com/~r/PythonSoftwareFoundationNews/~4/9QffjSxCJL4" height="1" width="1" /></p>
<p>
<em><a href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/9QffjSxCJL4/python-trademark-at-risk-in-europe-we.html">February 15, 2013 10:10 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://raspberry-python.blogspot.com/search/label/python" title="Raspberry Pi Python Adventures">François Dion</a></h3>


<h4><a href="http://raspberry-python.blogspot.com/2013/02/python-in-europe.html">Python in Europe</a></h4>
<p>
<h3>From: </h3><a href="http://pyfound.blogspot.com/2013/02/python-trademark-at-risk-in-europe-we.html">Python trademark at risk in Europe</a><br /><br /><blockquote class="tr_bq">"<span><span>For anyone who works in a company that has an office in a EU Community member state, we need your help."</span></span></blockquote><br /><span><span>So if you work for a company who uses Python, in Europe, do follow the link above and read up about how a company is trying to hijack the Python name, and what you can do to help.</span></span><br /><span><span><br /></span></span>François<br /><a href="http://www.twitter.com/f_dion">@f_dion</a></p>
<p>
<em><a href="http://raspberry-python.blogspot.com/2013/02/python-in-europe.html">February 15, 2013 09:10 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://jugad2.blogspot.com/search/label/python" title="jugad2 - Vasudev Ram on software innovation">Vasudev Ram</a></h3>


<h4><a href="http://jugad2.blogspot.com/2013/02/python-trademark-at-risk-in-europe-help.html">Python trademark at risk in Europe - help if you can</a></h4>
<p>
<p><a href="http://pyfound.blogspot.ca/2013/02/python-trademark-at-risk-in-europe-we.html?utm_source=feedburner&utm_medium=twitter&utm_campaign=Feed:+PythonSoftwareFoundationNews+(Python+Software+Foundation+News)&m=1">Python Software Foundation News: Python trademark at risk in Europe: We need your help!</a></p><p>Hacker News thread about it, including statements&#160; by VanL, the current PSF Chairman:</p><p>http://news.ycombinator.com/item?id=5221093</p><p>Update: Interesting that someone from Microsoft (who works on Python) offered MS's legal help on this:</p><p>http://news.ycombinator.com/item?id=5222536<br /></p><div class="blogger-post-footer"><a href="http://www.dancingbison.com">Vasudev Ram</a>
<br /></div></p>
<p>
<em><a href="http://jugad2.blogspot.com/2013/02/python-trademark-at-risk-in-europe-help.html">February 15, 2013 04:34 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://rbtcollins.wordpress.com" title="Code happens » Python">Robert Collins</a></h3>


<h4><a href="http://rbtcollins.wordpress.com/2013/02/15/more-subunit-needs/">More subunit needs</a></h4>
<p>
<p>Of course, as happens sadly often, the scope creeps..</p>
<h3>Additional pain points</h3>
<p>Zope&#8217;s test runner runs things that are not tests, but which users want to know about &#8211; &#8216;layers&#8217;. At the moment these are reported as individual tests, but this is problematic in a couple of ways. Firstly, the same &#8216;test&#8217; runs on multiple backend runners, so timing and stats get more complex. Secondly, if a layer fails to setup or teardown, tools like testrepository that have watched the stream will think a test failed, and on the next run try to explicitly run that &#8216;test&#8217; &#8211; but that test doesn&#8217;t really exist, so it won&#8217;t run [unless an actual test that needs the layer is being run].</p>
<p>Openstack uses python coverage to gather coverage statistics during test runs. Each worker running tests needs to gather and return such statistics. The current subunit protocol has no space to hand this around, without it pretending to be a test [see a pattern here?]. And that has the same negative side effect &#8211; test runners like testrepository will try to run that &#8216;test&#8217;. While testrepository doesn&#8217;t want to know about coverage itself, it would be nice to be able to pass everything around and have a local hook handle the aggregation of that data.</p>
<p>The way TAP is reflected into subunit today is to mangle each tap &#8216;test&#8217; into a subunit &#8216;test&#8217;, but for full benefits subunit tests have a higher bar &#8211; they are individually addressable and runnable. So a TAP test script is much more equivalent to a subunit test. A similar concept is landing in Python&#8217;s unittest soon &#8211; &#8216;subtests&#8217; &#8211; which will give very lightweight additional assertions within a larger test concept. Many C test runners that emit individual tests as simple assertions have this property as well &#8211; there may be 5 or 10 executables each with dozens of assertions, but only the executables are individually addressable &#8211; there is no way to run just one assertion from an executable as a &#8216;test&#8217;. It would be nice to avoid the friction that currently exists when dealing with that situation.</p>
<h3>Minimum requirements to support these</h3>
<p>Layers can be supported via timestamped stdout output, or fake tests. Neither is compelling, as the former requires special casing in subunit processors to data mine it, and the latter confuses test runners.  A way to record something that is structured like a test (has an id &#8211; the layer, an outcome &#8211; in progress / ok / failed, and attachment data for showing failure details) but isn&#8217;t a test would allow the data to flow around without causing confusion in the system.</p>
<p>TAP support could change to just show the entire output as progress on one test and then fail or not at the end. This would result in a cognitive mismatch for folk from the TAP world, as TAP runners report each assertion as a &#8216;test&#8217;, and this would be hidden from subunit. Having a way to record something that is associated with an actual test, and has a name, status, attachment content for the TAP comments field &#8211; that would let subunit processors report both the addressable tests (each TAP script) and the individual items, but know that only the overall scripts are runnable.</p>
<p>Python subtests could use a unique test for each subtest, but that has the same issue has layers. Python will ensure a top level test errors if a subtest errors, so strictly speaking we probably don&#8217;t need an associated-with concept, but we do need to be able to say that a test-like thing happened that isn&#8217;t actually addressable.</p>
<p>Coverage information could be about a single test, or even a subtest, or it could be about the entire work undertaken by the test process. I don&#8217;t think we need a single standardised format for Coverage data (though that might be an excellent project for someone to undertake).  It is also possible to overthink things <img src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> . We have the idea of arbitrary attachments for tests. Perhaps arbitrary attachments outside of test scope would be better than specifying stdout/stderr as specific things. On the other hand stdout and stderr are well known things.</p>
<h3>Proposal version 2</h3>
<p>A packetised length prefixed binary protocol, with each packet containing a small signature, length, routing code, a binary timestamp in UTC, a set of UTF8 tags (active only, no negative tags), a content tag – one of (estimate + number, <del>stdin, stdout, stderr,</del> <strong>file</strong>, test), test-id, runnable, test-status (one of exists/inprogress/xfail/xsuccess/success/fail/skip), an attachment name, mime type, a last-block marker and a block of bytes.</p>
<p>The std/stdout/stderr content tags are gone, replaced with file. The names stdin,stdout,stderr can be placed in the attachment name field to signal those well known files, and any other files that the test process wants to hand over can be simply embedded. Processors that don&#8217;t expect them can just pass them on.</p>
<p>Runnable is a boolean, indicating whether this packet is describing a test that can be executed deliberately (vs an individual TAP assertion, Python sub-test etc). This permits describing things like zope layers which are top level test-like things (they start, stop and can error) though they cannot be run.. and it doesn&#8217;t explicitly model the setup/teardown aspect that they have. Should we do that?</p>
<p>Testid is for identifying tests. With the runnable flag to indicate whether a test really is a test, subtests can just be namespaced by the generator &#8211; reporters can choose whether to be naive and report every &#8216;test&#8217;, or whether to use simple string prefix-with-non-character-seperator to infer child elements.</p>
<h3>Impact on Python API</h3>
<p>If we change the API to:</p>
<pre>class TestInfo(object):
    id = unicode
    status = ('exists', 'inprogress', 'xfail', 'xsuccess', 'success', 'fail', 'error', 'skip')
    runnable = boolean

class StreamingResult(object):
    def startTestRun(self):
        pass
    def stopTestRun(self):
        passs
    def estimate(self, count, route_code=None, timestamp=None):
        pass
    def file(self, name, bytes, eof=False, mime=None, test_info=None, route_code=None, timestamp=None):
        """Inform the result about the contents of an attachment."""
    def status(self, test_info, route_code=None, timestamp=None):
        """Inform the result about a test status with no attached data."""</pre>
<p>This would permit the full semantics of a subunit stream to be represented I think, while being a narrow interface that should be easy to implement.</p>
<p>Please provide feedback! I&#8217;ll probably start implementing this soon.</p>
<br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/rbtcollins.wordpress.com/359/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rbtcollins.wordpress.com/359/" /></a> <img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=rbtcollins.wordpress.com&blog=9305600&post=359&subd=rbtcollins&ref=&feed=1" width="1" height="1" /></p>
<p>
<em><a href="http://rbtcollins.wordpress.com/2013/02/15/more-subunit-needs/">February 15, 2013 01:31 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://nedbatchelder.com/blog" title="Ned Batchelder's blog">Ned Batchelder</a></h3>


<h4><a href="http://nedbatchelder.com/blog/201302/hunting_a_random_bug.html">Hunting a random() bug</a></h4>
<p>
<p>At <a class="offsite" href="http://edx.org">edX</a>, we have Python behind the scenes in
        courses to initialize the state of problems presented to students.
        Often, these problems are randomized so that different students will
        see different details in quantitative problems, but each student's
        random seed is saved so that the student will see the same problem
        if they revisit the page.</p><p>The seed is used to seed the random module before executing any chunk of
        course Python, so that you can simply use the random module and know
        that you'll get an appropriate value.</p><p>Today I found code like this in a course:</p><blockquote class="code"><tt><span class="kn">import</span>&#xA0;<span class="nn">q</span>
<br /><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="n">the_seed</span><span class="p">)</span>
<br /><span class="c">#&#xA0;...&#xA0;generate&#xA0;the&#xA0;problem&#xA0;...</span>
<br /></tt></blockquote><p>My task was to refactor how information flowed around, and the_seed
        wasn't going to be available, so I asked why the code was like this.
        It seemed odd, because the random module had just been seeded before
        this code was invoked, so why had the author bothered to re-seed the
        module with the same seed?</p><p>The answer was that it was a mysterious bug from months ago where the
        first time the code was run, it would produce a different result than
        any other time, and the re-seeding solved it.  The q import seemed to
        be messing with the random seed, but only the first time.</p><p>The "only first time" clue pointed to it being code that is run on
        import.  Remember, Python modules are just a series of statements, and
        when you import a module, it really executes all the statements.
        There's no "import mode" that just collects function definitions.  If
        you write a statement with a side effect at the top level of a module,
        that side effect will happen when you import the module.</p><p>But statements in module are only executed the first time the module is
        imported in a process.  Subsequent imports simply produce another
        reference to the existing module object.  Everything pointed to a
        statement running during import which stomped on the random module.</p><p>The q module imported a number of other modules, including numpy and
        sympy.  But why would importing a module re-seed the random module?</p><p>A little experimenting showed that sympy was at fault here:</p><blockquote class="code"><tt><span class="n">Python</span>&#xA0;<span class="mf">2.7</span><span class="o">.</span><span class="mi">3</span>&#xA0;<span class="p">(</span><span class="n">default</span><span class="p">,</span>&#xA0;<span class="n">Aug</span>&#xA0;&#xA0;<span class="mi">1</span>&#xA0;<span class="mi">2012</span><span class="p">,</span>&#xA0;<span class="mo">05</span><span class="p">:</span><span class="mi">16</span><span class="p">:</span><span class="mo">07</span><span class="p">)</span>&#xA0;
<br /><span class="p">[</span><span class="n">GCC</span>&#xA0;<span class="mf">4.6</span><span class="o">.</span><span class="mi">3</span><span class="p">]</span>&#xA0;<span class="n">on</span>&#xA0;<span class="n">linux2</span>
<br /><span class="n">Type</span>&#xA0;<span class="s">&quot;help&quot;</span><span class="p">,</span>&#xA0;<span class="s">&quot;copyright&quot;</span><span class="p">,</span>&#xA0;<span class="s">&quot;credits&quot;</span>&#xA0;<span class="ow">or</span>&#xA0;<span class="s">&quot;license&quot;</span>&#xA0;<span class="k">for</span>&#xA0;<span class="n">more</span>&#xA0;<span class="n">information</span><span class="o">.</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="c">#&#xA0;Some&#xA0;baseline&#xA0;data</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="nn">random</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
<br /><span class="mf">0.5219839097124932</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
<br /><span class="mf">0.8066907771186791</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
<br /><span class="mf">0.9604947743238768</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
<br /><span class="mf">0.2896253777644655</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="c">#&#xA0;Re-seed,&#xA0;and&#xA0;import&#xA0;sympy</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="nn">sympy</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
<br /><span class="mf">0.8066907771186791</span>
<br /><span class="o">&gt;&gt;&gt;</span>
<br /></tt></blockquote><p>Looking at the values, after importing sympy, we've skipped ahead one
        number in our random sequence.  So sympy isn't re-seeding the generator,
        it's consuming a random number.</p><p>To find out where, we resorted to a monkey-patching trick:  Replace
        random.random with a booby-trap:</p><blockquote class="code"><tt><span class="n">Python</span>&#xA0;<span class="mf">2.7</span><span class="o">.</span><span class="mi">3</span>&#xA0;<span class="p">(</span><span class="n">default</span><span class="p">,</span>&#xA0;<span class="n">Aug</span>&#xA0;&#xA0;<span class="mi">1</span>&#xA0;<span class="mi">2012</span><span class="p">,</span>&#xA0;<span class="mo">05</span><span class="p">:</span><span class="mi">16</span><span class="p">:</span><span class="mo">07</span><span class="p">)</span>&#xA0;
<br /><span class="p">[</span><span class="n">GCC</span>&#xA0;<span class="mf">4.6</span><span class="o">.</span><span class="mi">3</span><span class="p">]</span>&#xA0;<span class="n">on</span>&#xA0;<span class="n">linux2</span>
<br /><span class="n">Type</span>&#xA0;<span class="s">&quot;help&quot;</span><span class="p">,</span>&#xA0;<span class="s">&quot;copyright&quot;</span><span class="p">,</span>&#xA0;<span class="s">&quot;credits&quot;</span>&#xA0;<span class="ow">or</span>&#xA0;<span class="s">&quot;license&quot;</span>&#xA0;<span class="k">for</span>&#xA0;<span class="n">more</span>&#xA0;<span class="n">information</span><span class="o">.</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="nn">random</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">random</span>&#xA0;<span class="o">=</span>&#xA0;<span class="k">lambda</span><span class="p">:</span>&#xA0;<span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
<br /><span class="o">&gt;&gt;&gt;</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="nn">sympy</span>
<br /><span class="n">Traceback</span>&#xA0;<span class="p">(</span><span class="n">most</span>&#xA0;<span class="n">recent</span>&#xA0;<span class="n">call</span>&#xA0;<span class="n">last</span><span class="p">):</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">1</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/__init__.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">20</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="kn">from</span>&#xA0;<span class="nn">sympy.core</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="o">*</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/core/__init__.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">8</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="kn">from</span>&#xA0;<span class="nn">expr</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">Expr</span><span class="p">,</span>&#xA0;<span class="n">AtomicExpr</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/core/expr.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">2020</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="kn">from</span>&#xA0;<span class="nn">mul</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">Mul</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/core/mul.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">1197</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="kn">from</span>&#xA0;<span class="nn">numbers</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">Rational</span><span class="p">,</span>&#xA0;<span class="n">igcd</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/core/numbers.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">1993</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="kn">from</span>&#xA0;<span class="nn">function</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">FunctionClass</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/core/function.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">43</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="kn">from</span>&#xA0;<span class="nn">sympy.utilities</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">default_sort_key</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/utilities/__init__.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">13</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="kn">from</span>&#xA0;<span class="nn">runtests</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">test</span><span class="p">,</span>&#xA0;<span class="n">doctest</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/utilities/runtests.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">472</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="k">class</span>&#xA0;<span class="nc">SymPyTests</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;/venv/lib/python2.7/site-packages/sympy/utilities/runtests.py&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">475</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="n">SymPyTests</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="n">seed</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()):</span>
<br />&#xA0;&#xA0;<span class="n">File</span>&#xA0;<span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span>&#xA0;<span class="n">line</span>&#xA0;<span class="mi">1</span><span class="p">,</span>&#xA0;<span class="ow">in</span>&#xA0;<span class="o">&lt;</span><span class="k">lambda</span><span class="o">&gt;</span>
<br /><span class="ne">ZeroDivisionError</span><span class="p">:</span>&#xA0;<span class="n">integer</span>&#xA0;<span class="n">division</span>&#xA0;<span class="ow">or</span>&#xA0;<span class="n">modulo</span>&#xA0;<span class="n">by</span>&#xA0;<span class="n">zero</span>
<br /></tt></blockquote><p>OK, not sure why it's importing its tests when I try to use the package,
        but looking at the code, here's the culprit:</p><blockquote class="code"><tt><span class="k">class</span>&#xA0;<span class="nc">SymPyTests</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="k">def</span>&#xA0;<span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>&#xA0;<span class="o">...</span><span class="p">,</span>&#xA0;<span class="n">seed</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()):</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class="c">#...</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class="bp">self</span><span class="o">.</span><span class="n">_seed</span>&#xA0;<span class="o">=</span>&#xA0;<span class="n">seed</span>
<br /></tt></blockquote><p>Here we can see the problem.  Remember that function arguments are
        computed once, when the function is defined.  Since this function is
        defined when the module is imported, random.random() will be called
        during import, consuming one of our random numbers.</p><p>Better would be to define it like this:</p><blockquote class="code"><tt><span class="k">class</span>&#xA0;<span class="nc">SymPyTests</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="k">def</span>&#xA0;<span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>&#xA0;<span class="o">...</span><span class="p">,</span>&#xA0;<span class="n">seed</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class="c">#...</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class="bp">self</span><span class="o">.</span><span class="n">_seed</span>&#xA0;<span class="o">=</span>&#xA0;<span class="n">seed</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class="k">if</span>&#xA0;<span class="bp">self</span><span class="o">.</span><span class="n">_seed</span>&#xA0;<span class="ow">is</span>&#xA0;<span class="bp">None</span><span class="p">:</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class="bp">self</span><span class="o">.</span><span class="n">_seed</span>&#xA0;<span class="o">=</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
<br /></tt></blockquote><p>I'm not quite sure which behavior the author wanted, one seed for all
        the instances, or one seed per instance.  I know I don't want importing
        this module to change my random number sequence.</p><p>Amusingly enough, the behavior of the initializer is irrelevant, it's
        only called in one place, and never defaults the seed argument:</p><blockquote class="code"><tt><span class="k">def</span>&#xA0;<span class="nf">test</span><span class="p">(</span><span class="o">*</span><span class="n">paths</span><span class="p">,</span>&#xA0;<span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="o">...</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="n">seed</span>&#xA0;<span class="o">=</span>&#xA0;<span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;seed&quot;</span><span class="p">,</span>&#xA0;<span class="bp">None</span><span class="p">)</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="k">if</span>&#xA0;<span class="n">seed</span>&#xA0;<span class="ow">is</span>&#xA0;<span class="bp">None</span><span class="p">:</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class="n">seed</span>&#xA0;<span class="o">=</span>&#xA0;<span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">100000000</span><span class="p">)</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="n">t</span>&#xA0;<span class="o">=</span>&#xA0;<span class="n">SymPyTests</span><span class="p">(</span><span class="o">...</span><span class="p">,</span>&#xA0;<span class="n">seed</span><span class="p">)</span>
<br /></tt></blockquote><p>The best solution for our code would be to not rely on the module-level
        random number sequence, and instead use our own Random object. Come to 
        think of it, that's what sympy should do too.</p><p>BTW, looking at why sympy is importing test infrastructure when I import
        it, there's this in sympy/utilities/__init__.py:</p><blockquote class="code"><tt><span class="sd">&quot;&quot;&quot;Some&#xA0;utilities&#xA0;that&#xA0;may&#xA0;help.</span>
<br /><span class="sd">&quot;&quot;&quot;</span>
<br /><span class="kn">from</span>&#xA0;<span class="nn">iterables</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="p">(</span><span class="n">flatten</span><span class="p">,</span>&#xA0;<span class="n">group</span><span class="p">,</span>&#xA0;<span class="n">take</span><span class="p">,</span>&#xA0;<span class="n">subsets</span><span class="p">,</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="n">variations</span><span class="p">,</span>&#xA0;<span class="n">numbered_symbols</span><span class="p">,</span>&#xA0;<span class="n">cartes</span><span class="p">,</span>&#xA0;<span class="n">capture</span><span class="p">,</span>&#xA0;<span class="n">dict_merge</span><span class="p">,</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="n">postorder_traversal</span><span class="p">,</span>&#xA0;<span class="n">preorder_traversal</span><span class="p">,</span>&#xA0;<span class="n">interactive_traversal</span><span class="p">,</span>
<br />&#xA0;&#xA0;&#xA0;&#xA0;<span class="n">prefixes</span><span class="p">,</span>&#xA0;<span class="n">postfixes</span><span class="p">,</span>&#xA0;<span class="n">sift</span><span class="p">,</span>&#xA0;<span class="n">topological_sort</span><span class="p">)</span>
<br />
<br /><span class="kn">from</span>&#xA0;<span class="nn">lambdify</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">lambdify</span>
<br /><span class="kn">from</span>&#xA0;<span class="nn">source</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">source</span>
<br />
<br /><span class="kn">from</span>&#xA0;<span class="nn">decorator</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">threaded</span><span class="p">,</span>&#xA0;<span class="n">xthreaded</span>
<br />
<br /><span class="kn">from</span>&#xA0;<span class="nn">runtests</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">test</span><span class="p">,</span>&#xA0;<span class="n">doctest</span>
<br />
<br /><span class="kn">from</span>&#xA0;<span class="nn">cythonutils</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">cythonized</span>
<br /><span class="kn">from</span>&#xA0;<span class="nn">timeutils</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">timed</span>
<br />
<br /><span class="kn">from</span>&#xA0;<span class="nn">misc</span>&#xA0;<span class="kn">import</span>&#xA0;<span class="n">default_sort_key</span>
<br /></tt></blockquote><p>This makes using utilities very convenient, since it contains everything
        at the top level.  But the downside is it means you must always take
        everything.  There is no way to import only part of utilities.  Even if
        you use "from utilities.lambdify import lambdify," Python will execute
        the utilities/__init__.py file, importing everything.</p><p>Lessons:</p><ul>
        <li>Modules really execute when imported,</li>
        <li>Function defaults are computed once when the function is defined,</li>
        <li>Modifying global state like the random module's implicit sequence is bad,</li>
        <li>Importing stuff into __init__.py makes your code monolithic and harder to use as you want, and</li>
        <li>Monkey-patching can be a great way to debug problems.</li>
    </ul></p>
<p>
<em><a href="http://nedbatchelder.com/blog/201302/hunting_a_random_bug.html">February 15, 2013 01:11 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.mechanicalcat.net/richard/log/Python" title="Richard Jones' Log: Python">Richard Jones</a></h3>


<h4><a href="http://www.mechanicalcat.net/richard/log/Python/PyPI_password_related_security_changes">PyPI password-related security changes</a></h4>
<p>
TL;DR: please log into PyPI and change your password.
<p>
Recently we have been auditing and improving security of the <a href="https://pypi.python.org/pypi">Python Package
Index (PyPI)</a> and other python.org hosts.
<p>
You may be aware that the wiki.python.org host was compromised. Since we must
assume that all passwords stored in that system are also compromised, and we
also assume that some users share passwords between python.org systems, we are
performing a password reset of all PyPI accounts in one week's time, at
2013-02-22 00:00 UTC.
<p>
If you log in before that deadline and change your password then you'll be
fine, otherwise you'll need to use the password recovery form after the reset
has occurred.
<p>
Additionally, we would ask you to begin to access PyPI using HTTPS through the
web. We're in the process of installing a new SSL certificate so the current
Big Red Certificate Warning should go away very soon.
<p>
We are in the process of updating the Python packaging toolset to use HTTPS.
<p>
These steps are but a couple of those we're intending to take to better secure
PyPI. If you are interested in these matters I encourage you to participate in
the discussion on the <a href="http://mail.python.org/mailman/listinfo/catalog-sig">catalog SIG</a>.
<p>
Finally, we apologise for any inconvenience these changes have caused.</p></p></p></p></p></p></p></p>
<p>
<em><a href="http://www.mechanicalcat.net/richard/log/Python/PyPI_password_related_security_changes">February 15, 2013 12:47 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.cubicweb.org/project?rql=Any%20X%2CT%2CCD%20ORDERBY%20CD%20DESC%20LIMIT%2020%20WHERE%20X%20is%20BlogEntry%2C%20X%20title%20T%2C%20X%20creation_date%20CD" title="Blog entries (CubicWeb's Forge) RSS Feed">CubicWeb</a></h3>


<h4><a href="http://feedproxy.google.com/~r/cubicweborg/~3/89ZkVPksxUQ/2715922">CubicWeb at Data Tuesday on Feb 26th 2013</a></h4>
<p>
<p>CubicWeb will be showcased at <a class="reference" href="http://data-tuesday.com/2013/02/13/decouvrez-le-programme-du-26-fevrier-2013/">Data Tuesday on Feb 26th 2013</a>. See you there for a chat!</p>
<p><strong>Post-event report will be posted here as an update.</strong></p></p>
<p>
<em><a href="http://feedproxy.google.com/~r/cubicweborg/~3/89ZkVPksxUQ/2715922">February 15, 2013 12:38 AM</a></em>
</p>





<h2>February 14, 2013</h2>




<hr /><h3 class="post"><a href="http://jugad2.blogspot.com/search/label/python" title="jugad2 - Vasudev Ram on software innovation">Vasudev Ram</a></h3>


<h4><a href="http://jugad2.blogspot.com/2013/02/pyrtf-python-library-to-create-rtf.html">PyRTF, Python library to create RTF documents</a></h4>
<p>
By <a href="http://www.dancingbison.com">Vasudev Ram</a><br /><br /><a href="http://pyrtf.sourceforge.net/">PyRTF</a> is a Python library that enables programmatic creation of RTF (Rich Text Format) documents. RTF files are compatible with Microsoft Word and many other leading word processors such as OpenOffice, and also compress well. PyRTF makes it fairly easy to generate RTF content programmatically, with many features such as sections, paragraphs, headers and footers, tables, etc.<br /><br />Some years earlier I had done some interesting work with RTF using Java, as part of developing a product at a startup. The work basically involved reverse-engineering part of the RTF specification / format, and then writing custom Java code to generate RTF from the  data in J2EE application. The RTF files could be imported into MS Word and Adobe InDesign.<br />The code was written in such a way as to try to keep style and content separate, so that each could be varied independently. It worked, to an extent.<br /><br /><a href="http://en.wikipedia.org/wiki/Rich_Text_Format">RTF page in Wikipedia</a>.<br /><br /><a href="http://sourceforge.net/projects/pyrtf/">PyRTF download page on SourceForge</a>.<br /><br />Below is a simplified version of examples.py from the PyRTF package; I modified examples.py to create only one simple file instead of 7 increasingly complex ones. Save this file as small_example.py in the examples subdirectory of the directory where you extract PyRTF:<br /><br /><pre># small_example.py<br /><br />import sys<br />sys.path.append( '../' )<br /><br />from PyRTF import *<br /><br /><br />def MakeExample1() :<br /> doc     = Document()<br /> ss      = doc.StyleSheet<br /> section = Section()<br /> doc.Sections.append( section )<br /><br /> # text can be added directly to the section<br /> # a paragraph object is create as needed<br /> section.append( 'Example 1' )<br /><br /> # blank paragraphs are just empty strings<br /> section.append( '' )<br /><br /> # a lot of useful documents can be created<br /> # with little more than this<br /> section.append(<br /> 'A lot of useful documents can be created '<br /> 'in this way, more advance formating is available '<br /> 'but a lot of users just want to see their data come out '<br /> 'in something other than a text file.' )<br /> return doc<br /><br />def OpenFile( name ) :<br /> return file( '%s.rtf' % name, 'w' )<br /><br />if __name__ == '__main__' :<br /> DR = Renderer()<br /> doc1 = MakeExample1()<br /> DR.Write( doc1, OpenFile( '1' ) )<br /> print "Finished"<br /></pre><br />Then run it with the command: python small_example.py<br /><br />It will create a file called 1.rtf in the same directory.<br />The contents of the file will be this (in .RTF format):<br /><pre>Example 1<br /><br />A lot of useful documents can be created in this way, more advance formating is available but a lot of users just want to see their data come out in something other than a text file.<br /></pre>So you can open the file in MS Word, OpenOffice, or any other word processor that supports the RTF format, and also save it to other formats like .DOC if you want to.<br /><br /><a href="http://jugad2.blogspot.co.uk/feeds/posts/default/-/python"></a><br /><br />- <a href="http://www.dancingbison.com/about.html">Vasudev Ram - Dancing Bison Enterprises</a><br /><br /><!-- AddThis Button BEGIN --> <div class="addthis_toolbox addthis_default_style"><a href="http://www.addthis.com/bookmark.php?v=250&username=vasudevram" class="addthis_button_compact">Share</a> <span class="addthis_separator">|</span> <a class="addthis_button_preferred_1"></a> <a class="addthis_button_preferred_2"></a> <a class="addthis_button_preferred_3"></a> <a class="addthis_button_preferred_4"></a> </div>  <!-- AddThis Button END --><br /><div class="blogger-post-footer"><a href="http://www.dancingbison.com">Vasudev Ram</a>
<br /></div></p>
<p>
<em><a href="http://jugad2.blogspot.com/2013/02/pyrtf-python-library-to-create-rtf.html">February 14, 2013 09:54 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a></h3>


<h4><a href="http://www.blog.pythonlibrary.org/2013/02/14/python-gets-funded-by-darpa-for-big-data-project-blaze/">Python Gets Funded by DARPA for Big Data Project: Blaze</a></h4>
<p>
<p>I first heard about Blaze from NumPy&#8217;s original developer&#8217;s <a href="http://technicaldiscovery.blogspot.com/2012/12/passing-torch-of-numpy-and-moving-on-to.html" target="_blank">blog</a> back in December 2012. A few days ago, <a href="http://www.informationweek.co.uk/government/information-management/darpa-funds-python-big-data-effort/240147993" target="_blank">InformationWeek </a>announced that DARPA was funding the project to the tune of $3 million dollars to get some big data libraries written for Python. There will be two new projects, Blaze and Bokeh. Blaze will be an extension of NumPy and SciPy and make those libraries big data friendly. The Bokeh project will be for big data visualization.</p>
<p>Blaze will be open source. You can read more about it <a href="http://blaze.pydata.org/" target="_blank">here</a>. I was unable to find a specific link to the Bokeh project. </p></p>
<p>
<em><a href="http://www.blog.pythonlibrary.org/2013/02/14/python-gets-funded-by-darpa-for-big-data-project-blaze/">February 14, 2013 02:53 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://jjinux.blogspot.com/search/label/python" title="JJinuxLand">Shannon -jj Behrens</a></h3>


<h4><a href="http://jjinux.blogspot.com/2013/02/personal-my-buddy-is-looking-for-python.html">Personal: My Buddy is Looking for a Python Job</a></h4>
<p>
<div dir="ltr"><a href="http://1.bp.blogspot.com/-Zb64p2_l4yk/UR1nMLIRXyI/AAAAAAAAKfw/CKIz8mPpCPE/s1600/jeff.jpg"><img border="0" height="200" src="http://1.bp.blogspot.com/-Zb64p2_l4yk/UR1nMLIRXyI/AAAAAAAAKfw/CKIz8mPpCPE/s200/jeff.jpg" width="200" /></a><br />I have a buddy named Jeff Stewart who just graduated from St. Mary's College of California, which is where I'm from. He's fresh out of school and looking for his first programming job. He knows Python, Java, C++, etc. Here's his <a href="https://docs.google.com/file/d/0B9S076kfs_EnNW1KQnhfUkN1ZFk/edit?usp=sharing">resume</a>. I've code reviewed his code; he's smart, careful, and hard working.</div></p>
<p>
<em><a href="http://jjinux.blogspot.com/2013/02/personal-my-buddy-is-looking-for-python.html">February 14, 2013 02:40 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://blog.jetbrains.com/pycharm" title="JetBrains PyCharm Blog">PyCharm</a></h3>


<h4><a href="http://feedproxy.google.com/~r/Pycharm/~3/cxa1cU3fPD8/">Dynamic runtime type inference in PyCharm 2.7</a></h4>
<p>
<p><!-- .leftimg { float:left; margin: 7px 7px 7px 0; } .rightimg  { float: right; margin: 7px 0 7px 7px; } --></p>
<p>PyCharm’s debugger is now capable of <strong>collecting type information at runtime</strong> and using this information for improving code completion suggestions, code insight and quick documentation popups. This needs to be enabled in the debugger settings.</p>
<p><a href="http://blog.jetbrains.com/pycharm/files/2013/02/settings.png"><img class="alignnone size-full wp-image-1789" src="http://blog.jetbrains.com/pycharm/files/2013/02/settings.png" alt="" width="671" height="182" /></a></p>
<p>You debug your code all the time, and now in the course of debugging you can also collect type information. Afterwards, it will be used in auto-completion, and you will be able to puto the collected type information into docstrings as well. Please note that enabling this feature may affect debugger performance, so use it with care.</p>
<p>For example, let’s consider the following code snippet:</p>
<p><a href="http://blog.jetbrains.com/pycharm/files/2013/02/example_py.png"><img class="size-full wp-image-1796 alignleft" src="http://blog.jetbrains.com/pycharm/files/2013/02/example_py.png" alt="" width="346" height="104" /></a></p>
<p>First, make sure that “Collect run-time types information for code insight” is enabled as shown above. Then run the debugger on your code. It doesn’t matter if you use breakpoints or other debugger tools. After the debugger steps into the “foo” method, it will record the types used in the call.</p>
<p>As you develop your code further, you will get suggestions based on this runtime experience. Please note that this will work even during the same debugger session, so you can get suggestions right after the debugger enters any function.</p>
<p><a href="http://blog.jetbrains.com/pycharm/files/2013/02/debug_session.png"><img class="size-full wp-image-1797 aligncenter" src="http://blog.jetbrains.com/pycharm/files/2013/02/debug_session.png" alt="" width="463" height="264" /></a></p>
<p><strong>Dynamically collected type information</strong> is in use not only inside a function body:</p>
<p dir="ltr"><a href="http://blog.jetbrains.com/pycharm/files/2013/02/outside_func.png"><img class="size-full wp-image-1798 aligncenter" src="http://blog.jetbrains.com/pycharm/files/2013/02/outside_func.png" alt="" width="702" height="188" /></a></p>
<p dir="ltr">Since PyCharm also makes static type inference, it will guess that “res” will be of the type returned by “foo”:</p>
<p dir="ltr"><a href="http://blog.jetbrains.com/pycharm/files/2013/02/res_known.png"><img class="size-full wp-image-1799 aligncenter" src="http://blog.jetbrains.com/pycharm/files/2013/02/res_known.png" alt="" width="422" height="168" /></a></p>
<p>If different calls to the same function use different argument types, PyCharm will remember all the variants of the types encountered. As always, you can use <strong>Quick Documentation Lookup</strong> to get quick information on any symbol or just method signature information. Just place the caret on a symbol and press Ctrl+Q:</p>
<p><a href="http://blog.jetbrains.com/pycharm/files/2013/02/documentation.png"><img class="size-full wp-image-1801 aligncenter" src="http://blog.jetbrains.com/pycharm/files/2013/02/documentation.png" alt="" width="862" height="250" /></a></p>
<p>As you can see, <strong>dynamically inferred types</strong> are already shown in this popup.</p>
<p dir="ltr">There is also another usage of dynamic type inference: <strong>generating docstrings</strong> based on information collected by the debugger. <span>The basic steps are the same: enable “Collect run-time types information for code insight” and then debug yo</span><span>ur method/function. After this, place the caret anywhere within the function body and press Alt+Enter. This displays the “Generate docstrings with types” option. Select it to automatically generate a docstring for your method. </span><span>For more details please see “Using Docstrings to Specify Types” in Help.</span></p>
<p><span>Take advantage of this new feature to better control your source code and improve your user experience with PyCharm.</span></p>
<p><em>Develop with pleasure!</em><br />
<em>JetBrains PyCharm Team</em></p>
<img src="http://feeds.feedburner.com/~r/Pycharm/~4/cxa1cU3fPD8" height="1" width="1" /></p>
<p>
<em><a href="http://feedproxy.google.com/~r/Pycharm/~3/cxa1cU3fPD8/">February 14, 2013 02:37 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pycon.blogspot.com/" title="The PyCon blog">PyCon</a></h3>


<h4><a href="http://pycon.blogspot.com/2013/02/two-expo-hall-booths-remaining.html">Two Expo Hall Booths Remaining!</a></h4>
<p>
<span>A lot of things are selling out around PyCon. We recently <a href="http://pycon.blogspot.com/2013/02/sold-out.html">sold out</a> conference tickets, and everything else we have left is flying off of the hypothetical shelves. <a href="http://pycon.blogspot.com/2013/02/interview-with-tutorial-presenter.html">Tutorials</a> are filling up, the first annual <a href="http://pycon.blogspot.com/2013/01/sponsor-tutorial-schedule.html">sponsor tutorials</a> are going quickly, and we're left with two booths in our Expo Hall.</span><div><span><br /></span></div><div><span>The Expo Hall is a great place for your company to interact with our community. Let them know you're hiring, show off your latest products, whatever makes sense for your organization. It's central to the layout of the conference center, and it's sure to get significant foot traffic with all 2,500 tickets sold. Check out our "<a href="https://us.pycon.org/2013/sponsors/whysponsor/">Why become a PyCon sponsor?</a>" page for more details.</span></div><div><span><br /></span></div><div><span>Not only is the Expo Hall great for the company, it's great for PyCon. Sponsorship allows us to "go big" and do some of the things we've introduced this year. We're offering a free <a href="https://us.pycon.org/2013/events/letslearnpython/">kids tutorial</a>, started up the <a href="https://us.pycon.org/2013/schedule/sponsor-tutorials/">sponsor tutorials</a>, will be running a <a href="http://pycon.blogspot.com/2013/02/announcing-pycon-charity-auction.html">charity auction</a>, and we have a few tricks up our sleeves that we think the community will enjoy. It's because of our <a href="https://us.pycon.org/2013/sponsors/">excellent sponsors</a> that PyCon has been able to grow and keep getting better year after year.</span></div><div><span><br /></span></div><div><span>If you're interested in filling one of our two remaining booth spaces, contact conference chairman Jesse Noller at <a href="mailto:jnoller@gmail.com">jnoller@gmail.com</a>.</span></div></p>
<p>
<em><a href="http://pycon.blogspot.com/2013/02/two-expo-hall-booths-remaining.html">February 14, 2013 02:09 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pythonconquerstheuniverse.wordpress.com" title="Python Conquers The Universe">Stephen Ferg</a></h3>


<h4><a href="http://pythonconquerstheuniverse.wordpress.com/2013/02/14/cracking-passwords-is-getting-easier/">Cracking passwords is getting easier</a></h4>
<p>
<p>Not Python-related, but really worth reading.</p>
<p><a href="http://arstechnica.com/security/2012/08/passwords-under-assault/">Why passwords have never been weaker — and crackers have never been stronger</a> on <em>ars technica</em>.</p>
<br />  <img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=pythonconquerstheuniverse.wordpress.com&blog=9223888&post=2121&subd=pythonconquerstheuniverse&ref=&feed=1" width="1" height="1" /></p>
<p>
<em><a href="http://pythonconquerstheuniverse.wordpress.com/2013/02/14/cracking-passwords-is-getting-easier/">February 14, 2013 12:52 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://rbtcollins.wordpress.com" title="Code happens » Python">Robert Collins</a></h3>


<h4><a href="http://rbtcollins.wordpress.com/2013/02/14/time-to-revise-the-subunit-protocol/">Time to revise the subunit protocol</a></h4>
<p>
<p><a href="https://launchpad.net/subunit/">Subunit</a> is seven and a half years old now &#8211; Conrad Parker and I first sketched it up at a CodeCon &#8211; camping and coding, a brilliant combination &#8211; in mid 2005.</p>
<pre>revno: 1
committer: Robert Collins &lt;robertc@robertcollins.net&gt;
timestamp: Sat 2005-08-27 15:01:20 +1000
message:  design up a protocol with kfish</pre>
<p>It has proved remarkably resilient as a protocol &#8211; the basic nature hasn&#8217;t changed at all, even though we&#8217;ve added tags, timestamps, support for attachments of arbitrary size.</p>
<p>However a growing number of irritations have been building up with it. I think it is time to design another iteration of the protocol, one that will retain the positive qualities of the current protocol, while helping it become suitable for the next 7 years. Ideally we can keep compatibility and make it possible for a single stream to be represented in any format.</p>
<h3>Existing design</h3>
<p>The existing design is a mostly human readable line orientated protocol that can be sniffed out from the regular output of &#8216;make&#8217; or other build systems. Binary attachments are done using HTTP chunking, and the parser has to maintain state about the current test, tags, timing data and test progression [a simple stack of progress counters]. How to arrange subunit output is undefined, how to select tests to run is undefined.</p>
<p>This makes writing a parser quite easy, and the tagging and timestamp facility allow multiplexing streams from two or more concurrent test runs into one with good fidelity &#8211; but also requires that state be buffered until the end of a test, as two tests cannot be executing at once.</p>
<h3>Dealing with debuggers</h3>
<p>The initial protocol was intended to support dropping into a debugger &#8211; just pass each line read through to stdout, and connect stdin to the test process, and voila, you have a working debugger connection. This works, but the current line based parsers make using it tedious &#8211; the line buffered nature of it makes feedback on what has been typed fiddly, and stdout tends to be buffered, leading to an inability to see print statements and the like.  All in-principle fixable, right ?</p>
<p>When running two or more test processes, which test process should stdin be connected to? What if two or more drop into a debugger at once? What is being typed to which process is more luck than anything else.</p>
<p>We&#8217;ve added some idioms in <a href="https://launchpad.net/testrepository/">testrepository</a> that control test execution by a similar but different format &#8211; one test per line to list tests, and have runners permit listing and selecting by a list. This works well, but the inconsistency with subunit itself is a little annoying &#8211; you need two parsers, and two output formats.</p>
<h3>Good points</h3>
<p>The current protocol is extremely easy to implement for emitters, and the arbitrary attachments and tagging features have worked extremely well. There is a comprehensive Python parser which maps everything into Python unittest API calls (an extended version of the standard, with good backwards compatibility).</p>
<h3>Pain points</h3>
<p>The debugging support was a total failure, and the way the parser depraminates it&#8217;s toys when a test process corrupts an outcome line is extremely frustrating. (other tests execute but the parser sees them as non-subunit chatter and passes the lines on through stdout).</p>
<h3>Dealing with concurrency</h3>
<p>The original design didn&#8217;t cater for concurrency. There are three concurrency issues &#8211; the corruption issue (see below for more detail) and multiplexing. Consider two levels of nested concurrency: A supervisor process such as testrepository starts 2 (or more but 2 is sufficient to reason about the issue) subsidiary worker processes (I1 and I2), each of which starts 2 subsidiary processes of their own (W1, W2, W3, W4). Each of the 4 leaf processes is outputting subunit which gets multiplexed in the 2 intermediary processes, and then again in the supervisor. Why would there be two layers? A concrete example is using testrepository to coordinate test runs on multiple machines at once, with each machine running a local testrepository to broker tests amongst the local CPUs. This could be done with 4 separate ssh sessions and no intermediaries, but that only removes a fraction of the issues. What issues?</p>
<p>Well, consider some stdout chatter that W1 outputs. That will get passed to I1 and from there to the supervisor and captured. But there is nothing marking the chatter as belonging to W1: there is no way to tell where it came from. If W1 happened to fail, and there was a diagnostic message printed, we&#8217;ve lost information. Or at best muddled it all up.</p>
<p>Secondly, buffering &#8211; imagine that a test on W1 hangs. I1 will know that W1 is running a test, but has no way to tell the supervisor (and thus the user) that this is the case, without writing to stdout [and causing a *lot* of noise if that happens a lot]. We could have I1 write to stdout only if W1&#8242;s test is taking more than 5 seconds or something &#8211; but this is a workaround for a limitation of the protocol. Adding to the confusion, the clock on W1 and W3 may be very skewed, so timestamps for everything have to be carefully synchronised by the multiplexer.</p>
<p>Thirdly, scheduling &#8211; if W1/W2 are on a faster machine than W3/W4 then a partition of equal-timed tests onto each machine will lead one idle before the other finishes. It would be nice to be able to pass tests to run to the faster machine when it goes idle, rather than having to start a new runner each time.</p>
<p>Lastly, what to do when W1 and W2 both wait for user input on stdin (e.g. passphrases, debugger input, $other). Naively connecting stdin to all processes doesn&#8217;t work well. A GUI supervisor could connect a separate fd to each of I1 and I2, but that doesn&#8217;t help when it is W1 and W2 reading from stdin.</p>
<p>So additional requirement over baseline subunit:</p>
<ol>
<li>make it possible for stdout and stderr output to be captured from W1 and routed through I1 to the supervisor without losing its origin. It might be chatter from a noisy test, or it might be build output. Either way, the user probably will benefit if we can capture it and show it to them later when they review the test run. The supervisor should probably show it immediately as well &#8211; the protocol doesn&#8217;t need to care about that, just make it possible.</li>
<li>make it possible to pass information about tests that have not completed through one subunit stream while they are still incomplete.</li>
<li>make it possible (but optional) to pass tests to run to a running process that accepts subunit.</li>
<li>make it possible to route stdin to a specific currently process like W1. This and point 3 suggest that we need a bidirectional protocol rather than the solely unidirectional protocol we have today. I don&#8217;t know of a reliable portable way to tell when some process is seeking such input, so that will be up to the user I think. (e.g. printing (pdb) to stdout might be a sufficiently good indicator.)</li>
</ol>
<h3>Dealing with corruption</h3>
<p>Consider the following subunit fragment:</p>
<pre>test: foo
starting serversuccess:foo</pre>
<p>This is a classic example of corruption: the test &#8216;foo&#8217; started a server and helpfully wrote to stdout explaining that it did that, but missed the newline. As a result the success message for the test wasn&#8217;t printed on a line of its own, and the subunit parser will believe that foo never completed. Every subsequent test is then ignored. This is usually easy to identify and fix, but its a head-scratcher when it happens. Another way it can happen is when a build tool like &#8216;make&#8217; runs tests in parallel, and they output subunit onto the same stdout file handle. A third way is when a build tool like make runs two separate test scripts serially, and the first one starts a test but errors hard and doesn&#8217;t finish it. That looks like:</p>
<pre>test: foo
test: bar
success: bar</pre>
<p>One way that this sort of corruption can be mitigated is to put subunit on it&#8217;s own file descriptor, but this has several caveats: it is harder to tunnel through things like ssh and it doesn&#8217;t solve the failing test script case.</p>
<p>I think it is unreasonable to require a protocol where arbitrary interleaving of bytes between different test runner streams will work &#8211; so the &#8216;make -j2&#8242; case can be ignored at the wire level &#8211; though we should create a simple way to safely mux the output from such tests when the execute.</p>
<p>The root of the issue is that a dropped update leaves bad state in the parser and it never recovers. So some way to recover, or less state to carry in the parser, would neatly solve things. I favour reducing parser state as that should shift stateful complexity onto end nodes / complex processors, rather than being carried by every node in the transmission path.</p>
<h3>Dependencies</h3>
<p>Various suggestions have been made &#8211; JSON, Protobufs, etc&#8230;</p>
<p>A key design goal of the first subunit was a low barrier to entry. We keep that by being backward compatible, but being easy to work with for the new revision is also a worthy goal.</p>
<h3>High level proposal</h3>
<p>A packetised length prefixed binary protocol, with each packet containing a small signature, length, routing code, a binary timestamp in UTC, a set of UTF8 tags (active only, no negative tags), a content tag &#8211; one of (estimate + number, stdin, stdout, stderr, test- + test id), test status (one of exists/inprogress/xfail/xsuccess/success/fail/skip), an attachment name, mime type, a last-block marker and a block of bytes.</p>
<p>The content tags:</p>
<ul>
<li>estimate &#8211; the stream is reporting how many tests are expected to run. It affects everything with the same routing code only, and replaces (doesn&#8217;t adjust) any current estimate for that routing code. A estimate packet of 0 can be used to say that a routing target has shutdown and cannot run more tests. Routing codes can be used by a subunit aware runner to separate out separate threads in a single process, or even just separate &#8216;TestSuite&#8217; objects within a single test run (though doing so means that they will need to process subunit and strip packets on stdin. This supercedes the stack of progress indicators that current subunit has. estimates cannot have test status or attachments.</li>
<li>stdin/stdout/stderr: a packet of data for one of these streams. The routing code identifies the test process that the data came from/should go to in the tree of test workers. These packets cannot have test status but should have a non-empty attachment block.</li>
<li>test- + testid: a packet of data for a single test. test status may be included, as may attachment name, mime type, last-block and binary data.</li>
</ul>
<p>Test status values are pretty ordinary. Exists is used to indicate a test that can be run when listing tests, and inprogress is used to report a test that has started but not necessarily completed.</p>
<p>Attachment names must be unique per routing code + testid.</p>
<p>So how does this line up?</p>
<h4>Interleaving and recovery</h4>
<p>We could dispense with interleaving and say the streams are wholly binary, or we can say that packets can start either after a \n or directly after another packet. If we say that binary-only is the approach to take, it would be possible to write a filter that would apply the newline heuristic (or even look for packet headers at every byte offset. I think mandating adjacent to a packet or after \n is a small concession to make and will avoid tools like testrepository forcing users to always configure a heuristic filter. Non-subunit content can be wrapped in subunit for forwarding (the I1 in W1-&gt;I1-&gt;Supervisor chain would do the wrapping). This won&#8217;t eliminate corruption but it will localise it and permit the stream to recover: the test that was corrupted will show up as incomplete, or with incomplete attachment data.</p>
<h4>listing</h4>
<p>Test listing would emit many small non-timestamped packets. It may be useful to have a wrapper packet for bulk amounts of fine grained data like listing is, or for multiplexers with many input streams that will often have multiple data packets available to write at once.</p>
<h4>Selecting tests to run</h4>
<p>Same as for listing &#8211; while passing regexes down to the test runner to select groups of tests is a valid use case, thats not something subunit needs to worry about : if the selection is not the result of the supervisor selecting by test id, then it is known at the start of the test run and can just be a command line parameter to the backend : subunit is relevant for passing instructions to a runner mid-execution. Because the supervisor cannot just hand out some tests and wait for the thing it ran to report that it can accept incremental tests on stdin, supervisor processes will need to be informed about that out of band.</p>
<h4>Debugging</h4>
<p>Debugging is straight forward . The parser can read the first 4 or so bytes of a packet one at a time to determine if it is a packet or a line of stdout/stderr, and then either read to end of line, or the binary length of the packet. So, we combine a few things; non-subunit output should be wrapped and presented to the user. Subunit that is being multiplexed and forwarded should prepend a routing code to the packet (e.g. I1 would append &#8217;1&#8242; or &#8217;2&#8242; to select which of W1/W2 the content came from, and then forward the packet. S would append &#8217;1&#8242; or &#8217;2&#8242; to indicate I1/I2 &#8211; the routing code is a path through the tree of forwarding processes). The UI the user is using needs to supply some means to switch where stdin is attached. And stdin input should be routed via stdin packets. When there is no routing code left, the packet should be entirely unwrapped and presented as raw bytes to the process in question.</p>
<h4>Multiplexing</h4>
<p>Very straight forward &#8211; unwrap the outer layer of the packet, add or adjust the routing code, serialise a header + adjusted length + rest of packet as-is. No buffering is needed, so the supervisor can show in-progress tests (and how long they have been running for).</p>
<h4>Parsing / representation in Python or other languages</h4>
<p>The parser should be very simple to write. Once parsed, this will be fundamentally different to the existing Python TestCase-&gt;TestResult API that is in used today. However it should be easy to write two adapters: old-style &lt;-&gt; this new-style. old-style -&gt; new-style is useful for running existing tests suites and generating subunit, because thats way the subunit generation is transparent. new-style-&gt;old-style is useful for using existing test reporting facilities (such as junitxml or html TestResult objects) with subunit streams.</p>
<p>Importantly though, a new TestResult style that supports the features of this protocol would enable some useful features for regular Python test suites:</p>
<ul>
<li>Concurrent tests (e.g. in multiprocessing) wouldn&#8217;t need multiplexers and special adapters &#8211; a regular single testresult with a simple mutex around it would be able to handle concurrent execution of tests, and show hung tests etc.</li>
<li>The routing of input to a particular debugger instance also applies to a simple python process running tests via multiprocessing, so the routing feature would help there.</li>
<li>The listing facility and incrementally running tests would be useful too I think &#8211; we could go to running tests concurrently with test collection happening, but this would apply to other parts of unittest than just the TestResult</li>
</ul>
<p>The API might be something like:</p>
<pre>class StreamingResult(object):
    def startTestRun(self):
        pass
    def stopTestRun(self):
        pass
    def estimate(self, count, route_code=None):
        pass
    def stdin(self, bytes, route_code=None):
        pass
    def stdout(self, bytes, route_code=None):
        pass
    def test(self, test_id, status, attachment_name=None, attachment_mime=None, attachment_eof=None, attachment_bytes=None):
        pass</pre>
<p>This would support just-in-time debugging  by wiring up pdb to the stdin/stdout handlers of the result object, rather than actual stdin/stdout of the process &#8211; a simple matter once written. Alternatively, the test runner could replace sys.stdin/stdout etc with thunk file-like objects, which might be a good idea anyway to capture spurious output happening during a test run. That would permit pdb to Just Work (even if the test process is internally running concurrent tests.. until it has two pdb objects running concurrently <img src="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<h4>Generation new streams</h4>
<p>Should be very easy in anything except shell. For shell, we can have a command line tool that when invoked outputs a subunit stream for one instruction. E.g. &#8216;test foo completed + some attachments&#8217; or &#8216;test foo starting&#8217;.</p>
<br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/rbtcollins.wordpress.com/356/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rbtcollins.wordpress.com/356/" /></a> <img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=rbtcollins.wordpress.com&blog=9305600&post=356&subd=rbtcollins&ref=&feed=1" width="1" height="1" /></p>
<p>
<em><a href="http://rbtcollins.wordpress.com/2013/02/14/time-to-revise-the-subunit-protocol/">February 14, 2013 11:28 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.jordan-dimov.com/" title="Jordan Dimov">Jordan Dimov</a></h3>


<h4><a href="http://www.jordan-dimov.com/2013/02/jordans-cheese-selection-for-february-14-2013.html">Jordan's Cheese Selection for February 14, 2013</a></h4>
<p>
This is the 3rd issue of my regular selection of interesting Python and Django modules that were recently uploaded or updated on PyPI (the Python Package Index). We'll begin with a couple of updates: partpy by Nekroze, the collection of tools for hand-writing lexers and parsers, which I covered two...</p>
<p>
<em><a href="http://www.jordan-dimov.com/2013/02/jordans-cheese-selection-for-february-14-2013.html">February 14, 2013 10:51 AM</a></em>
</p>





<h2>February 13, 2013</h2>




<hr /><h3 class="post"><a href="http://raspberry-python.blogspot.com/search/label/python" title="Raspberry Pi Python Adventures">François Dion</a></h3>


<h4><a href="http://raspberry-python.blogspot.com/2013/02/minecraft-pi-edition-available.html">Minecraft Pi Edition available</a></h4>
<p>
<h3>The RaspberryPi edition download</h3><a href="https://s3.amazonaws.com/assets.minecraft.net/pi/minecraft-pi-0.1.1.tar.gz">minecraft-pi-0.1.1.tar.gz</a><br /><br /><h3>The install</h3>fdion@raspberrypi ~ $ gunzip minecraft-pi-0.1.1.tar.gz <br />fdion@raspberrypi ~ $ tar -xvf minecraft-pi-0.1.1.tar<br /><br /><h3>More detail</h3><a href="http://mojang.com/2013/02/minecraft-pi-edition-is-available-for-download/">Mojang.com</a> <br /><a href="http://pi.minecraft.net/">pi.minecraft.net</a><br /><br /><h3>Python</h3><br />So, before we get started in writing some python (such as the code I put here: <a href="http://raspberry-python.blogspot.com/2012/11/minecraft-python-raspberry-pi.html">minecraft python</a> ), let's check out <i>block.py</i> in the <i>mcpi/api/python/mcpi</i> directory. It contains the types of materials that can be used:<br /><br />AIR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(0)<br />STONE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(1)<br />GRASS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(2)<br />DIRT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(3)<br />COBBLESTONE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(4)<br />WOOD_PLANKS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(5)<br />SAPLING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(6)<br />BEDROCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(7)<br />WATER_FLOWING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(8)<br />WATER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = WATER_FLOWING<br />WATER_STATIONARY&nbsp;&nbsp;&nbsp; = Block(9)<br />LAVA_FLOWING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(10)<br />LAVA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = LAVA_FLOWING<br />LAVA_STATIONARY&nbsp;&nbsp;&nbsp;&nbsp; = Block(11)<br />SAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(12)<br />GRAVEL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(13)<br />GOLD_ORE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(14)<br />IRON_ORE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(15)<br />COAL_ORE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(16)<br />WOOD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(17)<br />LEAVES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(18)<br />GLASS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(20)<br />LAPIS_LAZULI_ORE&nbsp;&nbsp;&nbsp; = Block(21)<br />LAPIS_LAZULI_BLOCK&nbsp; = Block(22)<br />SANDSTONE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(24)<br />BED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(26)<br />COBWEB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(30)<br />GRASS_TALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(31)<br />WOOL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(35)<br />FLOWER_YELLOW&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(37)<br />FLOWER_CYAN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(38)<br />MUSHROOM_BROWN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(39)<br />MUSHROOM_RED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(40)<br />GOLD_BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(41)<br />IRON_BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(42)<br />STONE_SLAB_DOUBLE&nbsp;&nbsp; = Block(43)<br />STONE_SLAB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(44)<br />BRICK_BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(45)<br />TNT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(46)<br />BOOKSHELF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(47)<br />MOSS_STONE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(48)<br />OBSIDIAN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(49)<br />TORCH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(50)<br />FIRE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(51)<br />STAIRS_WOOD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(53)<br />CHEST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(54)<br />DIAMOND_ORE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(56)<br />DIAMOND_BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(57)<br />CRAFTING_TABLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(58)<br />FARMLAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(60)<br />FURNACE_INACTIVE&nbsp;&nbsp;&nbsp; = Block(61)<br />FURNACE_ACTIVE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(62)<br />DOOR_WOOD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(64)<br />LADDER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(65)<br />STAIRS_COBBLESTONE&nbsp; = Block(67)<br />DOOR_IRON&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(71)<br />REDSTONE_ORE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(73)<br />SNOW&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(78)<br />ICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(79)<br />SNOW_BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(80)<br />CACTUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(81)<br />CLAY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(82)<br />SUGAR_CANE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(83)<br />FENCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(85)<br />GLOWSTONE_BLOCK&nbsp;&nbsp;&nbsp;&nbsp; = Block(89)<br />BEDROCK_INVISIBLE&nbsp;&nbsp; = Block(95)<br />STONE_BRICK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(98)<br />GLASS_PANE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(102)<br />MELON&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(103)<br />FENCE_GATE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Block(107)<br />GLOWING_OBSIDIAN&nbsp;&nbsp;&nbsp; = Block(246)<br />NETHER_REACTOR_CORE = Block(247)<br /><br />That's a lot. So, next post I'll try to build something using Python with all the materials, to get a feel for what they are.<br /><br />François<br /><a href="http://www.twitter.com/f_dion">@f_dion</a></p>
<p>
<em><a href="http://raspberry-python.blogspot.com/2013/02/minecraft-pi-edition-available.html">February 13, 2013 10:27 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.jordan-dimov.com/" title="Jordan Dimov">Jordan Dimov</a></h3>


<h4><a href="http://www.jordan-dimov.com/2013/02/jordans-cheese-selection-for-february-13-2013.html">Jordan's Cheese Selection for February 13, 2013</a></h4>
<p>
Continuing with the series that I started yesterday, below is today's selection of notable new or updated Python and Django modules from the Python Package Index (a.k.a. the cheeseshop): bob 1.1.2 by Idiap Research Institute, Switzerland -- Bob is a free signal-processing and machine learning toolbox written in a mix...</p>
<p>
<em><a href="http://www.jordan-dimov.com/2013/02/jordans-cheese-selection-for-february-13-2013.html">February 13, 2013 02:04 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.logilab.org/blog/6056?rql=Any%20E%20ORDERBY%20D%20DESC%20LIMIT%2020%20WHERE%20E%20is%20BlogEntry%2C%20E%20entry_of%20X%2C%20X%20eid%206056%2C%20E%20creation_date%20D&amp;vtitle=Main%20Blog%20%28in%20English%29" title="Main Blog (in English) RSS Feed">Logilab</a></h3>


<h4><a href="http://feedproxy.google.com/~r/logilaborg_en/~3/9KZH8K7IUbA/120046">FOSDEM 2013</a></h4>
<p>
<p>I was in Bruxelles for FOSDEM 2013. As with previous FOSDEM there were too many
interesting talks and people to see. Here is a summary of what I saw:</p>
<p>In the Mozilla's room:</p>
<ol class="arabic simple">
<li>The html5 pdf viewer <a class="reference" href="https://mozillalabs.com/en-US/pdfjs/">pdfjs</a> is impressive. The PDF specification is really
scary but this full featured &quot;native&quot; viewer is able to renders most of it
with very good performance. Have a look at the <a class="reference" href="http://mozilla.github.com/pdf.js/web/viewer.html">pdfjs demo</a>!</li>
</ol>
<ol class="arabic simple" start="2">
<li>Firefox debug tools overview with a specific focus of <a class="reference" href="https://github.com/mozilla/r2d2b2g">Firefox OS emulator</a> in
your browser.</li>
</ol>
<ol class="arabic simple" start="3">
<li>Introduction to webl10n: an internationalization format and library used in
<a class="reference" href="http://www.mozilla.org/en-US/firefoxos/">Firefox OS</a>.  A successful mix that results in a format that is idiot-proof
enough for a duck to use, that relies on Unicode specifications to handle
complex pluralization rules and that allows cascading translation
definitions.</li>
</ol>
<img alt="typical webl10n user" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Red-crested.pochard.slimbridge.arp.jpg/307px-Red-crested.pochard.slimbridge.arp.jpg" />
<ol class="arabic simple" start="4">
<li>Status of html5 video and audio support in Firefox. The topic looks like a
real headache but the team seems to be doing really well. Special mention
for the reverse demo effect: The speaker expected some format to be still
unsupported but someone else apparently implemented them over night.</li>
<li>Last but not least I gave a talk about the <a class="reference" href="http://mercurial.selenic.com/wiki/ChangesetEvolution">changeset evolution concept</a> that
I'm putting in Mercurial. Thanks goes to Feth for asking me his
<em>not-scripted-at-all-questions</em> during this talk.</li>
</ol>
<img alt="http://www.selenic.com/hg-logo/logo-droplets-150.png" src="http://www.selenic.com/hg-logo/logo-droplets-150.png" />
<p>In the <a class="reference" href="http://www.postgresql.org/">postgresql</a> room:</p>
<ol class="arabic simple">
<li>Insightful talk about more event trigger in postgresql engine and how this may
becomes the perfect way to break your system.</li>
<li>Full update of the capability of <a class="reference" href="http://postgis.net/">postgis</a> 2.0. The postgis suite was already
impressive for storing and querying 2D data, but it now have impressive
capability regarding <a class="reference" href="http://gvsig3d.blogspot.fr/2011/07/coming-soon-postgis-3d.html">3D</a> data.</li>
</ol>
<img alt="http://upload.wikimedia.org/wikipedia/en/6/60/PostGIS_logo.png" src="http://upload.wikimedia.org/wikipedia/en/6/60/PostGIS_logo.png" />
<p>On python related topic:</p>
<ul class="simple">
<li><a class="reference" href="http://www.aldebaran-robotics.com/en/">Aldebaran Robotic</a> are currently opening <a class="reference" href="https://github.com/aldebaran/">most of their code</a>. And
they are a perfect example of the value of python for implementing high level
logic.</li>
</ul>
<img alt="http://www.python.org/community/logos/python-logo-master-v3-TM-flattened.png" src="http://www.python.org/community/logos/python-logo-master-v3-TM-flattened.png" />
<ul class="simple">
<li>Victor Stinner has started an interesting project to improve CPython
performance. The first one: <a class="reference" href="https://bitbucket.org/haypo/astoptimizer/">astoptimizer</a> breaks some of the language
semantics to apply optimisation on compiling to byte code (lookup caching,
constant folding,…). The other, <a class="reference" href="http://hg.python.org/sandbox/registervm/">registervm</a> is a full redefinition of how the interpreter
handles reference in byte code.</li>
</ul>
<p>After the FOSDEM, I crossed the channel to attend a Mercurial sprint in London.
Expect more on this topic soon.</p></p>
<p>
<em><a href="http://feedproxy.google.com/~r/logilaborg_en/~3/9KZH8K7IUbA/120046">February 13, 2013 12:39 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://blog.ziade.org" title="Fetchez le Python">Tarek Ziade</a></h3>


<h4><a href="http://blog.ziade.org/2013/02/13/fun-with-angularjs-amp-cornice/">Fun with AngularJS &amp;amp; Cornice</a></h4>
<p>
<img alt="http://blog.ziade.org/dashboard.png" class="align-right" src="http://blog.ziade.org/dashboard.png" />
<p>I <a class="reference external" href="http://blog.ziade.org/2013/01/25/a-new-development-era-essay/">blogged about it</a>
a few weeks ago: in my opinion, we're moving to
an ecosystem where our web applications are built of JSON web services
and of Javascript applications that use those services to fetch
data and display them.</p>
<p>In other words, server-side templating is fading away and client-side
templating based on frameworks like AngularJs is getting a
lot of traction.</p>
<p>As a Python developer in the Mozilla Services team, one tool that
is starting to play an important role is <a class="reference external" href="https://cornice.readthedocs.org">Cornice</a>,
because it's the perfect companion for building a Javascript application.</p>
<p>Cornice features that are really useful in this context:</p>
<ul class="simple">
<li><a class="reference external" href="http://www.w3.org/TR/cors/">CORS</a> support</li>
<li>based on a robust &amp; mature framework: <a class="reference external" href="http://www.pylonsproject.org/">Pyramid</a></li>
<li>dead-simple Mozilla Persona integration, thanks to a
<a class="reference external" href="https://www.rfk.id.au/blog/entry/securing-pyramid-persona-macauth">vibrant Pyramid ecosystem</a></li>
<li>standard machine-parseable errors</li>
<li>can run everything in async mode</li>
</ul>
<div class="section" id="busting-the-myth-about-python-async-programming">
<h2>Busting the myth about Python &amp; async programming</h2>
<p>Before I talk about the topic, I want to make a little digression and
bust a myth about Python vs Javascript.</p>
<p>I have heard this sentence several times in Javascript and Node.js developers circles:</p>
<blockquote>
<em>Python doesn't support async programming</em></blockquote>
<p>I've even heard some people explaining that Python couldn't be used as an async
language because of the <a class="reference external" href="https://en.wikipedia.org/wiki/Global_Interpreter_Lock">GIL</a> !</p>
<p>Talking about the GIL in this context is completely out of topic. Like Python,
Javascript has something similar to the GIL (locks in &quot;Isolates&quot; in V8).
But the GIL becomes an issue only when you run several threads in the same process.</p>
<p>And in web programming, we don't really use threads anymore.</p>
<p>Node.js is single-threaded and uses <a class="reference external" href="https://github.com/joyent/libuv">libuv</a>
to run an event loop, and feeds the loop with callbacks.</p>
<p>Python has also libraries and frameworks that provide event loops. In fact,
Node.js was <a class="reference external" href="http://nodejs.org/about/">inspired by Twisted</a>.</p>
<p>There are libuv, libevent &amp; libev bindings in Python. And frameworks and
libraries that use those bindings to provide event loops.</p>
<p>That said, I am not a huge fan of callback programming, I find it quite hard to
read and debug. I like it better when I am working with thread-like objects.</p>
<p>Fortunately in Python we have <a class="reference external" href="http://www.gevent.org/">gevent</a> that will
provide <em>greenlets</em>, which are pseudo-threads that wrap callbacks and
an event loop - and you don't have to do callbacks anymore.</p>
<p>Gevent takes care of the gory details and let you do linear, functional programming
that can be traced, debugged, without falling into an horrible maze of callbacks.</p>
<p>A code like this...</p>
<div class="highlight"><pre><span class="c"># from https://github.com/SiteSupport/gevent/blob/master/examples/concurrent_download.py</span>
<span class="kn">import</span> <span class="nn">gevent</span>
<span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">monkey</span>
<span class="n">monkey</span><span class="o">.</span><span class="n">patch_all</span><span class="p">()</span>

<span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">'http://www.google.com'</span><span class="p">,</span> <span class="s">'http://www.yandex.ru'</span><span class="p">,</span> <span class="s">'http://www.python.org'</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">print_head</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'Starting </span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="n">url</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'</span><span class="si">%s</span><span class="s">: </span><span class="si">%s</span><span class="s"> bytes: </span><span class="si">%r</span><span class="s">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">data</span><span class="p">[:</span><span class="mi">50</span><span class="p">]))</span>

<span class="n">jobs</span> <span class="o">=</span> <span class="p">[</span><span class="n">gevent</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="n">print_head</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span> <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">]</span>

<span class="n">gevent</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">jobs</span><span class="p">)</span>
</pre></div>
<p>...will asynchronously download all URL pages, and let you work with <em>greenlets</em>.</p>
<p>Some people don't like this approach and use tools like Tornado, that
will let you start an event loop and define callbacks, like Node.js.</p>
<p>But enough said - my point is made:</p>
<p>Yes, the Python ecosystem has the same tools than the Javascript/Node.js
ecosystem to do async programming. <strong>And</strong> it has much more to offer in fact.</p>
</div>
<div class="section" id="cornice-for-the-json-apis">
<h2>Cornice for the JSON APIs</h2>
<p>For the Marketplace, we're working on building a separated application to provide
a metrics dashboard.</p>
<p>The goal is to display interactive dashboards filled with some <a class="reference external" href="http://www.highcharts.com/">Highcharts</a>
based charts.</p>
<p>The primary goal is to replace the ones we have in the Marketplace application,
that give to the users info like the number of downloads for their web apps.</p>
<p>For this, we're going to provide a set of JSON APIs on the top of an Elastic Search server,
using Cornice.</p>
<p>Cornice acts as a proxy in front of the Elastic Search server, but also provides a
few extra APIs and features we need - it also integrates the excellent <em>pyelasticsearch</em>
library.</p>
<p>To give you an idea of how hard is to build such an application with Cornice,
here's the core of the code:</p>
<div class="highlight"><pre><span class="n">es</span> <span class="o">=</span> <span class="n">Service</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'elasticsearch'</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="s">'/es'</span><span class="p">)</span>

<span class="nd">@es.post</span><span class="p">(</span><span class="n">validators</span><span class="o">=</span><span class="p">(</span><span class="n">valid_json_body</span><span class="p">,),</span> <span class="n">renderer</span><span class="o">=</span><span class="s">'json'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">query_es_time</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">request</span><span class="o">.</span><span class="n">es</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">validated</span><span class="p">[</span><span class="s">'body'</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="s">'time_*'</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">ElasticHttpError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">request</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">status_code</span>
        <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">error</span>
</pre></div>
<p>The Service class provided by Cornice does a lot of automation here, like
sending back a clean JSON error message in case the query is malformed. It also
checks that we don't return a JSON list - since that can be a security hole.
It makes sure the server returns a 405 if it's called with the wrong method,
etc.</p>
<p>You get the idea: Cornice takes care of the things we never think about,
and don't want to think about.</p>
</div>
<div class="section" id="angularjs-for-the-client-side">
<h2>AngularJS for the client-side</h2>
<p>I tried out <a class="reference external" href="http://emberjs.com/">Ember.js</a> and quickly disliked the way the
templating works in it, and the fact that they define objects for every
element you want to add in the DOM.</p>
<p>Cedric gave a more detailed comparison of <a class="reference external" href="http://beust.com/weblog/2012/12/29/migrating-from-ember-js-to-angularjs/">Ember vs Angular</a>,
and I really liked how Angular looked, so I gave it a shot and
instantly liked it.</p>
<p>Angular will let you define new DOM directives, that get
expanded on the client side at runtime.</p>
<p>For the dashboard, it means I can define something like this:</p>
<pre class="literal-block">
&lt;dasboard server=&quot;http://data.marketplace.mozilla.org/&quot;&gt;
    &lt;chart title=&quot;Downloads&quot; type=&quot;series&quot; field=&quot;downloads_count&quot;/&gt;
&lt;/dashboard&gt;
</pre>
<p>And have a nice Highchart dashboard that grabs data out of the
Cornice server that's behind <em>http://data.marketplace.mozilla.org</em> (Fake URL!)</p>
<p>Defining directives in Angular is done by providing an HTML template
and a bit of Javascript glue code.</p>
<p>In our case we also make the <strong>chart</strong> directive a sub-directive
of the <strong>dashboard</strong> directive - here's an extract of the code so you
get an idea:</p>
<pre class="literal-block">
var app = angular.module('components', []);

app.directive('dashboard', function() {
    return {
        restrict: 'E',
    scope: {},
    transclude: true,
    controller: function($scope, $element, $attrs) {
        this.server = $scope.server = $attrs.server;
        var charts = $scope.charts = [];
        this.addChart = function(chart) {
            charts.push(chart);
        }
    },
    template:
    '&lt;div class=&quot;tabbable&quot;&gt;' +
    '&lt;h3&gt;Monolith Dashboard&lt;/h3&gt;' +
    '&lt;div class=&quot;tab-content&quot; ng-transclude&gt;&lt;/div&gt;' +
    '&lt;/div&gt;',
    replace: true
    };
});
</pre>
<p>Full code: <a class="reference external" href="https://github.com/mozilla/monolith/blob/master/monolith/media/app.js#L30">https://github.com/mozilla/monolith/blob/master/monolith/media/app.js#L30</a></p>
<p>What I like about Angular is that it's easy to build something that's
based on a collection of <em>Plain Old Javascript Objects</em>, so I actually made a
separate library that takes care of creating a chart and interacting with the
server and the user, given a few tags ids:
<a class="reference external" href="https://github.com/mozilla/monolith/blob/master/monolith/media/lib/monolith.js#L194">https://github.com/mozilla/monolith/blob/master/monolith/media/lib/monolith.js#L194</a></p>
</div>
<div class="section" id="on-testing-javascript">
<h2>On testing Javascript</h2>
<p>I had no idea what was the state of the art for testing Javascript applications
since I am a backend developer, so I used what the Angular.js team use and partially built:
<a class="reference external" href="http://vojtajina.github.com/testacular/">Testacular</a> &amp; <a class="reference external" href="http://pivotal.github.com/jasmine/">Jasmine</a>.</p>
<p>Testacular is a nice command-line too that will spawn a Firefox instance and run your tests
in it. It has nice features like auto-running when a JS file changes, and you can
remote-controll it because it uses a Node.JS server to provide interactions.</p>
<p>Although, one thing that annoys me in Javascript (as opposed to Python), is the fact that it's
not easy to run processes in your tests fixtures.</p>
<p>What I needed to do is:</p>
<ul class="simple">
<li>run an Elastic Search server &amp; add content in it</li>
<li>run the Monolith Server</li>
<li>then, run the JS tests.</li>
</ul>
<p>In Python-land, all of this can happen in your test classes. In Javascript, unless
I missed the obvious, I had to wrap it in a Makefile: <a class="reference external" href="https://github.com/mozilla/monolith/blob/master/Makefile#L30">https://github.com/mozilla/monolith/blob/master/Makefile#L30</a></p>
<p>It's still a bit clunky because I cannot garantee the two servers are really stopped.
I should do something better. Maybe I'll end-up wrapping testacular in a Python unit tests... :)</p>
<p>Overall, I quite like building this kind of applications - and I think this pattern of
having a light Python web service on the server side, and some kind of JS MVC-based tool on
the client-side, is soon going to be the norm.</p>
</div></p>
<p>
<em><a href="http://blog.ziade.org/2013/02/13/fun-with-angularjs-amp-cornice/">February 13, 2013 11:22 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pycon.blogspot.com/" title="The PyCon blog">PyCon</a></h3>


<h4><a href="http://pycon.blogspot.com/2013/02/interview-with-tutorial-presenter.html">Interview with tutorial presenter Jessica McKellar</a></h4>
<p>
<b id="internal-source-marker_0.07969705341383815"><span>If you’re interested in learning to program, </span><a href="https://us.pycon.org/2013/"><span>PyCon 2013</span></a><span> is the place to be. Each year the conference draws a wide range of individuals, including those who work on and teach the Python language. </span><a href="https://us.pycon.org/2013/schedule/tutorials/"><span>The tutorials</span></a><span> are an especially great place to be as they’re an affordable way to gain the freshest knowledge from the best in the community.</span><br /><span></span><br /><span>That’s where Jessica McKellar comes in. She’s a </span><a href="http://www.python.org/psf/"><span>PSF</span></a><span> board member, </span><a href="http://twistedmatrix.com/"><span>Twisted</span></a><span> contributor, and organizer of the hugely successful </span><a href="http://bostonpythonworkshop.com/"><span>Boston Python Workshop</span></a><span>. The group hosts weekend training sessions in Boston, and they’ve been so popular that the methods are being applied around the country. The courses have gotten countless people up and running with Python, and that’s what her PyCon 2013 tutorial aims to do. </span><br /><span></span><br /><span>At 9 AM on Wednesday March 13th, her “</span><a href="https://us.pycon.org/2013/schedule/presentation/1/"><span>A hands-on introduction to Python for beginning programmers</span></a><span>” gets attendees on their way to loving programming via the Python language. “Thanks to the ‘batteries included’ philosophy and rich package ecosystem, you can do useful work in just a few lines of code after just a few hours of learning,” she says of the short road to getting started with Python.</span><br /><span></span><img height="427px;" src="https://lh6.googleusercontent.com/oGRD7KwskJeVOIrH3pNN7CivsblJrN2of0qPJglmNJORJm7zRuNsfnVnFqzugNLAiAPRJCeQmmWzGCA8ZNBh4SNbIWQI_M_zt-_QKFLToGWoOlkO-vMvi_Y" width="640px;" /><span></span></b><br /><div dir="ltr"><b id="internal-source-marker_0.07969705341383815"><span>Jessica with Boston Python Workshop attendees</span></b></div><b id="internal-source-marker_0.07969705341383815"><span></span><br /><span>Jessica and her fellow organizers in Boston are big on project-based curriculums, hooking the attendee on fun applications and showing them the way there. While learning some language basics, “attendees are programming graphical effects for a Color Wall, cheating at </span><span>Words with Friends</span><span>, and checking out live Twitter trends and data,” by the end of the day. Attendees of the tutorial will get their hands on some great introductory projects and have plenty of ideas to take home and further their learning.</span></b><br /><b><b id="internal-source-marker_0.07969705341383815"></b></b><br /><div dir="ltr"></div><blockquote class="tr_bq"><b><b id="internal-source-marker_0.07969705341383815"><span>“How could you not want to keep learning and practicing Python after that?!”</span></b></b></blockquote><br /><b><span>I knew Jessica had some experience planning events that target not just beginners to Python, but beginners to programming in general, as her tutorial will do. It turns out </span><span>all</span><span> of the intro workshops for the Boston group were like that!</span><br /><span></span><br /><span>Her popular PyCon 2012 talk, </span><span>“</span><a href="http://pyvideo.org/video/719/diversity-in-practice-how-the-boston-python-user"><span>Diversity in practice: How the Boston Python User Group grew to 1700 people and over 15% women</span></a><span>”</span><span>, presented with fellow organizer Asheesh Laroia, covers the successes of Boston Python Workshop’s efforts to grow and include more women in their community. At the time of that talk only a year ago, the group had just surpassed 1,800 members, 15% of whom were women. As of today, they’ve grown to over 3,000 while maintaining the 15% participation by women. At the heart of their growth are those beginners they brought in through the workshops.</span><br /><span></span><br /><span>In addition to Jessica’s tutorial, she’ll be giving one of the keynote talks during the conference weekend. The Outreach &amp; Education Committee member has a lot to say about the decline of computer science enrollment at the high school level, and she’s amped up to speak about both formal and informal computer science education approaches. Be sure to check out her keynote, it’ll be a great one.</span><br /><span></span><br /><span>Even though the conference is sold out, </span><span>tutorials are not</span><span>. Sign up for Jessica’s tutorial or any of the others today at </span><a href="https://us.pycon.org/2013/registration/"><span>https://us.pycon.org/2013/registration/</span></a><span>!</span></b></p>
<p>
<em><a href="http://pycon.blogspot.com/2013/02/interview-with-tutorial-presenter.html">February 13, 2013 11:14 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://myownhat.blogspot.com/search/label/python" title="My Own Hat">Tennessee Leeuwenburg</a></h3>


<h4><a href="http://myownhat.blogspot.com/2013/02/this-is-best-explanation-of-software.html">This is the best explanation of software maintenance that I have seen</a></h4>
<p>
<a href="http://clarityincode.com/software-maintenance/">http://clarityincode.com/software-maintenance/</a><br /><br />So, this is really great.</p>
<p>
<em><a href="http://myownhat.blogspot.com/2013/02/this-is-best-explanation-of-software.html">February 13, 2013 06:43 AM</a></em>
</p>





<h2>February 12, 2013</h2>




<hr /><h3 class="post"><a href="http://jugad2.blogspot.com/search/label/python" title="jugad2 - Vasudev Ram on software innovation">Vasudev Ram</a></h3>


<h4><a href="http://jugad2.blogspot.com/2013/02/pywhich-like-unix-which-tool-for-python.html">pywhich, like the Unix which tool, for Python modules</a></h4>
<p>
<p><a href="http://pypi.python.org/pypi/pywhich/1.0.1">pywhich 1.0.1 : Python Package Index</a></p><p>Saw it via a search for related tools.</p><p>Interesting idea.</p><p>I once wrote a which utility for Windows in C, not exactly the same as the standard Unix which tool, but somewhat customized for Windows.</p><p>The author of pywhich says on the site that he later found that others had written the same sort of tool as his pywhich, so I did a Google search for pywhich and found some more like it:</p><p>https://github.com/tbarron/backscratcher/blob/master/pywhich.py</p><p>https://github.com/lericson/lericson-verktyg/blob/master/pywhich</p><p>Writing command-line utilities (whether in C or a higher-level language like Python, Perl or Ruby), is good fun and also can be quite useful for projects one works on. Even with the ongoing move of software and hardware to the cloud, a lot of command-line tools are still needed and being written to manage cloud-based systems.</p><p>If you want to learn to write command-line utilities in C, on Unix/Linux or similar operating systems (Mac OS X, *BSD), you may like to check out my tutorial on the topic, on IBM developer Works:</p><p>Developing a Linux command-line utility:</p><p>http://www.ibm.com/developerworks/linux/library/l-clutil/</p><p>Thought the tutorial is written for C, many of the concepts explained apply to command-line utilities developed in higher-level languages too.</p><p>- Vasudev Ram<br />www.dancingbison.com</p><div class="blogger-post-footer"><a href="http://www.dancingbison.com">Vasudev Ram</a>
<br /></div></p>
<p>
<em><a href="http://jugad2.blogspot.com/2013/02/pywhich-like-unix-which-tool-for-python.html">February 12, 2013 10:53 PM</a></em>
</p>

    </div>
  </div>

  <div id="left-hand-navigation">
    <div id="menu">
      <ul class="level-one">
          <li>
          <ul class="level-two">
             <li><a href="rss20.xml">RSS feed</a></li>
             <li><a href="http://www.planetplanet.org/">Powered by Planet!</a></li>
	  </ul></li>
	  <li>Other Python Planets
            <ul class="level-two">
              <li><a href="http://planet.jython.org/">Planet Jython</a></li>
              <li><a href="http://www.voidspace.org.uk/ironpython/planet/">Planet IronPython</a></li>
              <li><a href="http://www.afpy.org/planet/">Planet Python Francophone</a></li>
              <li><a href="http://planeta.python.org.ar/">Planet Python Argentina</a></li>
              <li><a href="http://planetpython.matrix.jp/planet/">Planet Python Japan</a></li>
              <li><a href="http://python.org.br/planet/">Planet Python Brasil</a></li>
  	  </ul></li>
	  <li>Python Libraries
          <ul class="level-two">
            <li><a href="http://planet.laptop.org/">OLPC</a></li>
            <li><a href="http://planet.pysoy.org/">PySoy</a></li>
            <li><a href="http://planet.scipy.org/">SciPy</a></li>
            <li><a href="http://planet.sympy.org/">SymPy</a></li>
            <li><a href="http://planet.twistedmatrix.com/">Twisted</a></li>
	  </ul></li>
	  <li>Python/Web Planets
          <ul class="level-two">
            <li><a href="http://planet.cherrypy.org/">CherryPy</a></li>
            <li><a href="http://www.djangoproject.com/community/">Django Community</a></li>
            <li><a href="http://planet.plone.org/">Plone</a></li>
            <li><a href="http://planet.turbogears.org/">Turbogears</a></li>
            <li><a href="http://planetzope.org">Zope</a></li>
	  </ul></li>
	  <li>Other Languages
          <ul class="level-two">
            <li><a href="http://planet.haskell.org/">Haskell</a></li>
            <li><a href="http://planet.lisp.org/">Lisp</a></li>
            <li><a href="http://planet.parrotcode.org/">Parrot</a></li>
            <li><a href="http://planet.perl.org/">Perl</a></li>
            <li><a href="http://planetruby.0x42.net/">Ruby</a></li>
	  </ul></li>
	  <li>Databases
          <ul class="level-two">
	    <li><a href="http://www.planetmysql.org/">MySQL</a></li>
	    <li><a href="http://planet.postgresql.org/">PostgreSQL</a></li>
	    <li><a href=""></a></li>
	  </ul></li>
	  <li>Subscriptions
          <ul class="level-two">
<li><a href="opml.xml">[OPML feed]</a></li>
<li><a href="http://pythonfilter.com" title="pythonFilter">"Eric Wu's Pythonfilter"</a>
</li>
<li><a href="http://blaag.haard.se/" title="Fredrik Håård's Blaag">"Fredrik Håård's Blaag"</a>
</li>
<li><a href="http://freshfoo.com/blog" title="Menno's Musings">"Menno's Musings"</a>
</li>
<li><a href="http://mjtokelly.blogspot.com/search/label/Python" title="mokelly's devlog">"Michael J.T. O'Kelly"</a>
</li>
<li><a href="http://speno.blogspot.com/" title="Speno's Pythonic Avocado">"Speno's Pythonic Avocado"</a>
</li>
<li><a href="http://blog.wraithan.net/search/label/python" title="The Blaggin' Wraith">"The Blagin' Wraith"</a>
</li>
<li><a href="http://william-os4y.livejournal.com/" title="William's journal">"William's Journal"</a>
</li>
<li><a href="http://www.2general.com/blog/categories/python.html" title="2General: Python">2General</a>
</li>
<li><a href="http://dev.2degreesnetwork.com/search/label/python" title="dev@2degrees">2degrees</a>
</li>
<li><a href="http://advocacy.python.org/podcasts/" title="A Little Bit of Python">A Little Bit of Python</a>
</li>
<li><a href="http://emptysquare.net/blog/" title="A. Jesse Jiryu Davis - Posts about Python">A. Jesse Jiryu Davis</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=aahz" title="Aahz's Weblog">Aahz</a>
</li>
<li><a href="http://techarttiki.blogspot.com/search/label/python" title="Tech Art Tiki">Adam Pletcher</a>
</li>
<li><a href="http://adrian.org.ar" title="adrian.org.ar » python">Adrián Deccico</a>
</li>
<li><a href="http://alecmunro.blogspot.com/search/label/python" title="Experiments in public">Alec Munro</a>
</li>
<li><a href="http://blog.aclark.net/" title="Alex Clark - Python Web Developer">Alex Clark</a>
</li>
<li><a href="http://alexgaynor.net/tags/python/" title="Alex Gaynor's Blago-blog latest posts tagged with python">Alex Gaynor</a>
</li>
<li><a href="http://limi.net" title="On Python">Alexander Limi</a>
</li>
<li><a href="http://blog.abourget.net" title="Alexandre Bourget">Alexandre Bourget</a>
</li>
<li><a href="http://www.alexconrad.org/search/label/python" title="Alex Conrad">Alexandre Conrad</a>
</li>
<li><a href="http://peadrop.com/blog" title="Alexandre Vassalotti » Python">Alexandre Vassalotti</a>
</li>
<li><a href="http://un-pythonic.appspot.com/" title="Toward a secret sky">Ali Afshar</a>
</li>
<li><a href="http://amjith.blogspot.com/search/label/python" title="Core Dump">Amjith Ramanujam</a>
</li>
<li><a href="http://pyswarm.blogspot.com/" title="Aeonic - from UML to Python">Anastasios Hatzis</a>
</li>
<li><a href="http://techtonik.rainforce.org/search/label/python" title="another day another vice another roll of the dice">Anatoly Techtonik</a>
</li>
<li><a href="http://aroberge.blogspot.com/" title="Only Python">Andre Roberge</a>
</li>
<li><a href="http://www.dalkescientific.com/writings/diary/index.html" title="Andrew Dalke's writings">Andrew Dalke</a>
</li>
<li><a href="http://drozdyuk.blogspot.com/search/label/python" title="Andriy Drozdyuk">Andriy Drozdyuk</a>
</li>
<li><a href="http://mindref.blogspot.com/search/label/python" title="Mind Reference">Andriy Kornatskyy</a>
</li>
<li><a href="http://mysql-python.blogspot.com/" title="MySQL-Python">Andy Dustman</a>
</li>
<li><a href="http://halfcooked.com/blog" title="Andrew Channels Dexter Pinion">Andy Todd</a>
</li>
<li><a href="http://annaraven.blogspot.com/search/label/python" title="Meandering streams of consciousness">Anna Martelli Ravenscroft</a>
</li>
<li><a href="http://codingweasel.blogspot.com/search/label/python" title="The Coding Weasel">Anthony Baxter</a>
</li>
<li><a href="http://kpoxit.blogspot.com/search/label/python" title="kpoxit">Anton Belyaev</a>
</li>
<li><a href="http://bobrochel.blogspot.com/search/label/python" title="Beaver notes">Anton Bobrov</a>
</li>
<li><a href="http://lucumr.pocoo.org/" title="Recent Blog Posts">Armin Ronacher</a>
</li>
<li><a href="http://pyfunc.blogspot.com/search/label/python" title="Programmer's notebook">Ashish Vidyarthi</a>
</li>
<li><a href="http://xthought.org/" title="xthought.org feed">Ashley Camba</a>
</li>
<li><a href="http://www.toolness.com/wp" title="Toolness » Python">Atul Varma -- Toolness</a>
</li>
<li><a href="http://audreyr.posterous.com" title="Audrey M. Roy">Audrey Roy</a>
</li>
<li><a href="http://baijum.blogspot.com/search/label/python" title="Baiju Muthukadan's Blog">Baiju Muthukadan</a>
</li>
<li><a href="http://importthis.tumblr.com/" title="&amp;gt;&amp;gt;&amp;gt; Import this">Balthazar Rouberol</a>
</li>
<li><a href="http://www.mechanicalgirl.com/" title="MechanicalGirl.com | Python">Barbara Shaurette</a>
</li>
<li><a href="http://www.wefearchange.org/" title="Pumpichank">Barry Warsaw</a>
</li>
<li><a href="http://be.groovie.org/" title="be Groovie">Ben Bangert</a>
</li>
<li><a href="http://blog.codedstructure.net/search/label/python" title="Coded Structure">Ben Bass</a>
</li>
<li><a href="http://pybites.blogspot.com/" title="Python bytes">Benjamin Peterson</a>
</li>
<li><a href="http://just-another.net/tag/python/" title="Just-Another.Net blog posts with tag python">Benjamin W. Smith</a>
</li>
<li><a href="http://benjiyork.com/blog/" title="Benji York">Benji York</a>
</li>
<li><a href="http://zebert.blogspot.com/search/label/python" title="Paste here">Bertrand Mathieu</a>
</li>
<li><a href="http://www.billmill.org/" title="Bill Mill">Bill Mill</a>
</li>
<li><a href="http://news.open-bio.org/news" title="O|B|F News » Biopython">BioPython News</a>
</li>
<li><a href="http://bitofcheese.blogspot.com/" title="Bit Of Cheese">Bit of Cheese</a>
</li>
<li><a href="http://tillenius.me/blog/tag/python/" title="Bjorn Tillenius blog posts with tag intersection python">Björn Tillenius</a>
</li>
<li><a href="http://www.blendedtechnologies.com" title="Blended Technologies">Blended Technologies</a>
</li>
<li><a href="http://bluebream.posterous.com" title="BlueBream">BlueBream</a>
</li>
<li><a href="http://bluedynamics.com/pythonrelated" title="BlueDynamics Alliance - Python Related">BlueDynamics Alliance</a>
</li>
<li><a href="http://source.mihelac.org/categories/django/" title="code @ informatikaMihelac posts category feed">Bojan Mihelac</a>
</li>
<li><a href="http://rhodesmill.org/brandon" title="Let’s Discuss the Matter Further">Brandon Rhodes</a>
</li>
<li><a href="http://sayspy.blogspot.com/" title="Coder Who Says Py">Brett Cannon</a>
</li>
<li><a href="http://blog.briancurtin.com" title="brian curtin (python)">Brian Curtin</a>
</li>
<li><a href="http://ferringb.wordpress.com" title="ferringbs space » python">Brian Harring</a>
</li>
<li><a href="http://www.protocolostomy.com" title="Musings of an Anonymous Geek » Python">Brian Jones</a>
</li>
<li><a href="http://www.protocolostomy.com" title="Musings of an Anonymous Geek » Python">Brian Jones</a>
</li>
<li><a href="http://pythontesting.net" title="Python Testing">Brian Okken</a>
</li>
<li><a href="" title="">Bruno Rocha</a>
</li>
<li><a href="http://scrollingtext.org/taxonomy/term/29/0" title="ScrollingText - Python">Bryce Verdier</a>
</li>
<li><a href="http://www.caktusgroup.com/blog/" title="Caktus Blog">Caktus Consulting Group</a>
</li>
<li><a href="http://www.calvinx.com" title="Calvin's » Python">Calvin Cheng</a>
</li>
<li><a href="http://techblog.ironfroggy.com/" title="Developing Upwards">Calvin Spealman</a>
</li>
<li><a href="http://pyright.blogspot.com/" title="pyright">Carl Trachte</a>
</li>
<li><a href="http://themindcaster.blogspot.com/search/label/python" title="The Mindcaster">Carlos Eduardo de Paula</a>
</li>
<li><a href="http://blog.delaguardia.com.mx/" title="I blog therefore I am">Carlos de la Guardia</a>
</li>
<li><a href="http://eatthedots.blogspot.com/" title=":: eat the dots ::">Casey Duncan</a>
</li>
<li><a href="http://catherinedevlin.blogspot.com/search/label/python" title="Catherine: pyOraGeek">Catherine Devlin</a>
</li>
<li><a href="http://www.super-cooper.com" title="super-cooper » python">Chad Cooper</a>
</li>
<li><a href="http://blag.whit537.org/search/label/python" title="Chad Whitacre">Chad Whitacre</a>
</li>
<li><a href="http://www.checkandshare.com/blog" title="Checking &amp;amp; Sharing">Checking and Sharing</a>
</li>
<li><a href="http://metachris.org" title="metachris.org » Python">Chris Hager</a>
</li>
<li><a href="http://blog.cdleary.com/category/python/" title="Honest to a Segfault: Python category syndication">Chris Leary</a>
</li>
<li><a href="http://weblog.lonelylion.com" title="Lonely Lion » Python">Chris McAvoy</a>
</li>
<li><a href="http://plope.com" title="Chris McDonough's Python Feed">Chris McDonough</a>
</li>
<li><a href="http://chris-miles-writes-python.blogspot.com/" title="Chris Miles Writes Python">Chris Miles</a>
</li>
<li><a href="http://www.unquietdesperation.com" title="Unquiet Desperation » Python">Chris Miller</a>
</li>
<li><a href="http://percious.com/blog" title="percious.com">Chris Perkins</a>
</li>
<li><a href="http://lipyrary.blogspot.com/" title="LiPyrary - Python for books">Christian Heimes</a>
</li>
<li><a href="http://www.technobabble.dk/" title="Technobabble - Christian Jørgensen » Python">Christian Joergensen</a>
</li>
<li><a href="http://mrtopf.de/blog" title="mrtopf.de » Python">Christian Scholz</a>
</li>
<li><a href="http://the-space-station.com/" title="The Space Station">Christopher Denter</a>
</li>
<li><a href="http://www.cmlenz.net/archives/python/" title="about:cmlenz: python">Christopher Lenz</a>
</li>
<li><a href="http://percious.com/blog" title="percious.com » Python">Christopher Perkins</a>
</li>
<li><a href="http://www.evilchuck.com/search/label/python" title="EvilChuck">Chuck Thier</a>
</li>
<li><a href="http://www.redmountainsw.com/wordpress/2006/05/24/python-envy/#comments" title="Comments on Python Envy">Chui Tey</a>
</li>
<li><a href="http://cloudnumbers.com" title="cloudnumbers.com » Python">Cloudnumbers</a>
</li>
<li><a href="http://CodeSnipers.com/?q=taxonomy/term/16/0" title="CodeSnipers.com - Python">CodeSnipers</a>
</li>
<li><a href="http://oakwinter.com/code" title="Oakwinter.com :: Code » python">Collin Winter</a>
</li>
<li><a href="http://continuum.io/blog" title="Continuum Analytics » Python">Continuum Blog</a>
</li>
<li><a href="http://coreygoldberg.blogspot.com/search/label/python" title="Corey Goldberg">Corey Goldberg</a>
</li>
<li><a href="http://cormoran-project.blogspot.com/" title="Cormoran Development Blog">Cormoran Project</a>
</li>
<li><a href="http://www.craigkerstiens.com/" title="Category: Python | Craig Kerstiens">Craig Kerstiens</a>
</li>
<li><a href="http://labs.creativecommons.org" title="Labs » python">Creative Commons</a>
</li>
<li><a href="http://portablecommandline.blogspot.com/" title="Cross-Platform Command Line Tools">Cross-Platform Command Line Tools</a>
</li>
<li><a href="http://www.cubicweb.org/project?rql=Any%20X%2CT%2CCD%20ORDERBY%20CD%20DESC%20LIMIT%2020%20WHERE%20X%20is%20BlogEntry%2C%20X%20title%20T%2C%20X%20creation_date%20CD" title="Blog entries (CubicWeb's Forge) RSS Feed">CubicWeb</a>
</li>
<li><a href="http://blog.sandbox.lt/en" title="Dalius's bliki (tag: python)">Dalius Dobravolskas</a>
</li>
<li><a href="http://dfwpython.blogspot.com/" title="DFW Pythoneers">Dallas Fort Worth Pythoneers</a>
</li>
<li><a href="http://late.am/" title="late.am - Posts about python">Dan Crosta</a>
</li>
<li><a href="http://strombrg.blogspot.com/search/label/Python" title="Dan on Python">Dan Stromberg</a>
</li>
<li><a href="http://www.endlesslycurious.com" title="Endlessly Curious » Python">Daniel Brown</a>
</li>
<li><a href="http://pydanny.com/" title="pydanny">Daniel Greenfeld</a>
</li>
<li><a href="http://danielnouri.org/notes" title="Daniel Nouri's Blog">Daniel Nouri</a>
</li>
<li><a href="http://www.gefira.pl/blog" title="gefira blog » Planet Python">Dariusz Suchojad</a>
</li>
<li><a href="http://dabeaz.blogspot.com/" title="Dabeaz">Dave Beazley</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=goodger" title="David Goodger's Weblog">David Goodger</a>
</li>
<li><a href="http://www.davidgrant.ca/taxonomy/term/14/0" title="David Grant - python">David Grant</a>
</li>
<li><a href="http://www.djcinnovations.com" title="Beach's Brain » Python">David J C Beach</a>
</li>
<li><a href="http://thppython.blogspot.com/" title="thp on Python">David Janes</a>
</li>
<li><a href="http://dmalcolm.livejournal.com/" title="dmalcolm">David Malcolm</a>
</li>
<li><a href="" title="">David Marte</a>
</li>
<li><a href="http://traceback.org" title="david stanek's digressions">David Stanek</a>
</li>
<li><a href="http://codeinthehole.com/writing/tagged/python/" title="Writing on python | David Winterbottom">David Winterbottom</a>
</li>
<li><a href="http://daftpython.blogspot.com/" title="daftpython">Davy Mitchell</a>
</li>
<li><a href="http://davywybiral.blogspot.com/" title="Wybiral">Davy Wybiral</a>
</li>
<li><a href="http://www.luckydonkey.com" title="LuckyDonkey » Python">Dazza</a>
</li>
<li><a href="http://degizmo.com" title="DeGizmo">DeGizmo</a>
</li>
<li><a href="http://makkalot-opensource.blogspot.com/search/label/python" title="Open Sourced">Denis Kurov</a>
</li>
<li><a href="http://derrickpetzold.com" title="Derrick Petzold's blog » python">Derrick Petzold</a>
</li>
<li><a href="http://livingcode.org" title="Living Code">Dethe Elza</a>
</li>
<li><a href="http://alienghic.livejournal.com/" title="Diane Trout">Diane Trout</a>
</li>
<li><a href="http://www.djangoproject.com/weblog/" title="The Django weblog">Django Weblog</a>
</li>
<li><a href="http://djangocon.org/blog/" title="DjangoCon Latest Blog Feed">Djangocon</a>
</li>
<li><a href="http://www.djangofoo.com" title="Django foo">Djangofeed</a>
</li>
<li><a href="http://blog.doughellmann.com/search/label/python" title="Doug Hellmann">Doug Hellmann</a>
</li>
<li><a href="http://douglatornell.ca/blog" title="Doug Latornell">Doug Latornell</a>
</li>
<li><a href="http://feeds.feedburner.com/None" title="Dougal Matthews Home">Dougal Matthews</a>
</li>
<li><a href="http://dougma.com" title="Dougma (dŭg·mə) n. » python">Douglas Napoleone</a>
</li>
<li><a href="http://technicae.cogitat.io/search/label/python" title="Electric Duncan">Duncan McGreggor</a>
</li>
<li><a href="http://archlinux.me/dusty" title="Dusty's Diverse Domain » Python">Dusty Phillips</a>
</li>
<li><a href="http://easygui.wordpress.com" title="EasyGui">EasyGUI</a>
</li>
<li><a href="http://edcrewe.blogspot.com/search/label/python" title="Ed Crewe">Ed Crewe</a>
</li>
<li><a href="http://www.fishandcross.com/blog" title="Road Warrior Collaboration» Python">Ed Taekema</a>
</li>
<li><a href="http://edreamleo.blogspot.com/search/label/python" title="Explorations">Edward K. Ream</a>
</li>
<li><a href="http://eli.thegreenplace.net" title="Eli Bendersky's website » Python">Eli Bendersky</a>
</li>
<li><a href="http://blog.enthought.com" title="Enthought[s]">Enthought</a>
</li>
<li><a href="http://www.eflorenzano.com/blog/tag/python/" title="Eric Florenzano's Latest Posts for Tag Python">Eric Florenzano</a>
</li>
<li><a href="http://ericholscher.com/blog/categories/python/" title="Surfing in Kansas posts category feed">Eric Holscher</a>
</li>
<li><a href="http://europython.eu/" title="europython.eu latest entries">EuroPython</a>
</li>
<li><a href="http://www.evanfosmark.com" title="Evan Fosmark » Python">Evan Fosmark</a>
</li>
<li><a href="http://eventh.tumblr.com/" title="Eventh">Even Wiik Thomassen</a>
</li>
<li><a href="http://evennia.blogspot.com/" title="Griatch's Evennia musings">Evennia</a>
</li>
<li><a href="http://pydev.blogspot.com/" title="PyDev adventures">Fabio Zadrozny</a>
</li>
<li><a href="http://majid.info/blog" title="Fazal Majid's low intensity weblog » Python">Fazal Majid</a>
</li>
<li><a href="http://pyinsci.blogspot.com/" title="Python in Science">Flavio Coelho</a>
</li>
<li><a href="http://blog.devork.be/search/label/python" title="devork">Floris Bruynooghe</a>
</li>
<li><a href="http://f.souza.cc/search/label/python" title="Francisco Souza">Francisco Souza</a>
</li>
<li><a href="http://fwierzbicki.blogspot.com/" title="Frank Wierzbicki's Weblog">Frank Wierzbicki</a>
</li>
<li><a href="http://raspberry-python.blogspot.com/search/label/python" title="Raspberry Pi Python Adventures">François Dion</a>
</li>
<li><a href="http://feeding.cloud.geek.nz/tags/python/" title="pages tagged python">François Marier</a>
</li>
<li><a href="http://online.effbot.org" title="online.effbot.org">Fredrik Lundh</a>
</li>
<li><a href="http://www.frompythonimportpodcast.com" title="From Python Import Podcast">From Python Import Podcast</a>
</li>
<li><a href="http://blog.futurefoundries.com/search/label/python" title="Future Foundries">Future Foundries</a>
</li>
<li><a href="http://gael-varoquaux.info/blog" title="Gaël Varoquaux">Gael Varoquaux</a>
</li>
<li><a href="http://blog.extracheese.org/" title="Extra Cheese">Gary Bernhardt</a>
</li>
<li><a href="http://www.garyrobinson.net/" title="Gary Robinson's Rants">Gary Robinson</a>
</li>
<li><a href="http://thegarywilson.com/blog/" title="Gary Wilson Jr. - Latest blog entries tagged with: python">Gary Wilson</a>
</li>
<li><a href="http://geekscrap.com" title="geek scrap » python">Geek Scrap</a>
</li>
<li><a href="http://geert.vanderkelen.org" title="Geert JM Vanderkelen » python">Geert Vanderkelen</a>
</li>
<li><a href="http://blog.picante.co.nz/latest/feed/" title="Picante Solutions Blog">Gene Campbell</a>
</li>
<li><a href="http://pythonic.pocoo.org/" title="And now for something completely Pythonic...">Georg Brandl</a>
</li>
<li><a href="http://compiletoi.net/" title="Compile-toi toi même">Georges Dubus</a>
</li>
<li><a href="http://g.raphaelli.com/" title="g.raphaelli's weblog">Gilad Raphaelli</a>
</li>
<li><a href="http://hackermojo.com" title="Glenn Fanxman's python feed">Glenn Franxman</a>
</li>
<li><a href="http://glyph.twistedmatrix.com/" title="Deciphering Glyph">Glyph Lefkowitz</a>
</li>
<li><a href="http://paddy3118.blogspot.com/" title="Go deh!">Go Deh</a>
</li>
<li><a href="http://blog.gocept.com" title="gocept weblog » python">Gocept Weblog</a>
</li>
<li><a href="http://blog.godson.in/search/label/Python" title="Core Dump -- Godson Gera's Blog">Godson Gera</a>
</li>
<li><a href="http://devalien.com/blog" title="DevAlien">Gonçalo Margalho</a>
</li>
<li><a href="http://www.curiousvenn.com" title="Curious Venn » Python">Graeme Cross</a>
</li>
<li><a href="http://blog.dscpl.com.au/" title="Graham Dumpleton">Graham Dumpleton</a>
</li>
<li><a href="http://gramps-project.org" title="Gramps » Programming">Gramps</a>
</li>
<li><a href="http://defrobnication.blogspot.com/search/label/python" title="Defrobnication">Grant Baillie</a>
</li>
<li><a href="http://www.wisdomandwonder.com" title="Wisdom and Wonder » Python">Grant Rettke</a>
</li>
<li><a href="http://gc-taylor.com/" title="Greg Taylor">Greg Taylor</a>
</li>
<li><a href="http://blog.greglturnquist.com/search/label/spring%20python" title="Greetings Programs">Greg Turnquist</a>
</li>
<li><a href="http://third-bit.com/blog" title="The Third Bit » Python">Greg Wilson</a>
</li>
<li><a href="http://www.answermysearches.com" title="Answer My Searches » Python">Gregory Pinero</a>
</li>
<li><a href="http://agiletesting.blogspot.com/search/label/python" title="Agile Testing">Grig Gheorghiu</a>
</li>
<li><a href="http://blog.kollerie.com/" title="Guido Kollerie's Blog">Guido Kollerie</a>
</li>
<li><a href="http://neopythonic.blogspot.com/" title="Neopythonic">Guido van Rossum</a>
</li>
<li><a href="http://gustavonarea.net" title="Gustavo on Software Development » Python">Gustavo Narea</a>
</li>
<li><a href="http://blog.labix.org" title="Labix Blog » Python">Gustavo Niemeyer</a>
</li>
<li><a href="http://gumuz.nl/weblog/" title="gumuz.nl">Guyon Moree</a>
</li>
<li><a href="http://pycloud.blogspot.com/search/label/python" title="On Clouds, Poems, Python and more...">Gökhan Sever</a>
</li>
<li><a href="http://blog.hannosch.eu/search/label/python" title="..: hannosch :..">Hanno Schlichting</a>
</li>
<li><a href="http://4.flowsnake.org" title="Drinkable Chicken » python">Hans Nowak</a>
</li>
<li><a href="http://blog.vmfarms.com/search/label/python" title="VM Farms">Hany Fahim</a>
</li>
<li><a href="http://blog.patx.me/" title="patx - blog">Harrison Erd</a>
</li>
<li><a href="http://nomadblue.com/blog/python/" title="Nomadblue.com">Hector Garcia</a>
</li>
<li><a href="http://www.heikkitoivonen.net/blog" title="California Dreams » Python">Heikki Toivonen</a>
</li>
<li><a href="http://python-in-the-lab.blogspot.com/search/label/Python" title="Python in the Lab">Hernan Grecco</a>
</li>
<li><a href="http://www.hilarymason.com" title="hilarymason.com » python">Hilary Mason</a>
</li>
<li><a href="http://holgerkrekel.net" title="metaprogramming and politics">Holger Krekel</a>
</li>
<li><a href="http://www.huyng.com/" title="Huy Nguyen">Huy Nguyen</a>
</li>
<li><a href="http://hynek.me/" title="Blog of Hynek Schlawack">Hynek Schlawack</a>
</li>
<li><a href="http://ipython0.wordpress.com" title="IPython0 blog">IPython0 blog</a>
</li>
<li><a href="http://blog.ianbicking.org" title="Ian Bicking: a blog » Python">Ian Bicking</a>
</li>
<li><a href="http://ianozsvald.com" title="Entrepreneurial Geekiness » Python">Ian Ozsvald</a>
</li>
<li><a href="http://ilian.i-n-i.org" title="Between engineering and real life » Python">Ilian Iliev</a>
</li>
<li><a href="http://chicagodjango.com/blog/" title="Chicago Django/Python Blog - Imaginary Landscape">Imaginary Landscape</a>
</li>
<li><a href="http://inventwithpython.com/blog" title="The “Invent with Python” Blog">Invent with Python</a>
</li>
<li><a href="http://ionelmc.wordpress.com" title="ionel's codelog » python">Ionel Cristian</a>
</li>
<li><a href="http://python123.org" title="Python123's Blogs">Iraj Jelodari</a>
</li>
<li><a href="http://ironpython-urls.blogspot.com/" title="IronPython URLs">IronPython-URLs</a>
</li>
<li><a href="http://ishan.chattopadhyaya.com/blog" title="Chatman Diary » Python">Ishan Chattopadhyaya</a>
</li>
<li><a href="http://blog.isotoma.com" title="Isotoma Blog">Isotoma</a>
</li>
<li><a href="http://radian.org/notebook" title="code culture">Ivan Krstic</a>
</li>
<li><a href="http://radian.org/notebook" title="code culture">Ivan Krstic</a>
</li>
<li><a href="http://jackdied.blogspot.com/" title="Jack Diederich's Python Blog">Jack Diederich</a>
</li>
<li><a href="http://streamhacker.com" title="StreamHacker » python">Jacob Perkins</a>
</li>
<li><a href="http://wrongsideofmemphis.com" title="Wrong Side of Memphis » english">Jaime Buelta</a>
</li>
<li><a href="http://shortcircuit.net.au/~prologic/blog/" title="James Mills's Blog">James Mills</a>
</li>
<li><a href="http://listbot.org/" title="[ listbot.org - Python feed]">James Polera</a>
</li>
<li><a href="http://jtauber.com/blog/" title="James Tauber's Blog">James Tauber</a>
</li>
<li><a href="http://opkode.com" title="Opkode Blog">Jan-Carel Brand</a>
</li>
<li><a href="http://jaredforsyth.com/blog/categories/python/" title="Jared|Forsyth posts category feed">Jared Forsyth</a>
</li>
<li><a href="http://blog.jarrodmillman.com/search/label/python" title="Jarrod Millman">Jarrod Millman</a>
</li>
<li><a href="http://pipes.yahoo.com/pipes/pipe.info?_id=97756b01119b35e1215f3bcbdda71b92" title="python-posterous">Jason Baker</a>
</li>
<li><a href="http://www.bigjason.com/tags/python.html" title="BigJason.com posts tagged python.">Jason Webb</a>
</li>
<li><a href="http://ganwellresource.blogspot.com/search/label/python" title="Resource">Jean-Louis Fuchs</a>
</li>
<li><a href="http://as.ynchrono.us/search/label/python" title="Interesting Things, Largely Python and Twisted Related">Jean-Paul Calderone</a>
</li>
<li><a href="http://jeetworks.org/taxonomy/term/31/0" title="Python">Jeet Sukumaran</a>
</li>
<li><a href="http://jeethurao.com/blog" title="Jeethu's Blog">Jeethu Rao</a>
</li>
<li><a href="http://inre.dundeemt.com" title="In Re: » Python">Jeff Hinrichs</a>
</li>
<li><a href="http://www.jmcneil.net" title="Site Perceptive » python">Jeff McNeil</a>
</li>
<li><a href="http://thoughtamps.blogspot.com/" title="ThoughtAmps">Jeff Rush</a>
</li>
<li><a href="http://griddlenoise.blogspot.com/search/label/python" title="Griddle Noise">Jeff Shell</a>
</li>
<li><a href="http://jeffwinkler.net" title="Jeff's Brain Dump">Jeff Winkler</a>
</li>
<li><a href="http://jeremyhylton.blogspot.com/" title="Jeremy Hylton: Inconceivable">Jeremy Hylton</a>
</li>
<li><a href="http://jessenoller.com/" title="jesse noller">Jesse Noller</a>
</li>
<li><a href="http://housewifehacker.com" title="housewifehacker blog">Jessie Anderson</a>
</li>
<li><a href="http://www.zyasoft.com/pythoneering" title="Front Range Pythoneering">Jim Baker</a>
</li>
<li><a href="http://j1mfulton.blogspot.com/" title="Jim Fulton">Jim Fulton</a>
</li>
<li><a href="http://feetup.org/blog/dev/python" title="Feet up! : dev/python">Jim Hughes</a>
</li>
<li><a href="http://pyrseas.wordpress.com" title="Taming Serpents and Pachyderms » Python">Joe Abbate</a>
</li>
<li><a href="http://joepitz.wordpress.com" title="Joe Pitz - Technology Blog » Python">Joe Pitz</a>
</li>
<li><a href="http://blogs.gnome.org/johan" title="Johan Dahlin » Python">Johan Dahlin</a>
</li>
<li><a href="http://sontek.net" title="sontek.net">John Anderson</a>
</li>
<li><a href="http://clouddbs.blogspot.com/search/label/python" title="Python Cloud">John Burns</a>
</li>
<li><a href="http://www.johndcook.com/blog" title="The Endeavour » Python">John Cook</a>
</li>
<li><a href="http://www.johngag.com/feed/python/" title="johngag.com Latest Python Posts">John Gagliardi</a>
</li>
<li><a href="http://johnpaulett.com/tags/python/" title="johnpaulett.com / tags / python">John Paulett</a>
</li>
<li><a href="http://www.indelible.org/ink/" title="Indelible Ink">Jon Parise</a>
</li>
<li><a href="http://hashbeat.blogspot.com/search/label/Python" title="hashbeat">Jonathan Dobson</a>
</li>
<li><a href="http://spyced.blogspot.com/search/label/python" title="Spyced">Jonathan Ellis</a>
</li>
<li><a href="http://tartley.com" title="tartley.com » Python">Jonathan Hartley</a>
</li>
<li><a href="http://cleverdevil.org/" title=":: cleverdevil :: - computing">Jonathan LaCour</a>
</li>
<li><a href="http://cleverdevil.org/" title=":: cleverdevil :: - computing">Jonathan LaCour</a>
</li>
<li><a href="http://jonathanstreet.com/blog/" title="JonathanStreet.com blog feed">Jonathan Street</a>
</li>
<li><a href="http://www.jordan-dimov.com/" title="Jordan Dimov">Jordan Dimov</a>
</li>
<li><a href="http://blog.superadditive.com" title="Reality tunnels » python">Juan Rivas</a>
</li>
<li><a href="http://www.nixtu.info/search/label/python" title="Nixtu">Juho Vepsäläinen</a>
</li>
<li><a href="http://www.nuxeo.com/en/layout/set/print" title="Julien Anguenot">Julien Anguenot</a>
</li>
<li><a href="http://dev-tricks.net" title="{Dev Tricks} » Python">Julien Palard</a>
</li>
<li><a href="http://beauty-of-imagination.blogspot.com/search/label/python" title="Imagination">Julien Tayon</a>
</li>
<li><a href="http://juripakaste.fi/cgi/pyblosxom.cgi" title="Juri Pakaste - The Blog">Juri Pakaste</a>
</li>
<li><a href="http://blog.pythonisito.com/" title="Just a little Python">Just a little Python</a>
</li>
<li><a href="https://www.facebook.com/kai.diefenbach?tags=python" title="diefenba.ch - Blog">Kai Diefenbach</a>
</li>
<li><a href="http://lautaportti.wordpress.com" title="Kai Lautaportti">Kai Lautaportti</a>
</li>
<li><a href="http://kayeva.wordpress.com" title="Kamon Ayeva : Yet Another Blog">Kamon Ayeva</a>
</li>
<li><a href="http://therealkatie.net/blog" title="Latest Python entries from The Real Katie">Katie Cunningham</a>
</li>
<li><a href="http://nuitka.net" title="Nuitka Home and Blog of Kay Hayen (Python)">Kay Hayen</a>
</li>
<li><a href="http://fiber-space.de/wordpress" title="Trails in a Langscape » Python">Kay Schluehr</a>
</li>
<li><a href="http://kbyanc.blogspot.com/search/label/python" title="The Other Kelly Yancey">Kelly Yancey</a>
</li>
<li><a href="http://thechangelog.com" title="The Changelog » Python">Kenneth Reitz</a>
</li>
<li><a href="http://www.kennethreitz.com" title="Kenneth Reitz">Kenneth Reitz</a>
</li>
<li><a href="http://powertwenty.com/blog" title="Toes to the Edge » Python">Kevin Dahlhausen</a>
</li>
<li><a href="http://www.blueskyonmars.com" title="Blue Sky On Mars » Python">Kevin Dangoor</a>
</li>
<li><a href="http://nz.pycon.org/" title="nz.pycon.org feed">Kiwi PyCon</a>
</li>
<li><a href="http://konryd.blogspot.com/" title="Most recent call">Konrad Delong</a>
</li>
<li><a href="http://blog.ccpgames.com/kristjan" title="Kristján's cosmic percolator » Python">Kristján Valur</a>
</li>
<li><a href="http://justaworldaway.com" title="Just a World Away » python">Kriti Godey</a>
</li>
<li><a href="" title="">Krys Wilken</a>
</li>
<li><a href="http://gofedora.com" title="Fedora » Python">Kulbir Saini</a>
</li>
<li><a href="http://farmdev.com/thoughts/on/3/python/" title="Farmdev: Thoughts on Python">Kumar McMillan</a>
</li>
<li><a href="http://kunxi.org" title="Refactor the Life">Kun Xi</a>
</li>
<li><a href="http://kunxi.org" title="Refactor the Life » Python">Kun Xi</a>
</li>
<li><a href="http://kurtgrandis.com/blog" title="Kurt Grandis » PythonKurt Grandis">Kurt Grandis</a>
</li>
<li><a href="http://kushaldas.in" title="FOSS and life. Kushal Das talks here (Python)">Kushal Das</a>
</li>
<li><a href="http://shuttlethread.com/blog/aggregator-python" title="Shuttle Thread Blog">Laurence Rowe</a>
</li>
<li><a href="http://www.laurentluce.com" title="Laurent Luce's Blog">Laurent Luce</a>
</li>
<li><a href="http://laurentszyster.be/blog" title="Allegra">Laurent Szyster</a>
</li>
<li><a href="http://www.oluyede.org/blog" title="A song for the lovers">Lawrence Oluyede</a>
</li>
<li><a href="http://irukado.org" title="Lee Braiden's Blog » python">Lee Braiden</a>
</li>
<li><a href="http://hypatia.ca" title="hypatia dot ca » python">Leigh Honeywell</a>
</li>
<li><a href="http://regebro.wordpress.com" title="Lennart Regebro: Python, Plone, Web » python">Lennart Regebro</a>
</li>
<li><a href="http://leovt.wordpress.com" title="leovt » Python">Leonhard Vogt</a>
</li>
<li><a href="http://lesscode.org" title="lesscode.org">Lesscode.org</a>
</li>
<li><a href="http://www.lfcproject.com/blog/" title="LFC - Lightning Fast CMS">Lightning Fast CMS</a>
</li>
<li><a href="http://www.getlfs.com/blog" title="All news about LFS">Lightning Fast Shop</a>
</li>
<li><a href="http://lion.posterous.com" title="Lion's posterous">Lion Kimbro</a>
</li>
<li><a href="http://lionel.textmalaysia.com" title="Lionel's Blog » Python">Lionel Tan</a>
</li>
<li><a href="http://www.logilab.org/blog/6056?rql=Any%20E%20ORDERBY%20D%20DESC%20LIMIT%2020%20WHERE%20E%20is%20BlogEntry%2C%20E%20entry_of%20X%2C%20X%20eid%206056%2C%20E%20creation_date%20D&amp;vtitle=Main%20Blog%20%28in%20English%29" title="Main Blog (in English) RSS Feed">Logilab</a>
</li>
<li><a href="http://blog.lowkster.com/" title="Lowkster - Pythonly yours">Low Kian Seong</a>
</li>
<li><a href="http://blog.ludovf.net/feed/python/" title="Blog Home">Ludovico Fischer</a>
</li>
<li><a href="http://blog.sendapatch.se" title="blog.sendapatch.se">Ludvig Ericson</a>
</li>
<li><a href="http://lewk.org/blog" title="l e w k . o r g">Luke Macken</a>
</li>
<li><a href="http://lukeplant.me.uk/blog" title="All Unkept">Luke Plant</a>
</li>
<li><a href="http://lostinjit.blogspot.com/" title="Lost in JIT">Maciej Fijalkowsk</a>
</li>
<li><a href="http://mockit.blogspot.com/" title="Mock It!">Malthe Borch</a>
</li>
<li><a href="http://www.maltheborch.com" title="maltheborch.com">Malthe Borch</a>
</li>
<li><a href="http://www.themacaque.com" title="The Macaque » Python">Manuel de la Pena Saenz</a>
</li>
<li><a href="http://blog.vaig.be/search/label/Python" title="The Python &amp;amp; Marc Garcia">Marc Garcia</a>
</li>
<li><a href="http://www.python-blog.com" title="Python Blog - All about python">Marcin Kuźmiński</a>
</li>
<li><a href="http://marcuswhybrow.net" title="Marcus Whybrow » python">Marcus Whybrow</a>
</li>
<li><a href="http://pysnippet.blogspot.com/search/label/Python" title="PySnippet">Mario Boikov</a>
</li>
<li><a href="http://mg.pov.lt/blog" title="Random notes from mg">Marius Gedminas</a>
</li>
<li><a href="http://www.stochasticgeometry.ie" title="Stochastic Geometry » Python">Mark Dennehy</a>
</li>
<li><a href="http://shed-skin.blogspot.com/" title="Shed Skin - A (restricted) Python-to-C++ Compiler">Mark Dufour</a>
</li>
<li><a href="http://pywinauto.blogspot.com/" title="mark.py">Mark McMahon</a>
</li>
<li><a href="http://www.learningpython.com" title="learning python">Mark Mruss</a>
</li>
<li><a href="http://markpasc.org/mark/" title="markpasc.org weblog: python edition">Mark Paschal</a>
</li>
<li><a href="http://compoundthinking.com/blog" title="Compound Thinking » Python">Mark Ramm</a>
</li>
<li><a href="http://markos.gaivo.net/blog" title="A notch above a monkey » Python">Marko Samastur</a>
</li>
<li><a href="http://blog.startifact.com" title="Secret Weblog (planetpython)">Martijn Faassen</a>
</li>
<li><a href="http://www.zopatista.com" title="Zopatista">Martijn Pieters</a>
</li>
<li><a href="http://furius.ca/blog/tag/Python/" title="Furius Wanderlust News">Martin Blais</a>
</li>
<li><a href="http://mathieu.fenniak.net" title="Mathieu Fenniak's Weblog » programming">Mathieu Fenniak</a>
</li>
<li><a href="http://txzone.net" title="Txzone » Planet Python">Mathieu Virbel</a>
</li>
<li><a href="http://mysqlmusings.blogspot.com/search/label/python" title="MySQL Musings">Mats Kindahl</a>
</li>
<li><a href="http://matt.goodall.me/" title="Random Acts of Senseless Blogging">Matt Goodall</a>
</li>
<li><a href="http://hairysun.com/" title="Hairy Sun - Python">Matt Harrison</a>
</li>
<li><a href="http://themattreid.com/wordpress" title="[ themattreid ] » Python">Matt Reid</a>
</li>
<li><a href="http://www.circulartriangle.com/blog" title="Circular Triangle » python">Matt Wilkes</a>
</li>
<li><a href="http://www.stealthcopter.com/blog" title="Stealthcopter.com » python">Matthew Rollings</a>
</li>
<li><a href="http://goldenspud.com/rotr" title="ROTR » Python">Matthew Scott</a>
</li>
<li><a href="http://blog.tplus1.com" title="t+1 » Python">Matthew Wilson</a>
</li>
<li><a href="http://copypasteprogrammer.blogspot.com/search/label/python" title="The copy/paste programmer">Mattias Brändström</a>
</li>
<li><a href="http://smallpy.posterous.com" title="small py">Max Ischenko</a>
</li>
<li><a href="" title="">Max Khesin</a>
</li>
<li><a href="http://blog.klymyshyn.com/search/label/python" title="Django and other">Max Klymyshyn</a>
</li>
<li><a href="http://techspot.zzzeek.org" title="zzzeek">Michael Bayer</a>
</li>
<li><a href="http://mike.crute.org/blog" title="The Random Thoughts of a Programmer » python">Michael Crute</a>
</li>
<li><a href="http://levelpp.blogspot.com/" title="Level++">Michael Droettboom</a>
</li>
<li><a href="http://www.voidspace.org.uk/python/weblog/index.shtml" title="The Voidspace Techie Blog">Michael Foord</a>
</li>
<li><a href="http://starship.python.net/crew/mwh/blog/nb.cgi/category/weblog/python" title="mwh's blog: Category python">Michael Hudson</a>
</li>
<li><a href="http://micknelson.wordpress.com" title="Something-driven development » python">Michael Nelson</a>
</li>
<li><a href="http://blog.schmichael.com" title="schmichael's blog » Python">Michael Schurter</a>
</li>
<li><a href="http://yeoldeclue.com/cgi-bin/blog/blog.cgi" title="Yeoldeclue">Michael Sparks</a>
</li>
<li><a href="http://mikewatkins.ca/tags/python/" title="mike watkins dot ca">Michael Watkins</a>
</li>
<li><a href="http://mousebender.wordpress.com" title="Mousebender">Michal Kwiatkowski</a>
</li>
<li><a href="http://teamwork.mdomans.com/rss/python/" title="pythonic daily stream">Michał Domański</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=micheles" title="Michele Simionato's Weblog">Michele Simionato</a>
</li>
<li><a href="http://blog.vrplumber.com/" title="Plumbing Life's Depths - Snaking">Mike C. Fletcher</a>
</li>
<li><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a>
</li>
<li><a href="http://python-academy.blogspot.com/" title="Python Academy">Mike Müller</a>
</li>
<li><a href="http://mikenaberezny.com" title="Mike Naberezny » Python">Mike Naberezny</a>
</li>
<li><a href="http://mike.pirnat.com" title="Mike Pirnat">Mike Pirnat</a>
</li>
<li><a href="http://www.mikealrogers.com" title="Traceback (most recent call last): » Python">Mikeal Rogers</a>
</li>
<li><a href="http://kmike.ru/" title="kmike.ru">Mikhail Korobov</a>
</li>
<li><a href="http://opensourcehacker.com" title="Open Source Hacker » python">Mikko Ohtamaa</a>
</li>
<li><a href="https://dmoonc.com/blog" title="Desert Moon » Python">Mitch Chapman</a>
</li>
<li><a href="http://www.elastician.com/" title="Elastician">Mitchell Garnaat</a>
</li>
<li><a href="http://pythonbyexample.blogspot.com/" title="PythonByExample">Mitya Sirenef</a>
</li>
<li><a href="http://montrealpython.org" title="Montreal Python">Montreal Python User Group</a>
</li>
<li><a href="http://www.nidelven-it.no/weblogs/hosting" title="Nidelven IT - All about Python, Zope &amp;amp; Plone - and Open Source!">Morten W Petersen</a>
</li>
<li><a href="http://blog.mozilla.org/webdev" title="Mozilla Web Development » Python">Mozilla Web Development</a>
</li>
<li><a href="http://muharem.wordpress.com" title="Muharem Hrnjadovic">Muharem Hrnjadovic</a>
</li>
<li><a href="http://www.thesamet.com" title="Nadav Samet's Blog » python">Nadav Samet</a>
</li>
<li><a href="http://nadiana.com/taxonomy/term/8/0" title="Nadia Alramli's Blog - Python">Nadia Alramli</a>
</li>
<li><a href="http://nedbatchelder.com/blog" title="Ned Batchelder's blog">Ned Batchelder</a>
</li>
<li><a href="http://python.ca/nas/log/" title="Neil Schemenauer's Web Log">Neil Schemenauer</a>
</li>
<li><a href="http://sandbox.rulemaker.net/ngps" title="(render-blog Ng Pheng Siong)">Ng Pheng Siong</a>
</li>
<li><a href="http://nichol.as" title="Nicholas Piël» Python">Nicholas Piël</a>
</li>
<li><a href="http://www.boredomandlaziness.org/search/label/python" title="Boredom &amp;amp; Laziness">Nick Coghlan</a>
</li>
<li><a href="http://www.craig-wood.com/nick/articles" title="Nick Craig-Wood's Articles">Nick Craig-Wood</a>
</li>
<li><a href="http://pythoneering.blogspot.com/search/label/python" title="Pythoneering">Nick Efford</a>
</li>
<li><a href="http://nicdumz.fr/blog" title="Nicolas Dumazet - Blog">Nicolas Dumazet</a>
</li>
<li><a href="http://www.nicosphere.net/" title="Nic0's Sphere">Nicolas Paris</a>
</li>
<li><a href="http://nigelb.me/" title="Nigel Babu">Nigel Babu</a>
</li>
<li><a href="http://www.nikhilgopal.com/search/label/python" title="Optinalysis">Nikhil Gopal</a>
</li>
<li><a href="http://artificialcode.blogspot.com/search/label/python" title="Artificial Code">Noah Gift</a>
</li>
<li><a href="http://www.omahapython.org/blog" title="Omaha Python Users Group">Omaha Python Users Group</a>
</li>
<li><a href="http://omar.toomuchcookies.net" title="Omar Abo-Namous » python">Omar Abo-Namous</a>
</li>
<li><a href="http://ondrejcertik.blogspot.com/search/label/python" title="Ondřej Čertík">Ond&#345;ej &#268;ert&iacute;k</a>
</li>
<li><a href="https://openhatch.org/blog" title="The OpenHatch blog » python">OpenHatch Python posts</a>
</li>
<li><a href="http://orbited.org/blog" title="Orbited Blog">Orbited</a>
</li>
<li><a href="http://orestis.gr/tags/python/" title="Posts tagged with python">Orestis Markou</a>
</li>
<li><a href="http://blog.partecs.com" title="ParTecs Weblog » python">Partecs</a>
</li>
<li><a href="http://weblog.patrice.ch/" title="Patrice's Weblog">Patrice Neff</a>
</li>
<li><a href="http://pp.com.mx/blog" title="My blog » Python">Patricio Paez</a>
</li>
<li><a href="http://pkaudio.blogspot.com/search/label/python" title="pkaudio">Patrick Stinson</a>
</li>
<li><a href="http://news.e-scribe.com/tag/python" title="E-Scribe News : a programmer's blog : python">Paul Bissex</a>
</li>
<li><a href="http://pauleveritt.wordpress.com" title="Chatterbox, Reloaded">Paul Everitt</a>
</li>
<li><a href="http://www.logarithmic.net/pfh/blog_code" title="pfh's blog: code section">Paul Harrison</a>
</li>
<li><a href="http://codebright.wordpress.com" title="Codebright's Blog » Python">Paul Redman</a>
</li>
<li><a href="http://python.genedrift.org" title="Beginning Python for Bioinformatics">Paulo Nuin</a>
</li>
<li><a href="http://pedrokroger.net/" title="Category: python | Pedro Kroger">Pedro Kroger</a>
</li>
<li><a href="http://pedro.valelima.com" title="Underwater log feed for python">Pedro Lima</a>
</li>
<li><a href="http://www.petehunt.net/blog" title="Pete's Tech Blog">Pete Hunt</a>
</li>
<li><a href="http://www.peterbe.com/rss.xml" title="Peterbe.com">Peter Bengtsson</a>
</li>
<li><a href="http://petereisentraut.blogspot.com/search/label/Python" title="Peter Eisentraut's Blog">Peter Eisentraut</a>
</li>
<li><a href="http://excelsiorsystems.net/blog/tags/Python/" title="Entries for the tag Python">Peter Halliday</a>
</li>
<li><a href="http://push.cx" title="Push cx » Python">Peter Harkins</a>
</li>
<li><a href="http://peter-hoffmann.com" title="Peter Hoffmann - Python">Peter Hoffmann</a>
</li>
<li><a href="http://mindtrove.info" title="Parente's Mindtrove - Peter Parente">Peter Parente</a>
</li>
<li><a href="http://petro.tanrei.ca/" title="Petro Verkhogliad @ Experiment Room 4">Petro Verkhogliad</a>
</li>
<li><a href="http://www.philhassey.com/blog" title="Phil Hassey » python">Phil Hassey</a>
</li>
<li><a href="http://dunderboss.blogspot.com/search/label/python" title="__boss__">Philip Jenvey</a>
</li>
<li><a href="http://philikon.wordpress.com" title="philiKON - a journal » Python">Philipp von Weitershausen</a>
</li>
<li><a href="http://base-art.net" title="Base-Art / Articles">Philippe Normand</a>
</li>
<li><a href="http://dirtsimple.org/programming/index.html" title="PJE on Programming">Phillip J. Eby</a>
</li>
<li><a href="" title="Posts of Python Blog">Pierre Carbonnelle</a>
</li>
<li><a href="http://mancoosi.org/~abate/tags/python/feed" title="Pietro Abate homepage - python">Pietro Abate</a>
</li>
<li><a href="http://pradeepgowda.com" title="pradeepgowda.com">Pradeep Gowda</a>
</li>
<li><a href="http://flicker-technical.blogspot.com/search/label/Python" title="Hit n Trail">Pranav Pandey</a>
</li>
<li><a href="http://www.shutupandship.com/search/label/python" title="Shut Up and Ship">Praveen Gollakota</a>
</li>
<li><a href="http://www.eshlox.net/en/category/python/" title="Przemysław &quot;eshlox&quot; Kołodziejczyk - Blog entries in Python category.">Przemysław Kołodziejczyk</a>
</li>
<li><a href="http://blog.pyamf.org/" title="PyAMF Blog">PyAMF Blog</a>
</li>
<li><a href="http://blog.pycarolinas.org/" title="PyCarolinas">PyCarolinas</a>
</li>
<li><a href="http://blog.jetbrains.com/pycharm" title="JetBrains PyCharm Blog">PyCharm</a>
</li>
<li><a href="http://pycon.blogspot.com/" title="The PyCon blog">PyCon</a>
</li>
<li><a href="http://www.youtube.com/channel/UCqIXi78XLywLuW7Ew9JqjmA/videos" title="Uploads by pycon08">PyCon 2008 on YouTube</a>
</li>
<li><a href="http://pycon-au.org" title="Pycon Australia">PyCon Australia</a>
</li>
<li><a href="http://chris.neugebauer.id.au" title="chrisjrn's site » pyconau">PyCon Australia 2012 and 2013</a>
</li>
<li><a href="http://advocacy.python.org/podcasts/" title="PyCon Podcast">PyCon Podcast</a>
</li>
<li><a href="http://pyladies.com/blog/feeds/atom/" title="Blog">PyLadies</a>
</li>
<li><a href="http://morepypy.blogspot.com/" title="PyPy Status Blog">PyPy Development</a>
</li>
<li><a href="http://blog.pytexas.org/" title="PyTexas Blog">PyTexas</a>
</li>
<li><a href="http://pylonshq.com/articles.atom" title="PylonsHQ Article Feed">Pylons News Feed</a>
</li>
<li><a href="http://python4kids.wordpress.com" title="Python Tutorials for Kids 8+">Python 4 Kids</a>
</li>
<li><a href="http://www.awaretek.com/plf.html" title="Python411">Python 411 Podcast</a>
</li>
<li><a href="http://python-advocacy.blogspot.com/" title="About Python Advocacy">Python Advocacy</a>
</li>
<li><a href="http://www.pythondiary.com/" title="Python Diary latest blog entries">Python Diary</a>
</li>
<li><a href="http://blog.python.org/" title="Python Insider">Python Insider</a>
</li>
<li><a href="http://www.python.org/" title="Python News">Python News</a>
</li>
<li><a href="http://python-open-mike.posterous.com" title="Python Open Mike">Python Open Mike</a>
</li>
<li><a href="http://www.pyptug.org/" title="PYthon Piedmont Triad User Group">Python Piedmont Triad User Group</a>
</li>
<li><a href="http://pyfound.blogspot.com/" title="Python Software Foundation News">Python Software Foundation</a>
</li>
<li><a href="http://pythonsprints.com/" title="pythonsprints.com feed">Python Sprints</a>
</li>
<li><a href="http://pythontestingcookbook.posterous.com" title="Python Testing Cookbook">Python Testing Cookbook</a>
</li>
<li><a href="http://python-groups.blogspot.com/" title="Happenings in Python Usergroups">Python User Groups</a>
</li>
<li><a href="http://pythonxynews.blogspot.com/" title="Python(x,y)">Python(x,y) News</a>
</li>
<li><a href="http://www.pythonthreads.com" title="Python Programming Portal">PythonThreads</a>
</li>
<li><a href="http://pythonology.blogspot.com/" title="Pythonology">Pythonology</a>
</li>
<li><a href="http://ptspts.blogspot.com/search/label/planet-python" title="pts.blog">Péter Szabó</a>
</li>
<li><a href="http://www.bitdance.com/blog" title="Dancing With the Bits">R David Murray</a>
</li>
<li><a href="http://threebean.org/blog" title="[three]Bean">Ralph Bean</a>
</li>
<li><a href="http://www.ralph-heinkel.com/blog" title="Ralph's Blog">Ralph Heinkel</a>
</li>
<li><a href="http://blog.ram.rachum.com/" title="Ram Rachum's blog">Ram Rachum</a>
</li>
<li><a href="http://blog.sramana.in" title="Ramana's Blog">Ramana</a>
</li>
<li><a href="http://blog.randell.ph" title="Randell's Blog » Python">Randell Benavidez</a>
</li>
<li><a href="http://rhettinger.wordpress.com" title="Deep Thoughts by Raymond Hettinger">Raymond Hettinger</a>
</li>
<li><a href="http://reinout.vanrees.org/weblog/" title="Reinout van Rees' weblog">Reinout van Rees</a>
</li>
<li><a href="http://renesd.blogspot.com/search/label/python" title="making apps, making webs.">Rene Dudfield</a>
</li>
<li><a href="http://rgomes-info.blogspot.com/search/label/python" title="Notes, Experiences and Opinions by Richard Gomes">Richard Gomes</a>
</li>
<li><a href="http://www.mechanicalcat.net/richard/log/Python" title="Richard Jones' Log: Python">Richard Jones</a>
</li>
<li><a href="http://posted-stuff.blogspot.com/search/label/python" title="Stuff What I Posted">Richard Tew</a>
</li>
<li><a href="http://blog.cakebread.info/search/label/python" title="Rob Cakebread">Rob Cakebread</a>
</li>
<li><a href="http://www.robg3d.com" title="RobG3D » python">Rob Galanakis</a>
</li>
<li><a href="http://www.robgolding.com" title="- Articles">Rob Golding</a>
</li>
<li><a href="http://blog.nonsequitarian.org/tag/planetpython/" title="NonSequitarian: Newest Articles Tagged 'planetpython'">Rob Miller</a>
</li>
<li><a href="http://www.aminus.org/blogs/index.php?blog=2" title="The Hand of FuManChu - Categories: Python, Cation, CherryPy, Dejavu, WHELPS, WSGI">Robert Brewer</a>
</li>
<li><a href="http://rbtcollins.wordpress.com" title="Code happens » Python">Robert Collins</a>
</li>
<li><a href="http://robert-lujo.com/" title="Robert Lujo's Homepage">Robert Lujo</a>
</li>
<li><a href="http://rz.scale-it.pl/" title="Robert Zaremba Scale it blog - python posts">Robert Zaremba</a>
</li>
<li><a href="http://ralsina.com.ar" title="Lateral Opinion (python)">Roberto Alsina</a>
</li>
<li><a href="http://wxPython.org/blog" title="wxForty-Two">Robin Dunn</a>
</li>
<li><a href="http://diagrammes-modernes.blogspot.com/" title="diagrammes modernes">Robin Parmar</a>
</li>
<li><a href="http://www.upfrontsystems.co.za" title="Where I'm calling from">Roche Compaan</a>
</li>
<li><a href="http://www.serverzen.net/search/label/python" title="Technology by Rocky">Rocky Burt</a>
</li>
<li><a href="http://linil.wordpress.com" title="">Rodrigo Araúj</a>
</li>
<li><a href="http://garbas.si" title="Python">Rok Garbas</a>
</li>
<li><a href="http://ruslanspivak.com" title="Ruslan's Blog » python">Ruslan Spivak</a>
</li>
<li><a href="http://www.asciiarmor.com/" title="AsciiArmor">Ryan Cox</a>
</li>
<li><a href="http://naeblis.cx/rtomayko/weblog/python/" title="Ryan Tomayko (weblog/python)">Ryan Tomayko</a>
</li>
<li><a href="http://slott-softwarearchitect.blogspot.com/search/label/python" title="S.Lott-Software Architect">S. Lott</a>
</li>
<li><a href="http://www.sdjournal.com/archives/categories/languages/python/" title="SDJournal posts in Python category">SDJournal</a>
</li>
<li><a href="http://pythonide.blogspot.com/" title="SPE IDE - Stani's Python Editor">SPE Weblog</a>
</li>
<li><a href="http://bitshaq.com" title="bitshaq » python">Salman Haq</a>
</li>
<li><a href="http://ssutch.org" title="ssutch » python">Samuel Sutch</a>
</li>
<li><a href="http://sandrotosi.blogspot.com/search/label/Python" title="Sandro Tosi">Sandro Tosi</a>
</li>
<li><a href="http://python.scripting.com/xml/rss.xml" title="home News">Scripting the web with Python</a>
</li>
<li><a href="http://seanmcgrath.blogspot.com/search/label/python" title="Sean McGrath">Sean McGrath</a>
</li>
<li><a href="http://www.tummy.com/journals/users/jafo" title="Sean Reifschneider's Journal">Sean Reifschneider</a>
</li>
<li><a href="http://www.chesnok.com/daily" title="selena deckelmann » python | selena deckelmann">Selena Deckelmann</a>
</li>
<li><a href="http://uthcode.com/blog/" title="Uthcode">Senthil Kumaran</a>
</li>
<li><a href="http://blog.serverdensity.com" title="Server Density Blog » Python">Server Density</a>
</li>
<li><a href="http://jjinux.blogspot.com/search/label/python" title="JJinuxLand">Shannon -jj Behrens</a>
</li>
<li><a href="http://www.shiningpanda.com/blog/" title="ShiningPanda - Latest entries">ShiningPanda</a>
</li>
<li><a href="http://shriphani.com/blog" title="Shriphani Palakodety » python">Shriphani Palakodety</a>
</li>
<li><a href="http://simeonfranklin.com/blog/" title="simeonfranklin.com python feed">Simeon Franklin</a>
</li>
<li><a href="http://aboutsimon.com" title="About me and the things I do » Python">Simon</a>
</li>
<li><a href="http://www.brunningonline.net/simon/blog/" title="Small Values of Cool">Simon Brunning</a>
</li>
<li><a href="http://simonwillison.net/tags/python/" title="Simon Willison's items tagged python">Simon Willison</a>
</li>
<li><a href="http://entitycrisis.blogspot.com/search/label/Python" title="Entity Crisis">Simon Wittber</a>
</li>
<li><a href="http://blog.springsource.org" title="SpringSource Team Blog » python">SpringSource</a>
</li>
<li><a href="http://spyder-ide.blogspot.com/" title="spyder">Spyder IDE</a>
</li>
<li><a href="http://westmarch.sjsoft.com" title="westmarch » python">St James Software Development</a>
</li>
<li><a href="http://blog.behnel.de" title="Stefans Welt » Planet Python">Stefan Behnel</a>
</li>
<li><a href="http://stefan.sofa-rockers.org/category/python/" title="stefan.sofa-rockers.org » Category » Python">Stefan Scherfke</a>
</li>
<li><a href="http://www.jodal.no/" title="Stein Magnus Jodal">Stein Magnus Jodal</a>
</li>
<li><a href="http://pythonconquerstheuniverse.wordpress.com" title="Python Conquers The Universe">Stephen Ferg</a>
</li>
<li><a href="http://holdenweb.blogspot.com/search/label/python" title="For Some Value of &quot;Magic&quot;">Steve Holden</a>
</li>
<li><a href="http://rh0dium.blogspot.com/search/label/python" title="My Life">Steven Klass</a>
</li>
<li><a href="http://blog.lost-theory.org/" title="lost theorem » python">Steven Kryskalla</a>
</li>
<li><a href="http://www.devpicayune.com" title="Dev-Picayune » python">Steven Wilcox</a>
</li>
<li><a href="http://stdout.be" title="stdout » Django">Stijn Debrouwere</a>
</li>
<li><a href="http://wirtel.be/" title="Stephane Wirtel (@matrixise)">Stéphane Wirtel</a>
</li>
<li><a href="http://swaroop.wordpress.com" title="Comments on: Python">Swaroop C H</a>
</li>
<li><a href="http://swiftstack.com/" title="Python in SwiftStack">SwiftStack</a>
</li>
<li><a href="http://www.defuze.org" title="defuze.org » python">Sylvain Hellegouarch</a>
</li>
<li><a href="http://blog.ziade.org" title="Fetchez le Python">Tarek Ziade</a>
</li>
<li><a href="http://www.sauria.com/blog" title="Ted Leung on the Air » python">Ted Leung</a>
</li>
<li><a href="http://philosophyofweb.com" title="Philosophy of Web | Ted Nyman » python">Ted Nyman</a>
</li>
<li><a href="http://blog.teemu.im" title="blog.teemu.im » Python">Teemu Harju</a>
</li>
<li><a href="http://myownhat.blogspot.com/search/label/python" title="My Own Hat">Tennessee Leeuwenburg</a>
</li>
<li><a href="http://blogs.fluidinfo.com/terry" title="Terry Jones » python">Terry Jones</a>
</li>
<li><a href="http://www.swordstyle.com/blog2" title="Can You Defeat My Swordstyle?">Terry Peppers</a>
</li>
<li><a href="http://blog.aicookbook.com" title="The Artificial Intelligence Cookbook » Python">The Artificial Intelligence Cookbook</a>
</li>
<li><a href="http://themonkeyproject.wordpress.com" title="The Monkey Project">The Monkey Project</a>
</li>
<li><a href="http://blog.dowski.com" title="the occasional occurrence » Python">The Occasional Occurrence</a>
</li>
<li><a href="http://blog.parcon.opengroove.org/" title="The Parcon Blog">The Parcon Blog</a>
</li>
<li><a href="http://pythonpapers.blogspot.com/" title="The Python Papers">The Python Papers</a>
</li>
<li><a href="http://wordaligned.org" title="Word Aligned">Thomas Guest</a>
</li>
<li><a href="http://thomas.apestaart.org/log" title="thomas.apestaart.org » Python">Thomas Vander Stichele</a>
</li>
<li><a href="http://tech-foo.blogspot.com/search/label/python" title="Tech-Foo">Thomi Richards</a>
</li>
<li><a href="http://timgilbert.wordpress.com" title="Tim Gilbert's Blog » Python">Tim Gilbert</a>
</li>
<li><a href="http://ramblings.timgolden.me.uk" title="Moderate Realism » Python">Tim Golden</a>
</li>
<li><a href="http://kokorice.org/" title="Fresh from the plantation">Tim Knapp</a>
</li>
<li><a href="http://apipes.blogspot.com/search/label/python" title="Aftermarket Pipes">Tim Lesher</a>
</li>
<li><a href="http://dev.timparkin.co.uk/" title="Still Developing">Tim Parkin</a>
</li>
<li><a href="http://ivory.idyll.org/blog" title="Daily Life in an Ivory Basement">Titus Brown</a>
</li>
<li><a href="http://journal.thobe.org/" title="Wardrobe strength">Tobias Ivarsson</a>
</li>
<li><a href="http://thewebhaswon.wordpress.com" title="The Rising Tide » python">Tom Christie</a>
</li>
<li><a href="http://tomerfiliba.com/blog" title="tomerfiliba.com | Python Blog">Tomer Filiba</a>
</li>
<li><a href="http://tonybreyal.wordpress.com" title="Consistently Infrequent » Python">Tony Breyal</a>
</li>
<li><a href="http://better-inter.net/tag/python/" title="Making the internet a better place - python">Torsten Engelbrecht</a>
</li>
<li><a href="http://anonbadger.wordpress.com" title="The Ramblings » Python">Toshio Kuratomi</a>
</li>
<li><a href="http://technicaldiscovery.blogspot.com/search/label/python" title="Technical Discovery">Travis Oliphant</a>
</li>
<li><a href="http://blog.melhase.net" title="Round Rock River">Troy Melhase</a>
</li>
<li><a href="http://www.tryton.org" title="Tryton">Tryton News</a>
</li>
<li><a href="http://www.turnkeylinux.org/taxonomy/term/103/0" title="python">Turnkey Linux</a>
</li>
<li><a href="http://labs.twistedmatrix.com/" title="Twisted Matrix Laboratories">Twisted Matrix Labs</a>
</li>
<li><a href="http://copia.posterous.com" title="Copia">Uche Ogbuji</a>
</li>
<li><a href="http://united-coders.com/taxonomy/term/22/0" title="united-coders.com - python">United Coders</a>
</li>
<li><a href="http://vsbabu.org/mt/" title="vsbabu.org">V.S. Babu</a>
</li>
<li><a href="http://jugad2.blogspot.com/search/label/python" title="jugad2 - Vasudev Ram on software innovation">Vasudev Ram</a>
</li>
<li><a href="http://learnpython.wordpress.com" title="Learn Python">Vern Ceder</a>
</li>
<li><a href="http://pymolurus.blogspot.com/" title="Python molurus (the Indian Python)">Vinay Sajip</a>
</li>
<li><a href="http://plumberjack.blogspot.com/" title="Plumber Jack">Vinay Sajip (Logging)</a>
</li>
<li><a href="http://www.hardcoded.net/articles/" title="Hardcoded Software articles (python)">Virgil Dupras</a>
</li>
<li><a href="http://www.jrandolph.com/blog" title="Viva la Chipperfish » python">Viva La Chipperfish</a>
</li>
<li><a href="http://vperic.blogspot.com/search/label/Twisted" title="Vlada's SymPy/Twisted Blog">Vladimir Perić</a>
</li>
<li><a href="http://www.wallix.org" title="Wallix Development team's blog » python">Wallix</a>
</li>
<li><a href="http://opensource.washingtontimes.com/blog/" title="Blog post feed for all users">Washington Times OpenSource</a>
</li>
<li><a href="http://pieceofpy.com" title="Piece Of Py(thon)">Wayne Witzel</a>
</li>
<li><a href="http://1stvamp.org/tag/python" title="1stvamp.org">Wes Mason</a>
</li>
<li><a href="http://wescpy.blogspot.com/search/label/python" title="Core Python Programming">Wesley Chun</a>
</li>
<li><a href="http://www.wiggy.net/" title="Wichert Akkerman">Wichert Akkerman</a>
</li>
<li><a href="http://www.bluesock.org/~willg/blog" title="Will's blog">Will Kahn-Greene</a>
</li>
<li><a href="http://www.willmcgugan.com/blog/tech/" title="It's All Geek to Me">Will McGugan</a>
</li>
<li><a href="http://willpython.blogspot.com/" title="Will's Python Notebook">Will Pierce</a>
</li>
<li><a href="http://foolish-assertions.blogspot.com/search/label/python" title="Foolish Assertions">William Reade</a>
</li>
<li><a href="http://dietbuddha.blogspot.com/search/label/python" title="Hoarded Homely Hints">William Thompson</a>
</li>
<li><a href="http://wingware.blogspot.com/" title="Wingware Python IDE">Wingware</a>
</li>
<li><a href="http://wolfram.kriesing.de/blog" title="Pythoneer » Python">Wolfram Kriesing</a>
</li>
<li><a href="http://wyattbaldwin.com" title="Wyatt Baldwin » planet python">Wyatt Baldwin</a>
</li>
<li><a href="http://blog.madpython.com" title="Mad Python » python">Xavier Spriet</a>
</li>
<li><a href="http://www.yaco.es/blog" title="Yaco Sistemas » python-en">Yaco</a>
</li>
<li><a href="http://tech.blog.aknin.name" title="NIL: .to write(1) ~ help:about » python">Yaniv Aknin</a>
</li>
<li><a href="http://www.ylarrivee.com" title="Yann Larrivée » python">Yann Larrivée</a>
</li>
<li><a href="http://ygingras.net/" title="YGingras.net Blog Feed">Yannick Gingras</a>
</li>
<li><a href="http://uberpython.wordpress.com" title="Ubershmekel's Uberpython Pythonlog » python">Yuval Greenfield</a>
</li>
<li><a href="http://blog.zacharyvoase.com/" title="Zachary Voase’s Blog">Zachary Voase</a>
</li>
<li><a href="http://zakiakhmad.wordpress.com" title="Zaki Akhmad » python-en">Zaki Akhmad</a>
</li>
<li><a href="http://zeth.net/category/Python/" title="Zeth.net: Posts about Python">Zeth</a>
</li>
<li><a href="http://blog.bottlepy.org" title="bottlepy-dev">bottlepy-dev</a>
</li>
<li><a href="http://codeboje.de/" title="codeboje.de - coding and stuff by Tag python">codeboje</a>
</li>
<li><a href="http://www.egenix.com/company/news" title="eGenix.com News &amp;amp; Events">eGenix.com</a>
</li>
<li><a href="http://nl-project.blogspot.com/search/label/python" title="nl-project">nl-project</a>
</li>
<li><a href="http://planetpy.blogspot.com/" title="planet.python.org updates">planet.python.org updates</a>
</li>
<li><a href="http://radar.wiredobjects.eu" title="Radar - Insights, News and Facts » Python">wiredobjects</a>
</li>
<li><a href="http://zombofant.net/blog/tags/python" title="Posts with tag “python”">zombofant.net</a>
</li>
<li><a href="http://wokslog.wordpress.com" title="Merwok’s System Log » python">Éric Araujo</a>
</li>
<li><a href="http://lukasz.langa.pl/" title="lukasz.langa.pl: Recent entries tagged as python">Łukasz Langa</a>
</li>
<li> <i>To request addition or removal:<br />
e-mail planet at python.org (note, responses can take up to a few days)</i></li>	  
          </ul></li>
      </ul>
    </div>
  </div>
</body>
</html>
