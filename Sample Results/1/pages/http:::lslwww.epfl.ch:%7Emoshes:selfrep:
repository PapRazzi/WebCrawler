<HTML>

<HEAD>
<TITLE>Moshe Sipper, The Artificial Self-Replication Page</TITLE>
<META NAME="description"
      CONTENT="The Artificial Self-Replication Page">
<META NAME="keywords"
      CONTENT="artificial life, cellular automata, 
               complex adaptive systems, evolutionary computation,
               reproduction,
               unicellular, multicellular, replication, self-replication">
</HEAD>
<body bgcolor=#ffffff text=#000000 link=#0000cc vlink=#551a8b alink=#ff0000>



<center>
<table border=10 cellpadding=4 width=80%>
<tr>
<td align=left bgcolor="#ADEAEA" width=10%>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/selfrep/sipperloop.gif">
</td>
<td align=center bgcolor="#E9C2A6" width=80%>
   <IMG SRC="http://www.cs.bgu.ac.il/~sipper/selfrep/artselfrep.gif"><br>
</td>
<td align=right bgcolor="#ADEAEA" width=10%>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/selfrep/sipperloop.gif">
</td>
</tr>
</table>
</center>

<center>
<h1 align=center>by
<a HREF="http://www.moshesipper.com/" target="_top">
         Moshe Sipper</a></h1></P><P>
</center>

<!--
<center>
 <font size=-1>
  <a href="http://www.links2go.com/topic/Complex_Systems" target="_top">
   <img alt="Key Resource" src="gif/Links2GoSmall.gif"
    width=81 height=81 border=0><br>
    <b><i>Links<sup><small>2</small></sup>Go</i></b><br>Complex Systems
  </a>
 </font>
</center>
-->

<i>
<UL>
<DD>
... living organisms are very complicated aggregations of elementary
parts, and by any reasonable theory of probability or thermodynamics
highly improbable. That they should occur in the world at all is a
miracle of the first magnitude; the only thing which removes, or
mitigates, this miracle is that they reproduce themselves. Therefore,
if by any peculiar accident there should ever be one of them, from
there on the rules of probability do not apply, and there will be many
of them, at least if the milieu is reasonable.
<p align=right>
John von Neumann, Theory of Self-Reproducing Automata.</p>
</UL>
</i>

<p>
<strong>In the late 1940's</strong> 
eminent mathematician and physicist John von
Neumann had become interested in the question of whether a machine can
self-replicate, that is, produce copies of itself.  Von Neumann wished
to investigate the <i>logic</i> necessary for replication - he was not
interested, nor did he have the tools, in building a working machine
at the bio-chemical or genetic level.  Remember that at the time DNA
had not yet been discovered as the genetic material in nature.


<p>
The study of artificial self-replicating structures or machines has
been taking place now for almost half a century. Much of this work is
motivated by the desire to understand the fundamental
information-processing principles and algorithms involved in
self-replication, independent of their physical realization. An
understanding of these principles could prove useful in a number of
ways. It may advance our knowledge of biological mechanisms of
replication by clarifying the conditions that any self-replicating
system must satisfy and by providing alternative explanations for
empirically observed phenomena.  The fabrication of artificial
self-replicating machines can also have diverse applications, ranging
from
<a HREF="http://www.zyvex.com/nano/" target="_top">
nanotechnology</a>
to 
<A HREF="#freitas">
space exploration</a>.

<p>
One of the central models used to study self-replication is that of
<a HREF="http://www.cs.bgu.ac.il/~sipper/ca.html" target="_top">
cellular automata</a>
(CA).  CAs are dynamical systems in which space and
time are discrete. A cellular automaton consists of an array of cells,
each of which can be in one of a finite number of possible states,
updated synchronously in discrete time steps, according to a local,
identical interaction rule.  The state of a cell at the next time step
is determined by the current states of a surrounding neighborhood of
cells. This transition is usually specified in the form of a rule
table, delineating the cell's next state for each possible
neighborhood configuration.  The cellular array (grid) is
<i>n</i>-dimensional, where n=1,2,3 is used in practice.
For more information on CAs click
<a HREF="http://www.cs.bgu.ac.il/~sipper/ca.html" target="_top">
here</a>. One of the reasons for the ubiquitous use of CAs as a
vehicle for studies in self-replication seems to be historical: von
Neumann chose it for its simplicity and rigor - one can create a
scenario, or ``universe,'' as it is sometimes referred to, using
simple basic ingredients in a model that is mathematically rigorous.
Other models, however, have also been used in the study of
self-replication, as can be seen in this page.

<p>
A note concerning terminology: 
in a recent paper, Sipper et al. (1997 - see 
<a HREF="http://www.cs.bgu.ac.il/~sipper/poe.html" target="_top">
POE</a> page for exact reference) made a distinction between two
terms, <i>replication</i> and <i>reproduction</i>, which are often
considered synonymous. Replication is an
<a HREF="http://www.cs.bgu.ac.il/~sipper/poe.html" target="_top">
ontogenetic</a>, developmental process, involving no genetic
operators, resulting in an exact duplicate of the parent
organism. Reproduction, on the other hand, is a
<a HREF="http://www.cs.bgu.ac.il/~sipper/poe.html" target="_top">
phylogenetic</a> (evolutionary) process,
involving genetic operators such as crossover and mutation, thereby
giving rise to variety and ultimately to evolution. 
In most works described herein these two terms are considered synonymous
and are used interchangeably (indeed, most researchers seem to have opted
for the somewhat less correct term of reproduction).

<p>
<strong>The following page</strong>
summarizes research on self-replicating systems,
arranged in chronological order. Each system is described by the following
items: title, author(s), year, model, implementation (e.g., theoretical
work, computer simulation, hardware, bioware), reference(s), a short
description, and related work. You will also find a listing of some
general references and events related to self-replication.

<p>
The <strong>figures</strong> cited herein are available in the
following
<a HREF="http://www.cs.bgu.ac.il/~sipper/selfrep/figures.pdf" target="_top">
file</a>.

<p>
<strong>If you have an additional entry to suggest, I would
appreciate your sending it in html, adhering to the format below.</strong>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/smilie.gif">

<p>
<strong>Thanks</strong> to the following people for their suggestions:
<a href="mailto:elibach@ecitele.com">
   Eli Bachmutsky</a>,
<a href="http://www.cis.udel.edu/~case/">
   John Case</a>,
<a href="mailto:rfreitas@calweb.com">
   Robert A. Freitas Jr.</a>,
<a HREF="http://www.santafe.edu/~cgl/" target="_top">
   Chris Langton</a>,
<a href="http://ic-www.arc.nasa.gov/ic/people/jlohn/" target="_top">
   Jason Lohn</a>,
   Tom Ray,
<a href="http://necsi.org/postdocs/sayama/" target="_top">
      Hiroki Sayama</a>,
<a HREF="http://www-iis.unil.ch/people/mtomassi.html" target="_top">
   Marco Tomassini</a>,
<a HREF="http://www.cwi.nl/~paulv/" target="_top">
   Paul M. B. Vit&aacute;nyi</a>.


<p>
Last updated: October 16, 2005.

<p>
<a HREF="http://www.movavi.com/opensource/selfrep-be" target="_top">
   Translation of this page to Belarusian</a>

<p>
<a name="general">
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/eyes_left.gif"><br>
<IMG align=bottom SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/green_ball.gif">
<font size=4><strong>General references</strong></font>
<br>

<DL>
<li><!IMG SRC="new.gif">Robert A. Freitas Jr., Ralph C. Merkle,
    <strong><a href="http://www.molecularassembler.com/KSRM.htm" target="_top">
    Kinematic Self-Replicating Machines,</a></strong> Landes Bioscience, Georgetown, TX, 2004.

<li>M. Sipper, <strong><a href="http://www.moshesipper.com/mn/" target="_top">
    Machine Nature: The Coming Age of Bio-Inspired Computing,</a></strong>
    McGraw-Hill, New York, 2002.<br>

<li>M. Sipper and J. A. Reggia,
 <a HREF="http://www.cs.bgu.ac.il/~sipper/chessrep/src/chess.html" target="_top">
 <strong>Go forth and replicate</strong></a>,
 <i>Scientific American</i>, vol. 285, no. 2, pp. 26-35, August 2001.

<LI> <a HREF="http://mitpress.mit.edu/catalog/item/default.asp?sid=A76C2405-EB44-434C-84D3-B110D3DA3FE2&ttype=5&tid=459" target="_top">
     Special issue of Artificial Life Journal on Self-Replication</a>, Summer 1998.
<LI> <a HREF="http://www.cs.umd.edu/~reggia/" target="_top">
   J. A. Reggia</a>, H.-H. Chou, and J. D. Lohn.
   ``Cellular automata models of self-replicating systems,''
   <i>Advances in Computers</i>, M. Zelkowitz, Ed., vol. 47, pp.
   141-183. Academic Press, New York, 1998.
<LI> M. Sipper.
   ``<a HREF="http://www.moshesipper.com/papers/" target="_top">
   If the milieu is reasonable: Lessons from nature on creating life</a>.''
   <i>Journal of Transfigural Mathematics</i>, 
   Vol. 3, No. 1., pages 7-22, 1997. <br>
<LI> M. Sipper.
   ``<a HREF="http://www.moshesipper.com/papers/" target="_top">
   An introduction to artificial life</a>.''
   <i>Explorations in Artificial Life (special issue of AI Expert)</i>,
   pages 4-8, September 1995.
   Miller Freeman, San Francisco, CA. <br>
<LI> <a HREF="http://www.genetic-programming.com/jkpubs94.html" target="_top">
     J. R. Koza</a>,
 ``Artificial life: Spontaneous emergence of self-replicating and
  evolutionary self-improving computer programs,''
  <i>Artificial Life III</i>, C. G. Langton, editor, Reading, MA,
  1994, vol. XVII of <i>SFI Studies in the Sciences of Complexity</i>, pages
  225-262, Addison-Wesley.<br>
  (includes a short review section). 
</DL>

<!--
And - some self-replicating artwork:
<DL>
<LI> <a HREF="http://members.aol.com/tesselatns/SelfRDrag.html" target="_top">
     Self-Replicating Dragon</a>.
<LI>A small online
   <a href="http://www.cis.udel.edu/~case/replicate.html" target="_top">
   demo</a> of replication by
   <a href="http://www.cis.udel.edu/~case/" target="_top">John Case</a>.
</DL>
-->

<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/eyes_left.gif"><br>
<IMG align=bottom SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/green_ball.gif">
<font size=4><strong>Events related to self-replication</strong></font>
<br>

Further information (events, journals, and more) can be found
 <a HREF="http://www.cs.bgu.ac.il/~sipper/caslinks.html" target="_top">
 here</a>.
<DL>
<LI> <a HREF="http://diwww.epfl.ch/lami/ecal99/" target="_top"> 
        ECAL99 - Fifth European Conference on Artificial Life</a>
      (Sep. 13-17, 1999).
<LI> <a HREF="http://lslwww.epfl.ch/ices98/" target="_top">
        Second International Conference on Evolvable Systems: From Biology to 
        Hardware (ICES98)</a>
      (Sep. 23-26,1998).
<LI> <a HREF="http://alife6.alife.org/" target="_top">
     Artificial Life VI</a> (Jun. 26-29, 1998).
<LI> <a HREF="http://www.cogs.susx.ac.uk/ecal97/" target="_top"> 
        ECAL97 - Fourth European Conference on Artificial Life</a>
      (Jul. 28-31, 1997).
<LI> The von Neumann Day: Biological inspiration in computer science
     40 years from the death of John von Neumann (Jul. 25, 1997).
</DL>


<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/eyes_left.gif"><br>
<IMG align=bottom SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/green_ball.gif">
<font size=4><strong>Research on self-replicating systems</strong></font>
<br>

<a name="vonNeumann">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>

<strong>Title: Universal constructor-computer.</strong>
<br>
<strong>Author(s): John von Neumann (this work was completed
        posthumously by <A HREF="#burks">Arthur Burks</a>).</strong>
<br>
<strong>Year(s):</strong> Late 1940's.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor, cellular automaton with 29
        states per cell.
<br>
<strong>Implementation:</strong> Theoretical work (cf. 
        <A HREF="#signorini">
        Signorini</a>,
        <A HREF="#pesavento">
        Pesavento</a>,
        <A HREF="#beuchatHaenni">
        Beuchat and Haenni</a>).
<br>
<strong>Reference(s):</strong> J. von Neumann.
      <i>Theory of Self-Reproducing Automata</i>.
      University of Illinois Press, Illinois, 1966.
      Edited and completed by A. W. Burks.<br>
  See also <A HREF="#burks">Burks</a>.
<br>
<strong>Description:</strong> 

Von Neumann is credited with being the first to conduct a formal
investigation of self-replication by machines. In particular he asked
whether we can use purely mathematical-logical considerations to
discover the specific features of biological automata that make them
self-replicating.  To conduct a formal investigation of this issue,
von Neumann used the cellular automaton model, conceived by Stanislaw
Ulam.
<p>
Von Neumann used two-dimensional CAs with 29 states per cell and a
neighborhood consisting of 5 cells (the neighborhood consists of the
cell itself together with its four immediate nondiagonal neighbors).
He showed that a <i>universal computer</i> can be embedded in such
cellular space, namely, a device whose computational power is
equivalent to that of a universal Turing machine.  He also described
how a <i>universal constructor</i> may be built, namely, a machine
capable of constructing, through the use of a ``constructing arm,''
any configuration whose <i>description</i> can be stored on its input
tape.  The universal constructor is therefore capable, given its own
description, of constructing a copy of itself, i.e., of
self-replicating.  Note that terms such as <i>machine</i> and <i>tape</i> refer
to configurations of CA states - indeed the ability to formally
describe such structures served as a major motivation for von
Neumann's choice of the CA model.  It has been noted that the basic
mechanisms von Neumann proposed for attaining self-replication in
cellular automata bear strong resemblance to those employed by
biological life, discovered during the following decade.
<br>
<strong>Figure(s):</strong> 1.


<a name="penrose">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Mechanical self-replication.</strong>
<br>
<strong>Author(s): Lionel S. Penrose and Roger Penrose.</strong>
<br>
<strong>Year(s):</strong> 1959.
<br>
<strong>Model:</strong> Simple mechanical units.
<br>
<strong>Implementation:</strong> Plywood.
<br>
<strong>Reference(s):</strong> 
L. S. Penrose.
``Self-reproducing machines.''
<i>Scientific American</i>, Vol. 200, No. 6., pages 105-114, June 1959.
<br>
<strong>Description:</strong> Lionel Penrose, aided by his son Roger
Penrose, built simple mechanical units or bricks. An ensemble of such
units were placed in a box, which was then shaken. As described by
Penrose (1959): ``In fanciful terms, we visualized the process of
mechanical self-replication proceeding somewhat as follows: Suppose we
have a sack or some other container full of units jostling one another
as the sack is shaken and distorted in all manner of ways. In spite of
this, the units remain detached from one another. Then we put into the
sack a prearranged connected structure made from units exactly similar
to those already within the sack... Now we agitate the sack again in
the same random and vigorous manner, with the seed structure jostling
about among the neutral units. This time we find that replicas of the
seed structure have been assembled from the formerly neutral or
``lifeless'' material.''



<a name="earlyrefs">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Some other early references.</strong>
<br>
<strong>Year(s):</strong> 1950s.
<br>
<strong>Model:</strong> Various.
<br>
<strong>Implementation:</strong> Various.
<br>
<strong>Reference(s):</strong><br>

1. J. Kemeny, ``Man viewed as a machine,'' 
   <i>Scientific American</i>, Vol. 192, April 1955,
   pages 58-67.<br>  
   &nbsp;&nbsp;
  (Described, among others, <A HREF="#vonNeumann">von Neumann's</a> work.)<br>

2. E. F. Moore, ``Artificial living plants,'' <i>Scientific American</i>,
   Vol. 195, October 1956, pages 118-126.<br>
   &nbsp;&nbsp;
  (Speculations on applications for machines that can reproduce.)<br>
 
3. H. Jacobson, ``On models of reproduction,'' <i>American Scientist</i>,
   Vol. 46, 1958, pages 255-284.<br>  
   &nbsp;&nbsp;
  (Built a replicator using toy train parts running around a track.)<br>

4. H. J. Morowitz, ``A model of reproduction,'' 
   <i>American Scientist</i>, Vol. 47, 1959,
   pages 261-263.<br>  
   &nbsp;&nbsp;
   (Another construction of a simple physical replicator.)<br>




<a name="barricelli">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
 
<br>
<strong>Title: Numerical testing of evolution theories.</strong>
<br>
<strong>Author(s): Nils Aall Barricelli. </strong>
<br>
<strong>Year(s)</strong>: 1950s, 1960s. 
<br>
<strong>Model:</strong> Array of self-reproducing numbers. 
<br>
<strong>Implementation:</strong> Computer simulation. 
<br>
<strong>Reference(s):</strong> <br>
1. N. A. Barricelli. ``Numerical testing of evolution theories. Part I. 
Theoretical introduction and basic tests.''
<i>Acta Biotheoretica</i>, Vol. XVI, Parts I/II, pages 69-98, 1962. 
<br>
2. N. A. Barricelli. ``Numerical testing of evolution theories.
Part II. Preliminary tests of performance.  Symbiogenesis and
terrestrial life.'' <i>Acta Biotheoretica</i>, Vol. XVI, Parts III/IV,
pages 99-126. 1963.
<br>
3. J. Reed, R. Toombs, and N. A. Barricelli.  ``Simulation
of biological evolution and machine learning. I. Selection 
of self-reproducing numeric patterns by data processing machines,
effects of hereditary control, mutation type and crossing.''
<i>Journal of Theoretical Biology</i>, Vol. 17, pages 319-342. 1967.
<br>
4. Barricelli's work is described in detail in the book by George B. Dyson 
<i>Darwin Among the Machines: The Evolution of Global Intelligence</i>
(Perseus Press, Reading, MA, 1997).
<br>
<strong>Description:</strong> In the 1950s Nils Aall Barricelli
performed experiments in artificial life and artificial evolution,
being among the first (if not <i>the</i> first) to actually run
computer simulations. From Reference 1: ``The problem of testing
evolution phenomena and theories by using artificial self-reproducing
entities is discussed...  It is shown that the variability problem can
be solved assuming that self-reproducing patterns (called
symbio-organisms) of any complexity can be formed by a symbiotic
association of several self-reproducing entities, each with very low
variability or no variability at all (symbiogenesis theory)... Once
the variability problem was overcome, it was possible to design
artificial (e.g. numerical) self-reproducing entities able to develop
a variety of evolutionary phenomena.''
<p>
Barricelli ran computer simulations between 1953-1956 in Princeton,
New Jersey, using the electronic computer of the Institute for
Advanced Study. To get a flavor of what was meant by ``computer
simulations'' in those days, here's a quote from Reference 1: ``Part of
an evolution process developed in Princeton in 1956 is described in
fig. 24. The figure is obtained by a photographic method from IBM
cards punched by the computer and represents a part of the memory of
the computer at various stages during the evolution process.''





<a name="arbib">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Self-replicating universal automata.</strong>
<br>
<strong>Author(s): Michael A. Arbib.</strong>
<br>
<strong>Year(s):</strong> 1966.
<br>
<strong>Model:</strong> Universal array with programmable cells.
<br>
<strong>Implementation:</strong> Theoretical work.
<br>
<strong>Reference(s):</strong> 
 M. A. Arbib.
 ``Simple self-reproducing universal automata.''
 <i>Information and Control</i>, Vol. 9, pages 177-189, 1966.
<br>
<strong>Description:</strong> 
Arbib presented a universal array in which the self-replicating structure
is simpler to program (with respect to 
<A HREF="#vonNeumann">
Von Neumann's</a> system), yet built of more complex elemental cells.
The basic unit, or cell, is a finite automaton which can execute an
internal program of up to 20 instructions.  Arbib (1966) noted that
von Neumann had ``... shown that one may construct self-reproducing
universal arrays using as basic cells finite automata with only 29
states. The price we pay for the simplicity of the components is that
the coding of the array is enormously complicated, and the operation
of the array requires many many steps to simulate one cycle of an
ordinary Turing machine.'' With respect to his model he noted that
``The price we pay for the simplicity of programming and operation is
that our cells are more complicated... The point of our construction
is not that very simple or very complex components can be used to build
a self-reproducing automaton; but rather that, given components of one level
of complexity, we may use them to obtain self-reproducing aggregates
of an arbitrarily higher level of complexity...''
<br>
<strong>Related work:</strong>    
<A HREF="#sipper">Sipper</a>,
<A HREF="#lohn">Lohn and Reggia</a>.

<a name="codd">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Universal constructor-computer.</strong>
<br>
<strong>Author(s): E. F. Codd.</strong>
<br>
<strong>Year(s):</strong> 1968.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 8
        states per cell.
<br>
<strong>Implementation:</strong> Theoretical work.
<br>
<strong>Reference(s):</strong> E. F. Codd.
      <i>Cellular Automata</i>.
      Academic Press, New York, 1968.
<br>
<strong>Description:</strong> 
<A HREF="#vonNeumann">
Von Neumann's universal constructor-computer</a>
was simplified by Codd who used an 8-state,
5-neighbor cellular space.  Self-replication is obtained as a special
case of universal construction, just as with von Neumann's work.

<a name="smith">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Simple nontrivial self-replicating machines.</strong>
<br>
<strong>Author(s): Alvy Ray Smith.</strong>
<br>
<strong>Year(s):</strong> 1968-69.
<br>
<strong>Model:</strong> Cellular automata.
<br>
<strong>Implementation:</strong> Theoretical work.
<br>
<strong>Reference(s):</strong> The original work was carried out in
the late 1960's as part of Smith's Ph.D. dissertation, but was made
widely available in 1992.<br>
  A. R. Smith.
  ``Simple nontrivial self-reproducing machines.''
  In C. G. Langton, C. Taylor, J. D. Farmer, and S. Rasmussen, editors,
  <i>Artificial Life II</i>, volume X of <i>SFI Studies in the Sciences
  of Complexity</i>, pages 709-725, Redwood City, CA, 1992. Addison-Wesley.
<br>
<strong>Description:</strong>
<A HREF="#vonNeumann">
Von Neumann's</a> proof of the possibility of machine self-replication
is achieved via a book-length constructive proof. Smith provided a
two-page proof of the possibility of machine self-replication (thus
his proof is existence rather than constructive). Whereas von Neumann
required both computation universality and construction universality
of his self-replicating machines, Smith showed that computational
universality alone suffices.  Smith (1992) noted that ``the proof here
reduces the problem of self-construction to a computation problem,
which means that no machinery beyond ordinary computation theory is
required for self-reproduction.''

<a name="burks">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Essays on cellular automata.</strong>
<br>
<strong>Author(s): 
     Arthur W. Burks (editor).</strong>
<br>
<strong>Year(s):</strong> 1970.
<br>
<strong>Model:</strong> Cellular automata.
<br>
<strong>Implementation:</strong> Theoretical work.
<br>
<strong>Reference(s):</strong>
A. W. Burks. <i>Essays on Cellular Automata</i>, University of Illinois Press,
Urbana, Illinois, 1970.
<br>
<strong>Description:</strong>
A compendium of works on cellular automata, in particular drawing
inspiration from <A HREF="#vonNeumann">von Neumann's</a>
work. Chapters dealing specifically with self-replication:<br>
Chapter 1: ``Von Neumann's self-reproducing automata,`` Arthur W. Burks,
           pages 3-64.<br>
Chapter 4: ``Self-describing Turing machines and self-reproducing cellular
           automata,`` J. W. Thatcher, pages 103-131.<br>
Chapter 6: ``Machine models of self-reproduction,`` Edward F. Moore, 
           pages 187-203.<br>
Chapter 8: ``The abstract theory of self-reproduction,'' John Myhill, 
           pages 206-218.



<a name="case">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
 
<br>
<strong>Title: Periodicity in generations of automata.</strong>
<br>
<strong>Author(s):
    <a href="http://www.cis.udel.edu/~case/" target="_top">
     John Case</a>. </strong>
<br>
<strong>Year(s)</strong>: 1971-74. 
<br>
<strong>Model:</strong> Universal constructors with Turing Machines for 
brains and for (generating) blueprints. 
<br>
<strong>Implementation:</strong> Theoretical work. 
<br>
<strong>Reference(s):</strong> 
<br>
1. J. Case. ``A note on degrees of self-describing Turing machines.''
<i>Journal of the Association for Computing Machinery</i>, Vol. 18, 
pages 329-338, 1971. 
<br>
2. J. Case. ``Recursion theorems and automata which construct.'' 
<i>Proceedings of the  1974 Conference on Biologically Motivated Automata 
Theory</i>, IEEE, New York, N.Y., 1974. 
<br>
3. J. Case. ``Periodicity in generations of automata.'' <i>Mathematical 
Systems Theory</i>, Vol. 8, pages 15-32, 1974. 
<br>
<strong>Description:</strong>  This work was partly inspired by Myhill's 
paper reprinted as Chapter 8 in <A HREF="#burks">Burks's <i>Essays on 
Cellular Automata</i></a>. 
Considered are machines which construct distortions of themselves.  
This includes the cases of machines that eventually have a sterile 
descendant, those which after a delay of <i>m</i> generations repeat 
every <i>n</i> generations, and those that are aperiodic over generations.  
The third reference contains discussion of the meaning for biology of the
case of periodicity in generations, where the period <i>n</i> is greater 
than 1.
It is shown that there are no algorithms for deciding of a progenitor 
machine many things about its descendants.  For example, there is no 
algorithm for deciding of a progenitor which does not have sterile 
descendants whether its descendants are periodic or aperiodic in 
generations.
The third reference also introduces the author's operator recursion theorem, 
an infinitary analog of Kleene's recursion theorem.  This tool 
subsequently found application in abstract complexity theory and in
<a href="http://www.cis.udel.edu/~case/colt.html">computational learning 
theory</a>. 



<a name="bratley">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Self-replicating programs.</strong>
<br>
<strong>Author(s): Paul Bratley and Jean Millo.</strong>
<br>
<strong>Year(s):</strong> 1972.
<br>
<strong>Model:</strong> Computer program.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
P. Bratley and J. Millo. ``Computer recreations: Self-reproducing
programs.'' <i>Software Practice and Experience</i>, Vol. 2, pages
397-400, 1972.
<br><br>
See
<a HREF="http://www.nyx.net/~gthompso/quine.htm" target="_top"> 
The Quine Page</a> for several examples of self-replicating programs.

<a name="devore">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Self-replicating computer.</strong>
<br>
<strong>Author(s): John Devore.</strong>
<br>
<strong>Year(s):</strong> Early 1970's.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 8
        states per cell.
<br>
<strong>Implementation:</strong> Theoretical work.
<br>
<strong>Reference(s):</strong> <br>
Apparently never published.<br>
J. Devore and R. Hightower. ''The Devore variation of the Codd self-replicating
computer.'' Presented at <i>Artificial Life III</i>, Santa Fe, New
Mexico, 1992.
<br>
<strong>Description:</strong>
A simplification of <A HREF="#codd">Codd's</a> automaton.



<a name="vitanyi">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Sexually reproducing cellular automata.</strong>
<br>
<strong>Author(s): 
  <a HREF="http://www.cwi.nl/~paulv/" target="_top">
  Paul M. B. Vit&aacute;nyi</a>.</strong>
<br>
<strong>Year(s):</strong> 1973-74.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor, cellular
automaton with 29 states per cell (like 
<A HREF="#vonNeumann">von Neumann</a>) or
two-dimensional, 5-neighbor cellular automaton with 8 states per cell
(like <A HREF="#codd">Codd</a>).
<br>
<strong>Implementation:</strong> Theoretical work.
<br>
<strong>Reference(s):</strong> <br>
1. P. M. B. Vitanyi. ``Sexually reproducing cellular automata.''
<i>Mathematical Biosciences</i>, Vol. 18, pages 23-54, 1973.<br>
2. P. M. B. Vitanyi. ``Genetics of reproducing automata.'' In:
<i>Proc. 1974 Conference on Biologically Motivated Automata Theory</i>,
IEEE, New York, N. Y., 1974, pages 166-171.<br>
(Related paper: P. M. B. Vitanyi. ``On a problem in the collective behavior
  of automata.'' <i>Discrete Mathematics</i>, Vol. 14, pages 99-101 (1976). )
<br>
<strong>Description:</strong> Sexual reproduction is modeled and
investigated in the formal framework of 
<A HREF="#vonNeumann">
John von Neumann's</a> theory of self-reproducing cellular automata.
It is argued that the transition from asexual to sexual reproduction
necessitates a change in number and structure of the genetic tapes
involved. To an asexually reproducing automaton only one genetic tape
is attached, viz. the description which enables the automaton to
construct cell for cell a replica of itself. The sexually reproducing
automaton, however, must possess two, nearly identical, genetic tapes
of a deviating structure, i.e., programs partitioned into sections
embodying the various construction and behavioral algorithms to be
executed. It is shown that the recombination of the parents'
characteristics in the offspring closely conforms to recombination in
nature. Similarities and differences with biological systems are
discussed.
The model accounts for many biological phenomena that are known and
predicts phenomena that are not yet known, e.g., genetics-linked
sterility or transsexuality. This may be of interest to biologists.
<p>
(In the related paper Vit&aacute;nyi showed that in a cellular space
the number of active units arising from a given number of active units
is a function that rises faster than any computable function.  This
holds also for the function that gives the size of a steady-state
population of reproducing automata as a function of a given start
population. That is the relevance to self-replicating CA's.  This
holds even under the most severe restrictions on neighborhood and
dimension of the CA.)


<a name="laing">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replicating molecular machines.</strong>
<br>
<strong>Author(s): Richard Laing.</strong>
<br>
<strong>Year(s):</strong> 1975-1977.
<br>
<strong>Model:</strong> Artificial molecular machines. Replication is attained
        by self-inspection.
<br>
<strong>Implementation:</strong> Theoretical work.
<br>
<strong>Reference(s):</strong> <br>
1. R. Laing.
   ``Some alternative reproductive strategies in artificial molecular
     machines.''
     <i>Journal of Theoretical Biology</i>, Vol. 54, pages 63-84, 1975. <br>

2. R. Laing.  ``Automaton introspection.''
   <i>Journal of Computer and System Sciences</i>, Vol. 13, pages 172-183, 
   1976. <br>

3. R. Laing. ``Automaton models of reproduction by self-inspection.''
   <i>Journal of Theoretical Biology</i>, Vol. 66, pages 437-456, 1977.
<br>
<strong>Description:</strong> The artificial molecular machines
introduced by Laing are chains (possibly folded and interconnected) of
basic molecule-like constituents. As put by Laing (1977): ``The basic
components of our system consist of strands or <i>strings</i> of
primitive constituent finite state automata, these component strings
being in sliding contact... A primitive constituent of a string can be
in an activated or passive state. An active primitive constituent in
contact with a passive constituent of another string will interact
with the passive constituent in precisely defined ways only. These
ways include <i>changing</i> the state of the contacted passive
primitive, <i>reacting</i> to the state of the contacted passive
primitive, <i>sliding</i> to the next neighbor of the contacted
passive primitive. Since one string (an active string) can be designed
to play the part of any Turing machine finite-state read-head, and
another string (a passive string) can be designed to play the part of
a Turing machine tape, we can carry out any Turing computation in this
kinematic machine system.''
<p>
Replication in Laing's model is achieved by <i>self-inspection</i>,
where the description of the object to be replicated (the ``genome'')
is dynamically constructed concomitantly with its interpretation.
This is different than the other systems described herein (except that
of 
<A HREF="#ibanez">
Ib&#225;&#241;ez et al.</a>) where the genome is essentially
predetermined (either by direct design or by artificial evolution).
Laing (1977) noted that ``The capacity of a system generally to
explore its own structure and produce a complete description of it for
its perusal and use (for example, in generation and evaluation of
behavioral options open to it) seems a valuable one, and if such a
<i>prima facie</i> advantageous capacity is <i>not</i> exhibited
anywhere in naturally occurring systems, this in itself seems of
interest.''
<br>
<strong>Related work:</strong>    
<A HREF="#morris">Morris</a>.



<a name="freitasRobert">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replicating interstellar probes.</strong>
<br>
<strong>Author(s): R. A. Freitas, Jr.</strong>
<br>
<strong>Year(s):</strong> 1980-83.
<br>
<strong>Model:</strong> Von Neumann kinematic model assumed (a model
that preceded that of the <A HREF="#vonNeumann">cellular automaton</a>).
<br>
<strong>Implementation:</strong> Exploratory engineering design.
<br>
<strong>Reference(s):</strong><br>

1.  R. A. Freitas, Jr., ``A self-reproducing interstellar probe,''
    <i>Journal of the British Interplanetary Society</i>, Vol. 33,
    July 1980, pages 251-264.<br>
                                         
2.  R. A. Freitas, Jr. and F. Valdes, ``Comparison of
    reproducing and non-reproducing starprobe strategies for galactic
    exploration,'' <i>Journal of the British Interplanetary Society</i>, 
    Vol. 33, November 1980, pages 402-408.<br>
 
3.  R. A. Freitas, Jr., ``Terraforming Mars and Venus using machine
    self-replicating systems,'' 
    <i>Journal of the  British Interplanetary Society</i>, Vol. 36,
    March 1983, pages 139-142.


<br>
<strong>Description:</strong> Paper (1) was the first quantitative
engineering analysis of a complete self-replicating interstellar
probe, with special attention to materials, structural, and functional
<A HREF="#freitas">
closure</a>
issues.  
The other papers examined two specific far-future
space applications of machine replication technology.


<a name="freitas">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replicating lunar factory.</strong>
<br>
<strong>Author(s): R. A. Freitas, Jr. and W. P. Gilbreath.</strong>
<br>
<strong>Year(s):</strong> 1980.
<br>
<strong>Model:</strong> Von Neumann kinematic model assumed (a model
that preceded that of the <A HREF="#vonNeumann">cellular automaton</a>).
<br>
<strong>Implementation:</strong> Exploratory engineering design.
<br>
<strong>Reference(s):</strong><br>
1.  R. A. Freitas, Jr. and W. P. Gilbreath, editors.
    <i>Advanced automation for space missions: Proceedings of the 1980
    NASA/ASEE summer study</i>, chapter 5: Replicating Systems Concepts:
    Self-replicating Lunar Factory and Demonstration.
    NASA, Scientific and Technical Information Branch (available from
    U.S. G.P.O., Conference Publication 2255), Washington, D.C., 1982.<br>

2.  R. A. Freitas, Jr. and W. Zachary, ``A self-replicating,
    growing lunar factory,'' In J. Grey and L. A. Hamdan, Eds., <i>Space
    Manufacturing - Proceedings of the Fifth Princeton/AIAA/SSI Conference
    on Space Manufacturing</i>, 18-21 May 1981, Princeton University, AIAA,
    New York, 1981, pages 109-119.<br>

3.  R. A. Freitas, Jr., T. J. Healy, and J. E. Long, ``Advanced
    automation for space missions,'' <i>Proceedings of 7th International Joint
    Conference on Artificial Intelligence (IJCAI-81)</i>, 24-28 August 1981,
    Vancouver, Canada, pages 803-808.<br>

4.  R. A. Freitas, Jr., ``Report on the NASA/ASEE summer study on
    advanced automation for space missions,'' <i>Journal of the British
    Interplanetary Society</i>, Vol. 34, September 1981, pages 407-408.<br>

5.  R. A. Freitas Jr., T. J. Healy, and J. E. Long, ``Advanced
    automation for space missions,'' 
    <i>Journal of the Astronautical Sciences</i>,
    Vol. 30, January-March 1982, pages 1-11.<br>

See the following references for popular discussions of the NASA study:<br>

1.  R. A. Freitas, Jr., ``Roboclone: Self-replicating robots,'' <i>Omni</i>, 
    Vol. 5, July 1983, pages 44-47.<br>

2.  R. A. Freitas, Jr., ``Building Athens without the slaves,''
    <i>Technology Illustrated</i>, Vol. 3, August 1983, pages 16-20.<br>

3.  Steven Levy, 
    <i><a HREF="http://mosaic.echonyc.com/~steven/alife.html" target="_top">
    Artificial Life</a></i>, Vintage Books/Random House, NY,
    1992, pages 34-42.


<br>
<strong>Description:</strong> In 1980 NASA convened a committee of
experts to conduct an in-depth study of various issues related to
space exploration. Among these studies was one that raised the
possibility of planting a ``seed'' factory on the moon that would then
self-replicate to populate a large surface, using local lunar
material. The study introduced the concept of closure engineering,
studying qualitative closure (can all parts be made?), quantitative closure
(can enough parts be made?), and throughput closure (can parts be made
fast enough?). 
<br>
Further information is available
 <a HREF="http://www.zyvex.com/nanotech/selfRepNASA.html" target="_top">
here</a>
and also
<a HREF="http://www.islandone.org/MMSG/aasm/" target="_top">
here</a>.

<a name="burger">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Self-replicating programs.</strong>
<br>
<strong>Author(s): John Burger, David Brill, and Filip Machi.</strong>
<br>
<strong>Year(s):</strong> 1980.
<br>
<strong>Model:</strong> Computer program.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
J. Burger, D. Brill, and F. Machi. ``Self-reproducing programs.'' 
<i>Byte</i>, Vol. 5, pages 72-74, 1980.
<br><br>
See
<a HREF="http://www.nyx.net/~gthompso/quine.htm" target="_top"> 
The Quine Page</a> for several examples of self-replicating programs.



<a name="langton">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replicating loop.</strong>
<br>
<strong>Author(s): <a HREF="http://www.santafe.edu/~cgl/" target="_top">
   Christopher G. Langton</a>.</strong>
<br>
<strong>Year(s):</strong> 1984.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 8
        states per cell.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. C. G. Langton.
   ``Self-reproduction in cellular automata.''
     <i>Physica D</i>, Vol. 10, pages 135-144, 1984. <br>

2. C. G. Langton.
   ``Studying artificial life with cellular automata.''
     <i>Physica D</i>, Vol. 22, pages 120-149, 1986. 

<br>
<strong>Description:</strong> Langton observed that although the
capacity for 
<A HREF="#vonNeumann">
universal construction</a>, as studied by 
<A HREF="#vonNeumann">
von Neumann</a>
and 
<A HREF="#codd">
Codd</a>, 
is a <i>sufficient</i> condition
for self-replication, it is not a <i>necessary</i> one. Furthermore,
natural systems are probably not capable of universal construction.
Langton and his successors 
<A HREF="#byl">
Byl</a>, 
<A HREF="#reggiaEtal">
Reggia et al.</a>,
and 
<A HREF="#moritaImai">
Morita and Imai</a>
developed self-replicating automata which are
much simpler than the universal constructor. These machines, however,
lack any computing and constructing capabilities, their sole
functionality being that of self-replication.


<p>
Langton's self-replicating structure is a loop constructed in two-dimensional,
8-state, 5-neighbor cellular space, based on 
one of 
<A HREF="#codd">
Codd's</a>
elements, known as a 
periodic emitter.  The 86-cell
loop is basically a closed data path, consisting of a string of
core cells in state 1, surrounded by sheath cells in state
2 (this latter state is represented by 
dots in Figure 2). Data paths are capable of
transmitting data in the form of signals, which are packets of two
co-traveling states: the signal state itself (state 4, 5, 6, or
7) followed by the state 0.
The signals contained within the loop cycle through it, comprising the
instructions for replication, i.e., the ``genome.''  As each such
signal encounters the arm junction it is duplicated, with one copy
propagating back around the loop again and the other copy propagating
down the arm, where it is translated as an instruction when it reaches
the end of the arm. In executing the instructions the arm extends
itself and folds, ultimately resulting in a daughter loop, also
containing the genome needed to replicate.

<p>
A primary characteristic emphasized by Langton is the two different
modes in which information is used, interpreted and uninterpreted,
which he compared with the biological processes 
of <i>translation</i> and <i>transcription</i>, respectively.  In
Langton's loop, translation is accomplished when the instruction
signals are executed as they reach the end of the construction
arm, and upon collision of signals with other signals. Transcription
is accomplished by the duplication of signals at the arm junctions.

<br>
<strong>Figure(s):</strong> 2.
<p>
<strong>An online demo</strong> is available 
<a HREF="http://necsi.org/postdocs/sayama/sdsr/java/" target="_top">
here</a>.


<a name="dewdney">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Core war.</strong>
<br>
<strong>Author(s): A. K. Dewdney.</strong>
<br>
<strong>Year(s):</strong> 1984-89.
<br>
<strong>Model:</strong> An assembly language.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. A. K. Dewdney. ``Core war.''
  <i>Scientific American</i>, Vol. 250, No. 5, pages 15-19, May 1984.<br>

2. A. K. Dewdney. ``Core war.''
  <i>Scientific American</i>, Vol. 252, No. 3, pages 14-19, March 1985.<br>

3. A. K. Dewdney. ``Core war tournament.''
  <i>Scientific American</i>, Vol. 256, No. 1, pages 8-11, January 1987.<br>

4. A. K. Dewdney. ``Of worms, viruses and core war.''
  <i>Scientific American</i>, Vol. 260, No. 3, pages 90-93, March 1989.
<br>
<strong>Description:</strong> Core war is a virtual computer
environment in which computer programs ``do battle'' with each other.
Some of these programs have self-replicating features.
<br>
<strong>Related work:</strong>    
<A HREF="#ray">Ray</a>.


<a name="byl">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replicating loop.</strong>
<br>
<strong>Author(s): John Byl.</strong>
<br>
<strong>Year(s):</strong> 1989.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 6
        states per cell.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
   J. Byl.
   ``Self-Reproduction in small cellular automata.''
     <i>Physica D</i>, Vol. 34, pages 295-299, 1989. 
<br>
<strong>Description:</strong> 
Essentially, a simplification of 
<A HREF="#langton">
Langton's loop</a>
using less cellular states (6 as compared with
<A HREF="#langton">
Langton's</a>
8) and a smaller 
replicating loop (12 cells as compared with
<A HREF="#langton">
Langton's</a>
86).

<p>
<strong>An online demo</strong> is available 
<a HREF="http://necsi.org/postdocs/sayama/sdsr/java/" target="_top">
here</a>.



<a name="signorini">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Implementation of 
 <A HREF="#vonNeumann">
 von Neumann's universal constructor</a> on a SIMD machine.</strong>
<br>
<strong>Author(s): Jacqueline Signorini.</strong>
<br>
<strong>Year(s):</strong> 1989.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 29
        states per cell.
<br>
<strong>Implementation:</strong> SIMD (single-instruction multiple-data)
        machine.
<br>
<strong>Reference(s):</strong> 
 J. Signorini.
   ``How a SIMD machine can implement a complex cellular automaton? 
     A case study: von Neumann's 29-state cellular automaton.''
  In <i>Supercomputing '89: Proceedings of the ACM/IEEE Conference</i>, pages
  175-186, 1989. 

<br>
<strong>Description:</strong>
This study was part of an effort to simulate 
<A HREF="#vonNeumann">
von Neumann's</a> model. Signorini concentrated on the 29-state transition
rule, discussing its implementation on a SIMD computer. 
<A HREF="#vonNeumann">
Von Neumann's constructor</a> 
is divided into many
functional blocks known as organs. In addition to implementation of
the transition rule, Signorini also presented the implementation
of three such organs: a pulser, a decoder, and a periodic pulser.
<br>
<strong>Related work:</strong>    
<A HREF="#pesavento">Pesavento</a>,
<A HREF="#beuchatHaenni">Beuchat and Haenni</a>.


<a name="morris">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Self-replication in typogenetics.</strong>
<br>
<strong>Author(s): Harold C. Morris.</strong>
<br>
<strong>Year(s):</strong> 1989.
<br>
<strong>Model:</strong> Typogenetics.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong>
   H. C. Morris.
   ``Typogenetics: A logic for artificial life.''
   In C. G. Langton, editor, <i>Artificial Life</i>,
   vol. VI of <i>SFI Studies in the Sciences of Complexity</i>,
   pages 369-395. Addison-Wesley, 1989.<br>
<strong>Description:</strong> Typogenetics was first introduced by
Douglas Hofstadter in his book <i>Godel, Escher, Bach</i> (1979) as a
formal system for describing operations on DNA strands.  A
typogenetics string, or <i>strand</i>, has a double aspect: it is a
coded message prescribing operations, and it is the very operand or
data those operations will work on. Self-replication in typogenetics
can be achieved in two ways (Morris, 1989): (1) a string can extend
itself horizontally along one level and then cut itself into two
pieces which are either already replicas of their parent or will beget
such replicas, or (2) use a copy operation to create a double strand
that will separate into two daughters that are either already copies
of their parent or will grow into such copies.  
<br>
<strong>Related work:</strong> 
<A HREF="#varetto">Varetto</a>,
<A HREF="#laing">Laing</a>.


<a name="ray">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Tierra.</strong>
<br>
<strong>Author(s): 
     <a HREF="http://www.isd.atr.co.jp/~ray/" target="_top">
     Tom Ray</a>.</strong>
<br>
<strong>Year(s):</strong> 1992-present.
<br>
<strong>Model:</strong> An assembly language.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
  T. S. Ray.
  ``An approach to the synthesis of life.''
  In C. G. Langton, C. Taylor, J. D. Farmer, and S. Rasmussen, editors,
  <i>Artificial Life II</i>, volume X of <i>SFI Studies in the Sciences
  of Complexity</i>, pages 371-408, Redwood City, CA, 1992. Addison-Wesley.
<br>
Further references:
<a HREF="http://www.isd.atr.co.jp/~ray/tierra/" target="_top">
Tierra home page</a>.
<br>
<strong>Description:</strong> 
``Tierra'' is a virtual world, consisting of computer programs that can
undergo evolution.  In contrast to 
<a HREF="http://www.cs.bgu.ac.il/~sipper/ga.html" target="_top">
evolutionary algorithms</a> where fitness is defined by the user, the
Tierra ``creatures'' (programs) receive no such direction. Rather,
they compete for the natural resources of their computerized
environment, namely, CPU time and memory.  Since only a finite amount
of these are available, the virtual world's natural resources are
limited, as in nature, giving rise to competition between
creatures. Ray (1992) observed the formation of an ``ecosystem''
within the Tierra world, including organisms of various sizes,
parasites, and hyper-parasites.  To get the system going, Ray
inoculated it with an 80-line self-replicating computer program
written in the Tierran assembly language.
<br>
<strong>Related work:</strong>    
<A HREF="#dewdney">Dewdney</a>.



<a name="reggiaEtal">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replicating loops.</strong>
<br>
<strong>Author(s): 
  <a HREF="http://www.cs.umd.edu/~reggia/" target="_top">
  James A. Reggia</a>, 
                 Steven L. Armentrout,
   <a HREF="http://www.complex.iastate.edu/hhchou/" target="_top">
      Hui-Hsien Chou</a>, 
                 and Yun Peng.</strong>
<br>
<strong>Year(s):</strong> 1993.
<br>
<strong>Model:</strong> Two-dimensional cellular automaton with either
        6 or 8 states per cell and a neighborhood of either 5 or 9 cells.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
   J. A. Reggia, S. L. Armentrout, H.-H. Chou, and Y. Peng.
   ``Simple systems that exhibit self-directed replication.''
     <i>Science</i>, Vol. 259, pages 1282-1287, February 1993. 
<br>
<strong>Description:</strong> 
Reggia et al. presented several small self-replicating loops, essentially based
on <A HREF="#langton">
Langton's</a> work. Their smallest demonstrated loop 
consists of 5 cells, embedded in 6-state cellular
space. Most of their loops are unsheathed, as opposed to those of 
<A HREF="#langton">
Langton</a> and
<A HREF="#byl">
Byl</a>. They also studied cellular spaces exhibiting both weak and
strong rotational symmetry (briefly, weak rotational symmetry means
that some cell states are directionally oriented while with strong
rotational symmetry all cell states are viewed as being unoriented).

<p>
<strong>An online demo</strong> is available 
<a HREF="http://necsi.org/postdocs/sayama/sdsr/java/" target="_top">
here</a>.


<a name="varetto">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Self-replication in typogenetics.</strong>
<br>
<strong>Author(s): Louis Varetto.</strong>
<br>
<strong>Year(s):</strong> 1993.
<br>
<strong>Model:</strong> Typogenetics.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong>
L. Varetto.
``Typogenetics: An artificial genetic system.''
<i>Journal of Theoretical Biology</i>, Vol. 160, pages 185-205, 1993.
<br>
<strong>Description:</strong>
See <A HREF="#morris">Morris</a>.



<a name="embryonics">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Embryonics (Embryonic Electronics).</strong>
<br>
<strong>Author(s): 
    <a HREF="http://lslwww.epfl.ch/pages/staff/mange" target="_top">
        Daniel Mange</a>, 
    <a HREF="http://lslwww.epfl.ch/pages/staff/sanchez" target="_top">
        Eduardo Sanchez</a>, 
    <a HREF="http://lslwww.epfl.ch/pages/staff/stauffer" target="_top">
        Andr&#233 Stauffer</a>, 
    <a HREF="http://lslwww.epfl.ch/pages/staff/tempesti" target="_top">
        Gianluca Tempesti</a>, 
       <a HREF="http://lslwww.epfl.ch/pages/staff/madon" target="_top">
         Dominik Madon</a>, 
    <a HREF="http://www.cs.bgu.ac.il/~sipper/" target="_top">
         Moshe Sipper</a>, 
            Pierre Marchal, Serge Durand, and Christian Piguet.</strong>
<br>
<strong>Year(s):</strong> 1993-present.
<br>
<strong>Model:</strong> Multicellular automaton.
<br>
<strong>Implementation:</strong> Hardware (reconfigurable processors known
        as field-programmable gate arrays, or FPGAs).
<br>
<strong>Reference(s):</strong> <br>
1. D. Mange and A. Stauffer.
  ``Introduction to embryonics: Towards new self-repairing and
  self-reproducing hardware based on biological-like properties.''
  In N. M. Thalmann and D. Thalmann, editors, <i>Artificial Life and
  Virtual Reality</i>, pages 61-72. John Wiley, England, 1994. <br>

2. P. Marchal, C. Piguet, D. Mange, A. Stauffer, and S. Durand.
   ``Embryological development on silicon.''
   In R. A. Brooks and P. Maes, editors, <i>Artificial Life IV</i>,
   pages 365-370, Cambridge, Massachusetts, 1994. The MIT Press. <br>

3. D. Mange, M. Goeke, D. Madon, A. Stauffer, G. Tempesti, and S. Durand.
   ``Embryonics: A new family of coarse-grained field-programmable
   gate array with self-repair and self-reproducing properties.''
   In E. Sanchez and M. Tomassini, editors, <i>Towards Evolvable
   Hardware</i>, volume 1062 of <i>Lecture Notes in Computer Science</i>, pages
   197-220. Springer-Verlag, Heidelberg, 1996.<br>

4. P. Marchal, P. Nussbaum, C. Piguet, S. Durand, D. Mange, E. Sanchez,
   A. Stauffer, and G. Tempesti.
   ``Embryonics: The birth of synthetic life.''
   In E. Sanchez and M. Tomassini, editors, <i>Towards Evolvable
   Hardware</i>, volume 1062 of <i>Lecture Notes in Computer Science</i>, pages
   166-196. Springer-Verlag, Heidelberg, 1996. <br>

5. M. Sipper, D. Mange, and A. Stauffer.
   ``Ontogenetic hardware.''
   <i>BioSystems</i>, Vol. 44, No. 3, pages 193-207, 1997. <br>

6. D. Mange, D. Madon, A. Stauffer, and G. Tempesti.
  ``Von Neumann revisited: A Turing machine with self-repair and
   self-reproduction properties.''
  <i>Robotics and Autonomous Systems</i>, Vol. 22, No. 1, pages 35-58, 1997.
  <br>

7. D. Mange, E. Sanchez, A. Stauffer, G. Tempesti, P. Marchal, and C. Piguet,
   ``Embryonics: A new methodology for designing field-programmable gate
     arrays with self-repair and self-replicating properties,''
  <i>IEEE Transactions on VLSI Systems</i>, vol. 6, no. 3, pp. 387-399,
  September 1998.<br>

Other references are available by contacting the authors.<br>
See also 
<a HREF="http://lslwww.epfl.ch/pages/embryonics/home.html" target="_top">
Embryonics page</a> and 
<a HREF="http://www.cs.bgu.ac.il/~sipper/poe.html" target="_top">
POE page</a>. 
<br>
<strong>Description:</strong> 
The embryonics (embryonic electronics) project is a joint collaboration
between the 
<a HREF="http://lslwww.epfl.ch/" target="_top">Logic Systems Laboratory</a>
and the
<a HREF="http://www.csem.ch/" target="_top">
Centre Suisse d'Electronique et de Microtechnique SA</a>. The ultimate
objective is the construction of large-scale integrated circuits,
exhibiting properties such as self-repair (healing), self-replication,
and evolution, found up until now only in living beings.  Such systems
will be more robust than current-day ones, able to function within
complex dynamic environments which not only cannot be fully specified
in advance, but furthermore may change in time.  Essentially,
embryonics is a CA-based approach in which three biologically inspired
principles are employed: multicellular organization, cellular
differentiation, and cellular division.
<p>
The embryonics team developed an artificial cell, dubbed
<i>biodule</i> (biological module), that is used as an elementary unit
from which multicellular organisms can 
<a HREF="http://www.cs.bgu.ac.il/~sipper/poe.html" target="_top">
ontogenetically</a> develop to perform useful tasks. Cellular
differentiation takes place by having each cell compute its
coordinates (i.e., position) within a one- or two-dimensional space,
after which it can extract the specific gene within the artificial
genome responsible for the cell's functionality.  Cellular division
occurs when a mother cell, the <i>zygote</i>, arbitrarily placed
within the grid, multiplies to fill a large portion of the space, thus
forming a multicellular organism.  In addition to self-replication,
this artificial organism also exhibits self-repair capabilities,
another biologically inspired phenomenon,
lacking in the other systems presented herein.  Such self-replicating
machines are <i>multicellular</i> artificial organisms, in the sense
that each of the several cells comprising the organism contains one
copy of the complete genome. In this respect, most other
self-replicating automata described herein can be considered
<i>unicellular</i> organisms: there is a single genome describing (and
contained within) the entire machine (for example, 
<A HREF="#langton">
Langton's 
loop</a>).

<br>
<strong>Figure(s):</strong> 3 and 4.


<a name="sipper">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replicating loop.</strong>
<br>
<strong>Author(s): 
    <a HREF="http://www.cs.bgu.ac.il/~sipper/" target="_top">
    Moshe Sipper</a>.</strong>
<br>
<strong>Year(s):</strong> 1994.
<br>
<strong>Model:</strong> Two-dimensional, 9-neighbor, 
                        non-uniform cellular automaton with 3
                        states per cell.
                        (The basic cell is somewhat
                        more complex as compared to the original CA).
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. M. Sipper.
   ``<a HREF="http://www.moshesipper.com/papers/" target="_top">
     Studying artificial life using a simple, general cellular model</a>.''
  <i>Artificial Life Journal</i>, Vol. 2, No. 1, pages 1-35, 1995.
  The MIT Press, Cambridge, MA. <br>

2. M. Sipper.
   ``<a HREF="http://www.moshesipper.com/papers/" target="_top">
     Non-uniform cellular automata: Evolution in rule space and formation
  of complex structures</a>.''
  In R. A. Brooks and P. Maes, editors, <i>Artificial Life IV</i>,
  pages 394-399, Cambridge, Massachusetts, 1994. The MIT Press. <br>

3. M. Sipper.
   <i><a HREF="http://www.cs.bgu.ac.il/~sipper/pcm.html" target="_top">
     Evolution of Parallel Cellular Machines: The Cellular
      Programming Approach</a></i>.
   Springer-Verlag, Heidelberg, 1997. 

<br>
<strong>Description:</strong> 
A small 5-cell self-replicating loop. The underlying model is that
of a 
<a HREF="http://www.cs.bgu.ac.il/~sipper/ca.html" target="_top">
non-uniform cellular automaton</a> in which the local update rule need
not be identical for all grid cells (as is the case with the 
<a HREF="http://www.cs.bgu.ac.il/~sipper/ca.html" target="_top">
original CA</a>). 
Furthermore, the cells are somewhat more complex than those of
the original CA: whereas a cell in the original model accesses the
states of its neighbors but may only change its own state, Sipper's
model allows state changes of neighboring cells and rule copying into
them (this latter characteristic can be considered a form of cellular
movement).
<br>
<strong>Figure(s):</strong> 5.
<br>
<strong>Related work:</strong>    
<A HREF="#arbib">Arbib</a>,
<A HREF="#lohn">Lohn and Reggia</a>.


<a name="rebek">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Synthetic self-replicating molecules.</strong>
<br>
<strong>Author(s): Julius Rebek, Jr.</strong>
<br>
<strong>Year(s):</strong> 1994.
<br>
<strong>Model:</strong> Organic chemistry.
<br>
<strong>Implementation:</strong> Bioware.
<br>
<strong>Reference(s):</strong> 
J. Rebek, Jr.
``Synthetic self-replicating molecules.''
<i>Scientific American</i>, Vol. 271, No. 1, pages 48-55, July 1994.
<br>
<strong>Description:</strong> From Rebek, Jr. (1994): ``Imagine a
molecule that likes its own shape: finding a copy of itself, it will
fit neatly with its twin, forming for a while a complete entity. If
the original molecule is presented with the component parts of
itself, it will assemble these into additional replicas. The process
will continue as long as the supply of components lasts. My colleagues
and I... have designed such self-assembling molecules and crafted them
in the laboratory... Our organic molecules, although they operate
outside of living systems, help to elucidate some of the essential
principles of self-replication.''

<a name="koza">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: Spontaneous emergence of self-replicating programs.</strong>
<br>
<strong>Author(s): 
        <a HREF="http://www.genetic-programming.com/johnkoza.html" target="_top">
        John R. Koza</a>.</strong>
<br>
<strong>Year(s):</strong> 1994.
<br>
<strong>Model:</strong> LISP programs.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
J. R. Koza,
 ``Artificial life: Spontaneous emergence of self-replicating and
  evolutionary self-improving computer programs,''
  <i>Artificial Life III</i>, C. G. Langton, editor, Reading, MA,
  1994, vol. XVII of <i>SFI Studies in the Sciences of Complexity</i>, pages
  225-262, Addison-Wesley.
<br>
<strong>Description:</strong> While most of the systems described
herein were designed by hand, Koza showed that self-replicating LISP
programs can spontaneously emerge.  In his experiment, programs were
randomly created from a number of (hand-designed) basic components, or
functions. 
<br>
<strong>Related work:</strong>    
<A HREF="#lohn">Lohn and Reggia</a>.


<a name="tempesti">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: A self-replicating loop with finite computational
capabilities.</strong>
<br>
<strong>Author(s): 
    <a HREF="http://lslwww.epfl.ch/pages/staff/tempesti" target="_top">
        Gianluca Tempesti</a>.</strong>
<br>
<strong>Year(s):</strong> 1995.
<br>
<strong>Model:</strong>  Two-dimensional, 9-neighbor cellular automaton with 10
        states per cell.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
  G. Tempesti
  ``A new self-reproducing cellular automaton capable of 
    construction and computation.''
  In F. Mor&#225;n, A. Moreno, J. J. Merelo, and P. Chac&#243;n, editors,
  <i>ECAL'95: Third European Conference on Artificial Life</i>, volume 929 of
  <i>Lecture Notes in Computer Science</i>, pages 555-563.
  Springer-Verlag, Heidelberg, 1995.

<br>
<strong>Description:</strong> 
The loops designed by 
<A HREF="#langton">
Langton</a>,
<A HREF="#byl">
Byl</a>,
and 
<A HREF="#reggiaEtal">
Reggia et al.</a>
lack any computing and constructing capabilities, their sole
functionality being that of self-replication.
Tempesti developed a self-replicating CA,
similar to that of Langton's, yet with the added capability of
attaching to the automaton an executable program which is duplicated
and executed in each of its copies.  The program is stored within the
loop, interlaced with the replication code. This was demonstrated
for a simple program that writes out (after the loop's
replication) LSL, acronym of the 
<a HREF="http://lslwww.epfl.ch/" target="_top">
Logic Systems Laboratory</a>. 
<br>
<strong>Figure(s):</strong> 6.
<br>
<strong>Related work:</strong>    
<A HREF="#perrier">Perrier et al.</a>


<a name="lohn">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Evolution of self-replicating structures.</strong>
<br>
<strong>Author(s): 
        <a href="http://ic-www.arc.nasa.gov/ic/people/jlohn/" target="_top">
        Jason D. Lohn</a> and 
        <a HREF="http://www.cs.umd.edu/~reggia/" target="_top">
        James A. Reggia</a>.</strong>
<br>
<strong>Year(s):</strong> 1995.
<br>
<strong>Model:</strong> Two-dimensional cellular automaton.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. J. D. Lohn and J. A. Reggia. 
``Discovery of self-replicating structures using a genetic algorithm.''
<i>Proceedings of 1995 IEEE International Conference 
   on Evolutionary Computation (ICEC'95)</i>, pages 678-683, 1995.<br>
2. J. D. Lohn. ``Automated discovery of self-replicating structures in
   cellular space automata models.''  Dept. of Computer Science Tech.
   Report CS-TR-3677, Univ. of Maryland at College Park, August 1996.<br>
3. J. D. Lohn and J. A. Reggia.
  ``Automatic discovery of self-replicating structures in cellular automata.''
  <i>IEEE Transactions on Evolutionary Computation</i>, vol. 1,
  no. 3, pp 165-178, September 1997.
<br>
<strong>Description:</strong> Most of the models of
   self-replication in cellular spaces, described herein,
   were manually designed, a
   difficult and time-consuming process.
   <a HREF="http://www.cs.bgu.ac.il/~sipper/ga.html" target="_top">
   Genetic algorithms</a> were introduced by Lohn and Reggia to
   discover automata rules that govern emergent self-replicating
   processes.  Given dynamically evolving automata, identification of
   effective fitness functions for self-replicating structures is a
   difficult task, and they gave one solution to this problem.  A model
   consisting of movable automata, called effector automata, embedded in
   a cellular space was introduced and discussed in this context.  For
   cellular automata models, a new method of automata input, called
   orientation insensitive input, was introduced and shown to increase the
   yield of self-replicating structures found.
<br>
<strong>Related work:</strong>    
     <A HREF="#sipper">Sipper</a>,
     <A HREF="#koza">Koza</a>,
     <A HREF="#chouReggia">Chou and Reggia</a>.



<a name="ibanez">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-inspection based replication in cellular automata.</strong>
<br>
<strong>Author(s): Jes&#249;s Ib&#225;&#241;ez, 
  Daniel Anabitarte, Iker Azpeitia,
  Oscar Barrera, Arkaitz Barrutieta, Haritz Blanco, and Francisco Echarte.
  </strong>
<br>
<strong>Year(s):</strong> 1995.
<br>
<strong>Model:</strong> Two-dimensional cellular automaton with 16
        states per cell.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
  J. Ib&#225;&#241;ez, D. Anabitarte, I. Azpeitia,
  O. Barrera, A. Barrutieta, H. Blanco, and F. Echarte.
  ``Self-inspection based reproduction in cellular automata.''
  In F. Mor&#225;n, A. Moreno, J. J. Merelo, and P. Chac&#243;n, editors,
  <i>ECAL'95: Third European Conference on Artificial Life</i>, volume 929 of
  <i>Lecture Notes in Computer Science</i>, pages 564-576.
  Springer-Verlag, Heidelberg, 1995.

<br>
<strong>Description:</strong> 
The self-replicating process demonstrated by Ib&#225;&#241;ez et al.
is based on
<A HREF="#laing">
self-inspection</a>. One of the interesting properties of their systems
concerns the fact that the loops are not necessarily square ones as with
<A HREF="#langton">
Langton-like loops</a>.

<a name="pesavento">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Simulation of
 <A HREF="#vonNeumann">
 von Neumann's universal constructor</a>.</strong>
<br>
<strong>Author(s): Umberto Pesavento.</strong>
<br>
<strong>Year(s):</strong> 1995.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 32
        states per cell.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
  U. Pesavento.
   ``An implementation of von Neumann's self-reproducing 
     machine.''
  <i>Artificial Life Journal</i>, Vol. 2, No. 4, pages 337-354, 1995.
  The MIT Press, Cambridge, MA. 
<br>
<strong>Description:</strong> 
A computer simulation of 
<A HREF="#vonNeumann">
von Neumann's universal constructor</a>.
Self-replication is not demonstrated since the tape required to describe
the constructor is too large to simulate.
Pesavento used three more states per cell as compared with von 
Neumann (32 vs. 29) which resulted in a substantially smaller constructor.

<p>
<strong>An online</strong> demo is available
<a HREF="http://alife.santafe.edu/alife/topics/jvn/jvn.html" target="_top">
here</a>.

<a name="taylor">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: COSMOS.</strong>
<br>
<strong>Author(s): 
     <a HREF="http://homepages.inf.ed.ac.uk/timt/">
     Tim Taylor</a>.</strong>

<br>
<strong>Year(s):</strong> 1995-2001.
<br>
<strong>Model:</strong> An assembly language.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1.  Tim Taylor.
  ``Creativity in Evolution: Individuals, Interactions and
      Environments.''
  Chapter 1 in Peter J Bentley and David W Corne (eds.),
  <i>Creative Evolutionary Systems</i>, Morgan Kaufman, 2001.
<br>
2.  T. J. Taylor.
  ``From Artificial Evolution to Artificial Life.''
  PhD thesis, School of Informatics, University of Edinburgh, 1999
      (online version available <a
	href="http://homepages.inf.ed.ac.uk/timt/papers/thesis/">here</a>).
<br>
3.  Tim Taylor.
  ``On Self-Reproduction and Evolvability''.
  In D. Floreano, J.-D. Nicoud, F. Mondada (eds.),
  <i>Proceedings of the Fifth European Conference on Artificial Life
	(ECAL99)</i>, Springer-Verlag, 1999.
<br>
4.  Tim Taylor and John Hallam.
  ``Replaying the Tape: An Investigation into the Role of Contingency
      in Evolution''.
  In C. Adami, R. Belew, H. Kitano, and C. Taylor (eds.),
  <i>Proceedings of the Sixth International Conference on Artificial
	Life (Artificial Life VI)</i>, MIT Press, 1998.
<br>
5.  Tim Taylor and John Hallam.
  ``Studying Evolution with Self-Replicating Computer Programs''.
  In P. Husbands and I. Harvey (eds.),
  <i>Proceedings of the Fourth European Conference on Artificial Life
	    (ECAL97)</i>, MIT Press/Bradford Books, 1997.

<br>
<strong>Description:</strong> 
COSMOS is a derivative of Tierra and was originally designed to
      investigate the evolution of differentiated, parallel
      (``multicellular'') programs. A program in COSMOS has a more
      complex, cellular-inspired structure than its Tierran
      counterpart; the genetic information is represented as a binary
      string which is decoded to active instructions using a
      genotype-to-phenotype mapping. This mapping could itself be
      allowed to evolve, although such experiments have not yet been
      conducted. Transcription is controlled by promoters and
      repressors (which are produced by the cell itself), allowing for
      complex genetic regulatory networks, shifts of reading frame
      etc. Programs must collect ``energy tokens'' from the
      environment in order to run their code, so programs in COSMOS
      are therefore in competition for energy as well as
      space. Programs can also compose and transmit arbititrary binary
      messages into the environment, which may be received by other
      programs. Some experiments were also conducted with
      sexually-reproducing programs. For further information, look at reference 2
      above. The work was not particularly successful in achieving the
      evolution of complex programs (in fact it did not even produce
      the parasitic programs observed in Tierra). A major contribution of the
      thesis was to analyse the reasons for failure, to identify
      weaknesses (both methodological and theoretical) of this kind of
      study of self-replicating programs in general, and to suggest ways for
      improving evolvability in future systems (see refs 1 and 2). The
      PhD thesis also contains an extensive survey of previous
      work on self-replication and open-ended evolution (ref 2, Chapter
      3).
<br>
<strong>Related work:</strong>    
<A HREF="#ray">Ray</a>.

<a name="perrier">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: A self-replicating loop with universal
        computational capabilities.</strong>
<br>
<strong>Author(s): 
   Jean-Yves Perrier, 
   <a HREF="http://www.cs.bgu.ac.il/~sipper/" target="_top">
   Moshe Sipper</a>, and 
   <a HREF="http://lslwww.epfl.ch/pages/staff/zahnd" target="_top">
   Jacques Zahnd</a>.</strong>
<br>
<strong>Year(s):</strong> 1996.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 63
        states per cell.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
  J.-Y. Perrier, M. Sipper, and J. Zahnd.
  ``<a HREF="http://www.moshesipper.com/papers/" target="_top">
    Toward a viable, self-reproducing universal computer</a>.''
  <i>Physica D</i>, Vol. 97, pages 335-352, 1996.
<br>
<strong>Description:</strong> 
While 
<A HREF="#tempesti">
Tempesti's loop</a> has finite computational capabilities,
Perrier et al. demonstrated a
self-replicating loop that is capable of implementing any program,
written in a simple yet universal programming language.  The system
consists of three parts, loop, program, and data, all of which are
replicated, followed by the program's execution on the given data.
The system has been simulated
<i>in its entirety</i>, thus attaining a viable, self-replicating
machine with programmable capabilities.
Note that though the number of states seems prohibitive (63),
the vast majority of entries in the rule table are identity
transformations (i.e., ones that do not change the state of the central
cell). This renders the automaton completely realizable. 
<br>
<strong>Figure(s):</strong> 7.
<br>
<strong>Related work:</strong>    
<A HREF="#tempesti">Tempesti</a>.

<a name="moritaImai">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Self-replication in reversible cellular automata.</strong>
<br>
<strong>Author(s): Kenichi Morita and Katsunobu Imai.</strong>
<br>
<strong>Year(s):</strong> 1996-1997.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor
                        reversible cellular automaton.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. K. Morita and K. Imai.
   ``Self-reproduction in a reversible cellular space.''
   <i>Theoretical Computer Science</i>, Vol. 168, pages 337-366, 1996. <br>

2. K. Morita and K. Imai.
   ``A simple self-reproducing cellular automaton with shape-encoding
     mechanism.'' In C. Langton and T. Shimohara, editors,
   <i>Artificial Life V: Proceedings of the Fifth
      International Workshop on the Synthesis and
      Simulation of Living Systems</i>. The MIT Press, Cambridge, MA, 1997. <br>
   
3. K. Morita and K. Imai.
   ``Logical universality and self-reproduction in reversible 
     cellular automata.''
  In T. Higuchi, M. Iwata, and W. Liu, editors, <i>Proceedings of The
  First International Conference on Evolvable Systems: From Biology to Hardware
  (ICES96)</i>, volume 1259 of <i>Lecture Notes in Computer Science</i>, pages
  152-166. Springer-Verlag, Heidelberg, 1997. 

<br>
<strong>Description:</strong> 
A reversible cellular automaton is a special type of CA in which every 
grid configuration of states has at most one predecessor. Roughly speaking,
it is a ``backward-deterministic'' CA.
Morita and Imai showed that self-replication can be attained in 
reversible cellular spaces.
Recent studies suggest that computers based on
<a HREF="http://www.zyvex.com/nanotech/reversible.html" target="_top">
reversible logic</a> will be more efficient.

<p>
<strong>Some online</strong> documents and demos are available
<a HREF="http://kepi.ke.sys.hiroshima-u.ac.jp/projects/rca/sr/" target="_top">
here</a>.




<a name="beuchatHaenni">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Hardware implementation of one of the ``organs'' of
 <A HREF="#vonNeumann">
 von Neumann's universal constructor</a>.</strong>
<br>
<strong>Author(s): 
    <a HREF="http://lslwww.epfl.ch/pages/staff/beuchat" target="_top">
        Jean-Luc Beuchat</a> and 
    <a HREF="http://lslwww.epfl.ch/pages/staff/haenni" target="_top">
        Jacques-Olivier Haenni</a>.</strong>
<br>
<strong>Year(s):</strong> 1997.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 29
        states per cell.
<br>
<strong>Implementation:</strong> Hardware (reconfigurable processors known
        as field-programmable gate arrays, or FPGAs).
<br>
<strong>Reference(s):</strong> <br>
1. J.-L. Beuchat and J.-O. Haenni. 
   ``Von Neumann's 29-state cellular automaton: A hardware 
     implementation.''
    <a HREF="http://lslwww.epfl.ch/" target="_top">
   Logic Systems Laboratory</a>, 
  1997. (submitted for publication). <br>
2. M. Sipper, D. Mange, and A. Stauffer.
   ``Ontogenetic hardware.''
   <i>BioSystems</i>, Vol. 44, No. 3, pages 193-207, 1997.
  

<br>
<strong>Description:</strong>
Beuchat and Haenni constructed a hardware module that
implements a single 29-state cell
of 
<A HREF="#vonNeumann">
von Neumann's</a> model.  Each module is embedded in a plastic box
whose top face contains a number of connection points and a LED
display showing the current state of the cell.  Several such modules
can be fitted together to produce a small cellular array.  The sides
of the modules contain electrical contacts, which allow adjacent cells
to transmit information to each other without additional wiring.
<p>
Each von Neumann module is composed of two units, a <i>computation
unit</i> and a <i>display unit</i>.  The computation unit, implemented
using a reconfigurable processor known as a field-programmable gate
array (FPGA) calculates the cell's next state by directly
communicating with the adjacent, neighboring cells.  The cell's state
is stored and sent to the display unit, implemented using a dot-matrix
display, a microcontroller, and a small number of latches.  This
latter unit constantly reads the current state of the cell, and
updates the display accordingly.  
<p>
To date, Beuchat and Haenni used this module to implement a
25-cell ``organ.'' 
<A HREF="#vonNeumann">
Von Neumann's machine</a> 
is divided into many
functional blocks, such as decoders and pulsers, known as organs. For
example, a pulser P(11001) generates at a designated output cell the
sequence of excitations (signals) 11001 a fixed number of time steps
after receiving an excitation (i.e., a 1 signal) at a designated input
cell.
<br>
<strong>Figure(s):</strong> 8 and 9.



<a name="chouReggia">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Spontaneous emergence of self-replicating loops.</strong>
<br>
<strong>Author(s):
   <a HREF="http://www.complex.iastate.edu/hhchou/" target="_top">
      Hui-Hsien Chou</a> and
   <a HREF="http://www.cs.umd.edu/~reggia/" target="_top">
   James A. Reggia</a>.</strong> 
<br>
<strong>Year(s):</strong> 1997.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton with 256 
        states per cell (8 bits, arranged into four distinct bit fields).
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
    H.-H. Chou and J. A. Reggia.
   ``Emergence of self-replicating structures in a cellular automata space.''
    <i>Physica D</i>, vol. 110, no. 3-4, pp. 252-276, 1997.
<br>
<strong>Description:</strong> While most of the systems described
herein support the replication of a specific, given structure, Chou
and Reggia explored the possibility of creating a CA universe, a
``primordial soup,'' in which self-replicating structures are not
inoculated <i>ab initio</i>, but rather emerge in a spontaneous manner.
Toward this end, they introduced a CA model in which the cellular state
is divided into four distinct bit fields, thus facilitating the emergence of
self-replication. 
<br>
<strong>Related work:</strong>    
<A HREF="#lohn">Lohn and Reggia</a>.



<a name="chouReggia2">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Problem solving during artificial selection of 
        self-replicating loops.</strong>
<br>
<strong>Author(s):
   <a HREF="http://www.cs.umd.edu/users/hhchou/" target="_top">
      Hui-Hsien Chou</a> and
   <a HREF="http://www.cs.umd.edu/~reggia/" target="_top">
   James A. Reggia</a>.</strong> 
<br>
<strong>Year(s):</strong> 1998.
<br>
<strong>Model:</strong> Two-dimensional, 5-neighbor cellular automaton.
        Cellular state is divided into a number of distinct bit fields.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
    H.-H. Chou and J. A. Reggia.
   ``Problem solving during artificial selection of 
        self-replicating loops.''
     <i>Physica D</i>, vol. 115, no. 3-4, pp. 293-312, 1998.
<br>
<strong>Description:</strong> This work suggests a novel approach by
which self-replicating loops can be used as a computational means to
solve a difficult NP-complete problem, known as satisfiability, or SAT
(finding an assignment of variables that satisfies a boolean
predicate). Chou and Reggia show here how a cellular automaton (CA) can
be used as a truly massively parallel machine to solve a hard problem.
This is in contrast to many works (including <A HREF="#vonNeumann">von
Neumann's</a> seminal one) where the highly parallel CA is used in a
completely serial manner (e.g., by embedding a sequential Turing
machine).  As Chou and Reggia note, their model bears interesting
similarities to DNA computing, an emerging and exciting field.

As in their <A HREF="#chouReggia">earlier work</a>, the authors used a
CA model in which the cellular state is divided into fields, each of
which can be dealt with independently. This greatly facilitates the
CA's programming. The initial set-up consists of a single
self-replicating loop, containing a generic solution to the
problem. This loop then replicates, each daughter structure being
different than the mother one, thus enumerating all possible solutions
to the problem (the enumeration process). There is then a selection
process that culls unfit solutions by eliminating the loops that
represent them (each loop represents one possible SAT solution).  Chou
and Reggia introduced innovative ways to handle these parallel
enumeration and selection processes.
<br>
<strong>Related work:</strong>    
<A HREF="#lohn">Lohn and Reggia</a>.

<p>
<strong>A downloadable demo</strong> is available 
<a HREF="http://www.cs.umd.edu/users/hhchou/download.html" target="_top">
here</a>.





<a name="staufferSipper">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: On the relationship between cellular automata and L-systems:
       The self-replication case.</strong>
<br>
<strong>Author(s):
     <a HREF="http://lslwww.epfl.ch/pages/staff/stauffer" target="_top">
        Andr&#233 Stauffer</a> and 
    <a HREF="http://www.cs.bgu.ac.il/~sipper/" target="_top">
         Moshe Sipper</a>.</strong> 
<br>
<strong>Year(s):</strong> 1998.
<br>
<strong>Model:</strong> L-systems and two-dimensional cellular automata.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
    A. Stauffer and M. Sipper.
   ``On the relationship between cellular automata and L-systems:
       The self-replication case.''
     <i>Physica D</i>, vol. 116, no. 1-2, pp. 71-80, 1998.
<br>
<strong>Description:</strong> Cellular automata (CA) have been
ubiquitously used over the years to study the issue of
self-replication.  The L-systems model, on the other hand, is
naturally suited for modeling growth processes, of which replication
is a special case. The goals of this work are: (1) to show how
L-systems can be used to specify self-replicating structures, and (2)
to explore the relationship between L-systems and CAs.  Stauffer and
Sipper conclude that the bridge between CAs and L-systems seems to
offer a promising approach in the study of self-replication, and, more
generally, of growth processes in CAs.



<a name="sayama">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: A structurally dissolvable self-reproducing loop.</strong>
<br>
<strong>Author(s):
      <a href="http://necsi.org/postdocs/sayama/" target="_top">
      Hiroki Sayama</a>.</strong> 
<br>
<strong>Year(s):</strong> 1998.
<br>
<strong>Model:</strong> Two-dimensional, 9-state, 5-neighbor
	cellular automaton, similar to <a href="#langton">Langton's</a>.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
    H. Sayama.
    ``Introduction of Structural Dissolution into Langton's
	Self-Reproducing Loop.''
     <i>Artificial Life VI: Proceedings of the
     Sixth International Conference on Artificial Life,</i> C. Adami,
     R. K. Belew, H. Kitano, and C. E. Taylor, eds., pp.114-122,
     Los Angeles, California, 1998, MIT Press.
<br>
<strong>Description:</strong>
The ``structurally dissolvable self-reproducing (SDSR) loop'' is a
kind of revision of Langton's self-reproducing (SR) loop, which has
the ability to dissolve its own structure, as well as to reproduce
itself. Specifically, the author introduced a dissolving state
`8' into the set of states of Langton's CA, in addition to modifying
the transition rules. Through this improvement,
the SDSR loop can dissolve its own structure when faced with difficult
situations such as a shortage of space for self-reproduction. This
mechanism (disappearance of a subsystem of the whole system) induces,
for the first time, dynamically stable and potentially evolvable
behavior into the colony of loops.
<br>
<strong>Related work:</strong>    
<A HREF="#langton">Langton</a>.
<p>
More information about the SDSR loop is available 
<a HREF="http://necsi.org/postdocs/sayama/sdsr/" target="_top">
here</a>.

<a name="sayama2">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: <i>Evoloop</i>: An evolving SDSR loop.
</strong>
<br>
<strong>Author(s):
   <a href="http://necsi.org/postdocs/sayama/">
      Hiroki Sayama</a>.</strong> 
<br>
<strong>Year(s):</strong> 1998-1999.
<br>
<strong>Model:</strong> Two-dimensional, 9-state, 5-neighbor
	cellular automaton which is similar to
	<a href="#langton">Langton's CA</a>.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. H. Sayama: ``Spontaneous Evolution of Self-Reproducing Loops
Implemented on Cellular Automata: A Preliminary Report'',
<i>Proceedings of the Second International Conference on Complex
Systems,</i> Y. Bar-Yam, ed., Nashua, New Hampshire, 1998, Perseus Books,
in press /
<a href="http://www.interjournal.org/cgi-bin/manuscript_abstract.cgi?17321">
<i>InterJournal of Complex Systems,</i> BArticle, submitted, 236.</a><br>
2. H. Sayama: ``Toward the Realization of an Evolving Ecosystem
on Cellular Automata'', <i>Proceedings of the Fourth International
Symposium on Artificial Life and Robotics (AROB 4th '99),</i>
M. Sugisaka and H. Tanaka, eds., pp.254-257, Beppu, Oita, Japan, 1999.<br>
3. H. Sayama: ``Constructing Evolutionary Systems on a Simple
Deterministic Cellular Automata Space'', Ph.D. Dissertation,
Department of Information Science, Graduate School of Science, University
of Tokyo, 1998.<br>
<strong>Description:</strong>
The evoloop is a new version of the SDSR loop which
spontaneously varies by direct interaction of phenotypes and
evolves toward fitter species through natural selection, in a
simple deterministic 9-state, 5-neighbor cellular automata
space. It has been realized by enhancing the "adaptability" of
the self-reproductive mechanism of the SDSR loop and modifying its initial
configuration slightly.
<br>
<strong>Related work:</strong>    
<A HREF="#langton">Langton</a>, <A HREF="#sayama">Sayama</a>.
<p>
More information about the <i>evoloop</i> is available 
<a HREF="http://necsi.org/postdocs/sayama/sdsr/">
here</a>.


<a name="smith">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">
<br>
<strong>Title: JohnnyVon: Self-replicating automata in continuous
two-dimensional space.</strong>
<br>
<strong>Author(s): Arnold Smith, 
                   Peter Turney, 
                   Robert Ewaschuk.</strong> 
<br>
<strong>Year(s):</strong> 2002.
<br>
<strong>Model:</strong> mobile automata, two-dimensional continuous space, 
                        virtual physics.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> 
    Smith, A., Turney, P., and Ewaschuk, R. (2002).
    JohnnyVon: Self-replicating automata in continuous
    two-dimensional space. NRC Technical Report ERB-1099.
    National Research Council Canada.
<br>
<strong>Description:</strong>
JohnnyVon is an implementation of self-replicating automata in continuous
 two-dimensional space. Two types of particles drift about in a virtual
 liquid. The particles are automata with discrete internal states but
 continuous external relationships. Their internal states are governed by
 finite state machines but their external relationships are governed by a
 simulated physics that includes brownian motion, viscosity, and spring-like
 attractive and repulsive forces. The particles can be assembled into
 patterns that can encode arbitrary strings of bits. If an arbitrary seed
 pattern is put in a soup of separate individual particles, the pattern will
 replicate by assembling the individual particles into copies of
 itself. Also, given sufficient time, a soup of separate individual
 particles will eventually spontaneously form self-replicating patterns.
<br>
<p>
More information plus simulation is available
<a HREF="http://cogprints.ecs.soton.ac.uk/archive/00002440/" target="_top">
here</a>.
<br>


<a name="hutton">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: <i>Squirm3</i> - Self-replicating molecules in an artificial chemistry.
</strong>
<br>
<strong>Author(s):
   <a href="http://www.eastman.ucl.ac.uk/~thutton/">
      Tim J. Hutton</a>.</strong> 
<br>
<strong>Year(s):</strong> 2002-present.
<br>
<strong>Model:</strong> mobile automata, concrete artificial chemistry.
<br>
<strong>Implementation:</strong> CA, computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. T.J.Hutton "Evolvable Self-Replicating Molecules in an Artificial Chemistry" <i>Artificial Life</i> 8(4): 341-356, 2002.<br>
2. T.J.Hutton "Simulating Evolution's First Steps" <i>7th European Conference on Artificial Life</i> (poster), Dortmund, Germany, 14-17th September 2003. <br>
3. T.J.Hutton "Information-Replicating Molecules with Programmable Enzymes" Invited talk at <i>Sixth International Conference on Humans and Computers</i>, Session 1: Artificial Life and Artificial Chemistry. Aizu-Wakamatsu, Japan, 28-30th August 2003.<br>
<strong>Description:</strong>
Simple rules determine what happens when 'atoms' (eg. e8, a1, f3) bump into each other. Eight rules (reactions) are sufficient to cause a chain of linked atoms (eg. e8-a1-b1-c1-d1-f1) to replicate itself when there are sufficient atoms in state 0 around (eg. e0, a0, f0). Catalytic properties can be added to the rules, making the system a simple model of early RNA replicators or similar. Research investigates whether open-ended evolution can be achieved in such a system.
<br>
<p>
The papers plus simulations and experimental work are available <a href="http://www.eastman.ucl.ac.uk/~thutton/Evolution/Squirm3/">here</a>. 
<br>

<a name="stevens">
<p>
<IMG SRC="http://www.cs.bgu.ac.il/~sipper/gif/icons/red2.gif">

<br>
<strong>Title: Nodes - An Environment for Simulating Kinematic Self-Replicating Machines
</strong>
<br>
<strong>Author(s):
   <a href="http://willsthings.mysite.wanadoo-members.co.uk/SRM/presentation.htm">
      Will Stevens</a>.</strong> 
<br>
<strong>Year(s):</strong> 1997-present.
<br>
<strong>Model:</strong> mobile logical and mechanical components in continuous two-dimensional space.
<br>
<strong>Implementation:</strong> Computer simulation.
<br>
<strong>Reference(s):</strong> <br>
1. W.M.Stevens "NODES: An Environment for Simulating Kinematic Self-Replicating Machines" <i>Proc. of the Ninth International Conference on the Simulation and Synthesis of Living Systems (ALIFE9)</i> 39-44, 2004.<br>
<strong>Description:</strong>
Particles moving in continuous space with Newtonian laws of motion carrying out logical and mechanical functions (Boolean and arithmetic operations, exerting forces, connecting particles together). These particles are put together to make a self-replicating system. The system is made from several disconnected components which cooperate together to replicate the entire system.
<br>
<p>
Further information, animations and simulation software are available <a href="http://willsthings.mysite.wanadoo-members.co.uk/SRM/presentation.htm">here</a>. 
<br>


<!IMG SRC="/cgi-bin/nph-count?width=5&link=moshes_selfrep&show=NO">

